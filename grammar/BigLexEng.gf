concrete BigLexEng of BigLexEngAbs = CatEng ** open ParadigmsEng, IrregEng in {
lin abandon_V2 = prpV2 (regV "abandon") "" ;
lin abbreviate_V2 = prpV2 (regV "abbreviate") "" ;
lin abduct_V2 = prpV2 (regV "abduct") "" ;
lin able_A2 = regA2 "able" "" ;
lin able_A = regA "able" ;
lin abolish_V2 = prpV2 (regV "abolish") "" ;
lin abolition_N = regN "abolition" ;
lin abound_V = (regV "abound") ;
lin about_Prep = mkPrep "about" ;
lin above_Adv = mkAdv "above" ;
--lin above_Prep = mkPrep "above" ;
lin abroad_Adv = mkAdv "abroad" ;
lin absence_N2from = prepN2 "absence" "from" ;
lin absent_A = regA "absent" ;
lin absent_A2from = regA2 "absent" "from" ;
lin absentee_N = regN "absentee" ;
lin absolute_A = longA "absolute" ;
lin absolve_V3from = dirprepV3 (regV "absolve") "from" ;
lin abstract_N = regN "abstract" ;
lin abstract_A = longA "abstract" ;
lin abstract_V = (regV "abstract") ;
lin abundance_N = regN "abundance" ;
lin abundant_A = longA "abundant" ;
lin academic_A = longA "academic" ;
lin accelerate_V2 = prpV2 (regV "accelerate") "" ;
lin accept_V2 = prpV2 (regV "accept") "" ;
lin access_V2 = prpV2 (regV "access") "" ;
lin access_N2to = prepN2 "access" "to" ;
lin accessible_A = longA "accessible" ;
lin accessible_A2to = longA2 "accessible" "to" ;
lin accident_N = regN "accident" ;
lin accommodate_V2 = prpV2 (regV "accommodate") "" ;
lin accompany_V2 = prpV2 (regV "accompany") "" ;
lin accomplish_V2 = prpV2 (regV "accomplish") "" ;
lin accord_V2with = prpV2 (regV "accord") "with" ;
lin accordingly_Adv = mkAdv "accordingly" ;
lin account_N = regN "account" ;
lin account_V2for = prpV2 (regV "account") "for" ;
lin accumulate_V2 = prpV2 (regV "accumulate") "" ;
lin accuracy_N = regN "accuracy" ;
lin accurate_A = longA "accurate" ;
lin accuse_V3of = dirprepV3 (regV "accuse") "of" ;
lin ache_N = regN "ache" ;
lin ache_V = (regV "ache") ;
lin achieve_V2 = prpV2 (regV "achieve") "" ;
lin acknowledge_V2 = prpV2 (regV "acknowledge") "" ;
lin acknowledge_VS = mkVS (regV "acknowledge") ;
lin acquire_V2 = prpV2 (regV "acquire") "" ;
lin acquisition_N = regN "acquisition" ;
lin acquisitive_A = longA "acquisitive" ;
lin across_Prep = mkPrep "across" ;
lin act_N = regN "act" ;
lin act_V = (regV "act") ;
lin activate_V2 = prpV2 (regV "activate") "" ;
lin actor_N = regN "actor" ;
lin actress_N = regN "actress" ;
lin actual_A = longA "actual" ;
lin acute_A = longA "acute" ;
lin adage_N = regN "adage" ;
lin adapt_V2 = prpV2 (regV "adapt") "" ;
lin add_V3to = dirprepV3 (regV "add") "to" ;
lin addict_N = regN "addict" ;
lin addict_V2 = prpV2 (regV "addict") "" ;
lin addition_N2to = prepN2 "addition" "to" ;
lin additive_N = regN "additive" ;
lin address_N = regN "address" ;
lin address_V2 = prpV2 (regV "address") "" ;
lin adept_A = regA "adept" ;
lin adept_A2at = regA2 "adept" "at" ;
lin adequacy_N = regN "adequacy" ;
lin adequate_A = longA "adequate" ;
lin adequate_A2for = longA2 "adequate" "for" ;
lin adhere_V2to = prpV2 (regV "adhere") "to" ;
lin adherent_N = regN "adherent" ;
lin adhesive_N = regN "adhesive" ;
lin adhesive_A = longA "adhesive" ;
lin adjacency_N2to = prepN2 "adjacency" "to" ;
lin adjacent_A = longA "adjacent" ;
lin adjacent_A2to = longA2 "adjacent" "to" ;
lin adjective_N = regN "adjective" ;
lin adjoin_V2 = prpV2 (regV "adjoin") "" ;
lin adjunct_N = regN "adjunct" ;
lin adjust_V2 = prpV2 (regV "adjust") "" ;
lin administer_V2 = prpV2 (regV "administer") "" ;
lin administration_N = regN "administration" ;
lin admire_V2 = prpV2 (regV "admire") "" ;
lin admissible_A = longA "admissible" ;
lin admission_N = regN "admission" ;
lin admission_N2to = prepN2 "admission" "to" ;
lin admit_V2 = prpV2 (regV "admit") "" ;
lin admit_V3to = dirprepV3 (regV "admit") "to" ;
lin admit_V = (regV "admit") ;
lin admit_V2of = prpV2 (regV "admit") "of" ;
lin admit_VS = mkVS (regV "admit") ;
lin adopt_V2 = prpV2 (regV "adopt") "" ;
lin adult_N = regN "adult" ;
lin adult_A = longA "adult" ;
lin advance_N = regN "advance" ;
lin advance_V = (regV "advance") ;
lin advantage_N = regN "advantage" ;
lin advent_N = regN "advent" ;
lin adventure_N = regN "adventure" ;
lin adverb_N = regN "adverb" ;
lin adverbial_A = longA "adverbial" ;
lin adverse_A = longA "adverse" ;
lin advertise_V2 = prpV2 (regV "advertise") "" ;
lin advice_N = regN "advice" ;
lin advise_V2 = prpV2 (regV "advise") "" ;
lin advisor_N = regN "advisor" ;
lin advocate_V2 = prpV2 (regV "advocate") "" ;
lin aerobic_A = longA "aerobic" ;
lin aesthetic_A = longA "aesthetic" ;
lin affair_N = regN "affair" ;
lin affect_V2 = prpV2 (regV "affect") "" ;
lin affection_N2for = prepN2 "affection" "for" ;
lin affix_N = regN "affix" ;
lin affix_V3with = dirprepV3 (regV "affix") "with" ;
lin afflict_V2 = prpV2 (regV "afflict") "" ;
lin afford_V2 = prpV2 (regV "afford") "" ;
lin afford_VV = mkVV (regV "afford") ;
lin afresh_Adv = mkAdv "afresh" ;
lin africa_PN = regPN "africa" ;
lin african_A = longA "african" ;
lin african_N = regN "african" ;
lin after_Subj = mkSubj "after" ;
--lin after_Prep = mkPrep "after" ;
lin afternoon_N = regN "afternoon" ;
lin afterthought_N = regN "afterthought" ;
lin afterwards_Adv = mkAdv "afterwards" ;
lin again_Adv = mkAdv "again" ;
lin against_Prep = mkPrep "against" ;
lin age_N = regN "age" ;
lin aged_A = regA "aged" ;
lin agency_N = regN "agency" ;
lin agenda_N = regN "agenda" ;
lin agent_N = regN "agent" ;
lin aggravate_V2 = prpV2 (regV "aggravate") "" ;
lin aggressive_A = longA "aggressive" ;
lin ago_Adv = mkAdv "ago" ;
lin agree_V2with = prpV2 (regV "agree") "with" ;
lin ahead_Adv = mkAdv "ahead" ;
lin aid_N = regN "aid" ;
lin aid_V2 = prpV2 (regV "aid") "" ;
lin aide_N = regN "aide" ;
lin aim_N = regN "aim" ;
lin aim_V2at = prpV2 (regV "aim") "at" ;
lin aim_V2to = prpV2 (regV "aim") "to" ;
lin air_N = regN "air" ;
lin aircraft_N = irregN "aircraft" "aircraft" ;
lin akin_A = longA "akin" ;
lin akin_A = longA "akin" ;
lin alcohol_N = regN "alcohol" ;
lin alcoholic_A = longA "alcoholic" ;
lin alcoholic_N = regN "alcoholic" ;
lin algebra_N = regN "algebra" ;
lin algorithm_N = regN "algorithm" ;
lin alias_N2for = prepN2 "alias" "for" ;
lin align_V2 = prpV2 (regV "align") "" ;
-- lin all_Adv = mkAdv "all" ;
lin allege_VS = mkVS (regV "allege") ;
lin alley_N = regN "alley" ;
lin allocate_V3to = dirprepV3 (regV "allocate") "to" ;
lin allow_V2 = prpV2 (regV "allow") "" ;
lin allow_V2 = prpV2 (regV "allow") "" ;
lin allow_V2for = prpV2 (regV "allow") "for" ;
lin allow_V2of = prpV2 (regV "allow") "of" ;
lin allude_V2to = prpV2 (regV "allude") "to" ;
lin ally_N = regN "ally" ;
lin ally_V2with = prpV2 (regV "ally") "with" ;
-- lin almost_Adv = mkAdv "almost" ;
lin alone_Adv = mkAdv "alone" ;
lin along_Prep = mkPrep "along" ;
lin aloud_Adv = mkAdv "aloud" ;
lin alphabet_N = regN "alphabet" ;
lin alphabetic_A = longA "alphabetic" ;
lin alphanumeric_A = longA "alphanumeric" ;
lin already_Adv = mkAdv "already" ;
lin also_Adv = mkAdv "also" ;
lin altar_N = regN "altar" ;
lin alter_V = (regV "alter") ;
lin alternate_V2with = prpV2 (regV "alternate") "with" ;
lin alternative_N2to = prepN2 "alternative" "to" ;
lin alternatively_A = longA "alternatively" ;
lin always_Adv = mkAdv "always" ;
lin amaze_V2 = prpV2 (regV "amaze") "" ;
lin amazing_A = longA "amazing" ;
lin ambiguity_N = regN "ambiguity" ;
lin ambiguous_A = longA "ambiguous" ;
lin ambition_N2 = prepN2 "ambition" "" ;
lin ambitious_A = longA "ambitious" ;
lin amenable_A = longA "amenable" ;
lin amenable_A2to = longA2 "amenable" "to" ;
lin amend_V2 = prpV2 (regV "amend") "" ;
lin amenity_N = regN "amenity" ;
lin america_PN = regPN "america" ;
lin american_A = longA "american" ;
lin american_N = regN "american" ;
lin among_Prep = mkPrep "among" ;
lin amongst_Prep = mkPrep "amongst" ;
lin ampere_N = regN "ampere" ;
lin ampersand_N = regN "ampersand" ;
lin amuse_V2 = prpV2 (regV "amuse") "" ;
lin anachronism_N = regN "anachronism" ;
lin anachronistic_A = longA "anachronistic" ;
lin analogous_A = longA "analogous" ;
lin analogous_A2to = longA2 "analogous" "to" ;
lin analogue_N = regN "analogue" ;
lin analogy_N2with = prepN2 "analogy" "with" ;
lin analyse_V2 = prpV2 (regV "analyse") "" ;
lin analysis_N = irregN "analysis" "analyses" ;
lin analytic_A = longA "analytic" ;
lin anaphor_N = regN "anaphor" ;
lin anaphora_N = regN "anaphora" ;
lin anaphoric_A = longA "anaphoric" ;
lin ancestor_N = regN "ancestor" ;
lin ancient_A = longA "ancient" ;
lin anecdote_N = regN "anecdote" ;
lin anger_N = regN "anger" ;
lin angle_N = regN "angle" ;
lin angled_A = longA "angled" ;
lin angler_N = regN "angler" ;
lin angling_N = regN "angling" ;
lin angry_A = regA "angry" ;
lin angry_A2about = regA2 "angry" "about" ;
lin angry_A2at = regA2 "angry" "at" ;
lin angry_A2with = regA2 "angry" "with" ;
lin angry_A2 = regA2 "angry" "" ;
lin animal_N = regN "animal" ;
lin animate_A = longA "animate" ;
lin animate_V2 = prpV2 (regV "animate") "" ;
lin ankle_N = regN "ankle" ;
lin annotate_V2 = prpV2 (regV "annotate") "" ;
lin announce_V2 = prpV2 (regV "announce") "" ;
lin announce_V2 = prpV2 (regV "announce") "" ;
lin annoy_V2 = prpV2 (regV "annoy") "" ;
lin annual_A = longA "annual" ;
lin anomalous_A = longA "anomalous" ;
lin anomaly_N = regN "anomaly" ;
lin answer_N = regN "answer" ;
lin answer_V2 = prpV2 (regV "answer") "" ;
lin ant_N = regN "ant" ;
lin antecedent_N = regN "antecedent" ;
lin anthropomorphic_A = longA "anthropomorphic" ;
lin anthropomorphism_N = regN "anthropomorphism" ;
lin antibiotic_N = regN "antibiotic" ;
lin anticipate_V2 = prpV2 (regV "anticipate") "" ;
lin anticipate_V = (regV "anticipate") ;
lin anticipate_VS = mkVS (regV "anticipate") ;
lin anxiety_N = regN "anxiety" ;
lin anxious_A = longA "anxious" ;
lin anxious_A2about = longA2 "anxious" "about" ;
lin anxious_A2 = longA2 "anxious" "" ;
lin anyhow_Adv = mkAdv "anyhow" ;
lin anyway_Adv = mkAdv "anyway" ;
lin anywhere_Adv = mkAdv "anywhere" ;
lin ape_N = regN "ape" ;
lin apologetic_A = longA "apologetic" ;
lin apologetic_A2for = longA2 "apologetic" "for" ;
lin apologise_V2for = prpV2 (regV "apologise") "for" ;
lin apologize_V2for = prpV2 (regV "apologize") "for" ;
lin appal_V2 = prpV2 (regV "appal") "" ;
lin apparatus_N = regN "apparatus" ;
lin apparent_A = longA "apparent" ;
lin apparent_A2to = longA2 "apparent" "to" ;
lin apparition_N = regN "apparition" ;
lin appeal_V2to = prpV2 (regV "appeal") "to" ;
lin appeal_N2to = prepN2 "appeal" "to" ;
lin appear_V2 = prpV2 (regV "appear") "" ;
lin appear_V2 = prpV2 (regV "appear") "" ;
lin appear_V = (regV "appear") ;
lin appear_V2 = prpV2 (regV "appear") "" ;
lin append_V3to = dirprepV3 (regV "append") "to" ;
lin appendix_N = irregN "appendix" "appendices" ;
lin apple_N = regN "apple" ;
lin applicable_A = longA "applicable" ;
lin applicable_A2to = longA2 "applicable" "to" ;
lin applicant_N = regN "applicant" ;
lin apply_V3to = dirprepV3 (regV "apply") "to" ;
lin apply_V2for = prpV2 (regV "apply") "for" ;
lin appoint_V2 = prpV2 (regV "appoint") "" ;
lin appoint_V = (regV "appoint") ;
lin appoint_V2 = prpV2 (regV "appoint") "" ;
lin appointment_N = regN "appointment" ;
lin apposite_A = longA "apposite" ;
lin appraise_V2 = prpV2 (regV "appraise") "" ;
lin appreciate_VS = mkVS (regV "appreciate") ;
lin apprehend_V2 = prpV2 (regV "apprehend") "" ;
lin apprehension_N = regN "apprehension" ;
lin apprehensive_A = longA "apprehensive" ;
lin approach_V2 = prpV2 (regV "approach") "" ;
lin approach_N2to = prepN2 "approach" "to" ;
lin approbation_N = regN "approbation" ;
lin appropriate_A = longA "appropriate" ;
lin appropriate_A2for = longA2 "appropriate" "for" ;
lin approve_V2of = prpV2 (regV "approve") "of" ;
lin approximate_A = longA "approximate" ;
lin approximate_V2to = prpV2 (regV "approximate") "to" ;
lin april_PN = regPN "april" ;
lin apse_N = regN "apse" ;
lin apt_A = regA "apt" ;
lin apt_A2 = regA2 "apt" "" ;
lin aptitude_N = regN "aptitude" ;
lin arabian_A = longA "arabian" ;
lin arabic_A = longA "arabic" ;
lin arbitrary_A = longA "arbitrary" ;
lin arc_N = regN "arc" ;
lin arch_N = regN "arch" ;
lin archetype_N = regN "archetype" ;
lin architect_N = regN "architect" ;
lin architecture_N = regN "architecture" ;
lin area_N = regN "area" ;
lin arena_N = regN "arena" ;
lin argue_V = (regV "argue") ;
lin argument_N2s_withabout = prepN2 "argument" "s_withabout" ; --
lin argument_N2 = prepN2 "argument" "" ; --
--lin arise_V = useV IrregEng.arise_V ;
lin arithmetic_N = regN "arithmetic" ;
lin arm_N = regN "arm" ;
lin arm_V2 = prpV2 (regV "arm") "" ;
lin armour_N = regN "armour" ;
lin armoury_N = regN "armoury" ;
lin army_N = regN "army" ;
lin around_Prep = mkPrep "around" ;
lin arouse_V2 = prpV2 (regV "arouse") "" ;
lin arrange_V = (regV "arrange") ;
lin arrange_V2 = prpV2 (regV "arrange") "" ;
lin arrange_VV = mkVV (regV "arrange") ;
lin arrange_V2 = prpV2 (regV "arrange") "" ;
lin array_N = regN "array" ;
lin arrest_V2 = prpV2 (regV "arrest") "" ;
lin arrive_V = (regV "arrive") ;
lin arrive_V2at = prpV2 (regV "arrive") "at" ;
lin arrow_N = regN "arrow" ;
lin art_N = regN "art" ;
lin artefact_N = regN "artefact" ;
lin article_N = regN "article" ;
lin articulate_V2 = prpV2 (regV "articulate") "" ;
lin artificial_A = longA "artificial" ;
lin artist_N = regN "artist" ;
lin as_Subj = mkSubj "as" ;
lin ascend_V2 = prpV2 (regV "ascend") "" ;
lin ascend_V = (regV "ascend") ;
lin ascent_N = regN "ascent" ;
lin ascertain_V2 = prpV2 (regV "ascertain") "" ;
lin ascribe_V3to = dirprepV3 (regV "ascribe") "to" ;
lin ash_N = regN "ash" ;
lin asia_PN = regPN "asia" ;
lin ask_V2 = prpV2 (regV "ask") "" ;
lin ask_V3for = dirprepV3 (regV "ask") "for" ;
lin ask_V3to = dirprepV3 (regV "ask") "to" ;
lin ask_V3s = dirprepV3 (regV "ask") "s" ; --
lin ask_V2 = prpV2 (regV "ask") "" ;
lin ask_V2for = prpV2 (regV "ask") "for" ;
lin ask_V2 = prpV2 (regV "ask") "" ;
lin ask_V2 = prpV2 (regV "ask") "" ;
lin ask_V2 = prpV2 (regV "ask") "" ;
lin ask_V2 = prpV2 (regV "ask") "" ;
lin aspect_N = regN "aspect" ;
lin aspire_V2to = prpV2 (regV "aspire") "to" ;
lin aspire_VV = mkVV (regV "aspire") ;
lin aspirin_N = regN "aspirin" ;
lin ass_N = regN "ass" ;
lin assault_N = regN "assault" ;
lin assault_V2 = prpV2 (regV "assault") "" ;
lin assemble_V2 = prpV2 (regV "assemble") "" ;
lin assembly_N = regN "assembly" ;
lin assent_V2to = prpV2 (regV "assent") "to" ;
lin assert_VS = mkVS (regV "assert") ;
lin assess_V2 = prpV2 (regV "assess") "" ;
lin assign_V3to = dirprepV3 (regV "assign") "to" ;
lin assimilate_V2 = prpV2 (regV "assimilate") "" ;
lin assist_V2 = prpV2 (regV "assist") "" ;
lin assist_V = (regV "assist") ;
lin assist_V2 = prpV2 (regV "assist") "" ;
lin assist_V2at = prpV2 (regV "assist") "at" ;
lin assistant_N = regN "assistant" ;
lin associate_V3with =dirprepV3 (regV "associate") "with" ;
lin association_N = regN "association" ;
lin assume_V2 = prpV2 (regV "assume") "" ;
lin assume_VS = mkVS (regV "assume") ;
lin assumption_N2 = prepN2 "assumption" "" ; --
lin assure_VS = mkVS (regV "assure") ;
lin asterisk_N = regN "asterisk" ;
lin asthma_N = regN "asthma" ;
lin asthmatic_A = longA "asthmatic" ;
lin asthmatically_Adv = mkAdv "asthmatically" ;
lin astonish_V2 = prpV2 (regV "astonish") "" ;
lin astronomer_N = regN "astronomer" ;
lin astronomy_N = regN "astronomy" ;
lin asymmetry_N = regN "asymmetry" ;
lin at_Prep = mkPrep "at" ;
lin atlas_N = regN "atlas" ;
lin atmosphere_N = regN "atmosphere" ;
lin atom_N = regN "atom" ;
lin attach_V2 = prpV2 (regV "attach") "" ;
lin attach_V3to =dirprepV3 (regV "attach") "to" ;
lin attach_V2to = prpV2 (regV "attach") "to" ;
lin attack_V2 = prpV2 (regV "attack") "" ;
lin attack_N2on = prepN2 "attack" "on" ;
lin attain_V2 = prpV2 (regV "attain") "" ;
lin attempt_N2 = prepN2 "attempt" "" ;
lin attempt_VV = mkVV (regV "attempt") ;
lin attend_V2to = prpV2 (regV "attend") "to" ;
lin attention_N2to = prepN2 "attention" "to" ;
lin attentive_A = longA "attentive" ;
lin attentive_A2to = longA2 "attentive" "to" ;
lin attitude_N = regN "attitude" ;
lin attract_V2 = prpV2 (regV "attract") "" ;
lin attribute_N = regN "attribute" ;
lin attribute_V3to =dirprepV3 (regV "attribute") "to" ;
lin audible_A = longA "audible" ;
lin audience_N = regN "audience" ;
lin augment_V2 = prpV2 (regV "augment") "" ;
lin august_PN = regPN "august" ;
lin aunt_N2of = prepN2 "aunt" "of" ;
lin australia_PN = regPN "australia" ;
lin australian_A = longA "australian" ;
lin austria_PN = regPN "austria" ;
lin author_N = regN "author" ;
lin authority_N = regN "authority" ;
lin authorize_V2 = prpV2 (regV "authorize") "" ;
lin automate_V2 = prpV2 (regV "automate") "" ;
lin automatic_A = longA "automatic" ;
lin automatically_Adv = mkAdv "automatically" ;
lin automaton_N = irregN "automaton" "automata" ;
lin autonomous_A = longA "autonomous" ;
lin autonomy_N = regN "autonomy" ;
lin autumn_N = regN "autumn" ;
lin auxiliary_A = longA "auxiliary" ;
lin auxiliary_N = regN "auxiliary" ;
lin avail_V2 = prpV2 (regV "avail") "" ;
lin available_A = longA "available" ;
lin avenue_N = regN "avenue" ;
lin average_A = longA "average" ;
lin average_N = regN "average" ;
lin average_V2 = prpV2 (regV "average") "" ;
lin avoid_V2 = prpV2 (regV "avoid") "" ;
lin avoid_V2 = prpV2 (regV "avoid") "" ;
lin avowed_A = longA "avowed" ;
lin await_V2 = prpV2 (regV "await") "" ;
lin awaken_V2 = prpV2 (regV "awaken") "" ;
lin award_V3to =dirprepV3 (regV "award") "to" ;
lin awful_A = longA "awful" ;
lin awkward_A = regA "awkward" ;
lin axe_N = regN "axe" ;
lin axiom_N = regN "axiom" ;
lin axiomatic_A = longA "axiomatic" ;
lin axiomatize_V2 = prpV2 (regV "axiomatize") "" ;
lin axis_N = irregN "axis" "axes" ;
lin baby_N = regN "baby" ;
lin back_N = regN "back" ;
lin background_N = regN "background" ;
lin backing_N = regN "backing" ;
lin backtrack_V = (regV "backtrack") ;
lin backward_A = longA "backward" ;
lin backwards_Adv = mkAdv "backwards" ;
lin bacterial_A = longA "bacterial" ;
lin bacterium_N = irregN "bacterium" "bacteria" ;
lin bad_A = longA "bad" ;
lin bag_N = regN "bag" ;
lin bake_V2 = prpV2 (regV "bake") "" ;
lin bake_V = (regV "bake") ;
lin balance_V = (regV "balance") ;
lin ball_N = regN "ball" ;
lin ballad_N = regN "ballad" ;
lin banal_A = longA "banal" ;
lin banana_N = regN "banana" ;
lin band_N = regN "band" ;
lin bang_N = regN "bang" ;
lin banish_V2 = prpV2 (regV "banish") "" ;
lin bank_N = regN "bank" ;
lin bar_N = regN "bar" ;
lin bar_V2 = prpV2 (regV "bar") "" ;
lin bare_A = regA "bare" ;
lin bare_V2 = prpV2 (regV "bare") "" ;
lin bark_N = regN "bark" ;
lin bark_V = (regV "bark") ;
lin barn_N = regN "barn" ;
lin baron_N = regN "baron" ;
lin barrel_N = regN "barrel" ;
lin base_N = regN "base" ;
lin base_V3loc =dirprepV3 (regV "base") "loc" ;
lin basic_A = longA "basic" ;
lin basically_Adv = mkAdv "basically" ;
lin basin_N = regN "basin" ;
lin basis_N = irregN "basis" "basis" ;
lin basis_N2for = irregN2 "basis" "bases" "for" ;
lin basis_N2of = irregN2 "basis" "bases" "of" ;
lin basket_N = regN "basket" ;
lin bat_N = regN "bat" ;
lin batch_N = regN "batch" ;
lin bath_N = regN "bath" ;
lin bathe_V = (regV "bathe") ;
lin batsman_N = irregN "batsman" "batsmen" ;
lin battle_N = regN "battle" ;
lin beach_N = regN "beach" ;
lin beak_N = regN "beak" ;
lin beam_N = regN "beam" ;
lin bean_N = regN "bean" ;
lin bear_N = regN "bear" ;
lin bear_V2 = prpV2 bear_V "" ;
lin beard_N = regN "beard" ;
lin beast_N = regN "beast" ;
lin beat_V2 = prpV2 beat_V "" ;
lin beauty_N = regN "beauty" ;
--lin because_Subj = mkSubj "because" ;
lin become_V2 = prpV2 become_V "" ;
lin bed_N = regN "bed" ;
lin bee_N = regN "bee" ;
lin beer_N = massN "beer" ;
lin before_Subj = mkSubj "before" ;
--lin before_Prep = mkPrep "before" ;
lin beg_V2 = prpV2 (regV "beg") "" ;
lin begin_V2 = prpV2 begin_V "" ;
lin beginning_N = regN "beginning" ;
lin behalf_N = irregN "behalf" "behalf" ;
lin behave_V = (regV "behave") ;
lin behaviour_N = massN "behaviour" ;
--lin behind_Prep = mkPrep "behind" ;
lin being_N = regN "being" ;
lin belief_N = regN "belief" ;
lin belief_N2in = prepN2 "belief" "in" ;
lin belief_N2 = prepN2 "belief" "" ;
lin believe_V2 = prpV2 (regV "believe") "" ;
lin believe_V2in = prpV2 (regV "believe") "in" ;
lin believe_VS = mkVS (regV "believe") ;
lin believe_VS = mkVS (regV "believe") ;
lin believe_VS = mkVS (regV "believe") ;
lin bell_N = regN "bell" ;
lin belong_V2 = prpV2 (regV "belong") "" ;
lin beloved_A = longA "beloved" ;
lin beloved_A2by = longA2 "beloved" "by" ;
lin below_Prep = mkPrep "below" ;
lin belt_N = regN "belt" ;
lin bench_N = regN "bench" ;
lin bend_V = useV IrregEng.bend_V ;
lin beneath_Prep = mkPrep "beneath" ;
lin beneficial_A = longA "beneficial" ;
lin beneficial_A2to = longA2 "beneficial" "to" ;
lin benefit_N = regN "benefit" ;
lin berry_N = regN "berry" ;
lin beside_Prep = mkPrep "beside" ;
lin besides_Adv = mkAdv "besides" ;
lin bet_N = regN "bet" ;
lin betray_V2 = prpV2 (regV "betray") "" ;
lin beyond_Prep = mkPrep "beyond" ;
lin bias_V2 = prpV2 (regV "bias") "" ;
lin bible_N = regN "bible" ;
lin biblical_A = regA "biblical" ;
lin bibliography_N = regN "bibliography" ;
lin biconditional_V = (regV "biconditional") ;
lin bicycle_N = regN "bicycle" ;
lin bidirectional_A = longA "bidirectional" ;
lin big_A = regA "big" ;
lin bike_N = regN "bike" ;
lin bill_N = regN "bill" ;
lin bill_PN = regPN "bill" ;
lin billion_N2 = prepN2 "billion" "" ;
lin bin_N = regN "bin" ;
lin binary_A = longA "binary" ;
lin bind_V2 = prpV2 bind_V "" ;
lin binding_N = regN "binding" ;
lin bird_N = regN "bird" ;
lin birth_N = regN "birth" ;
lin birthday_N = regN "birthday" ;
lin bisect_V = (regV "bisect") ;
lin bisector_N = regN "bisector" ;
lin bit_N = regN "bit" ;
lin bite_V2 = prpV2 bite_V "" ;
lin bitter_A = longA "bitter" ;
lin bizarre_A = longA "bizarre" ;
lin black_A = regA "black" ;
lin blackboard_N = regN "blackboard" ;
lin blade_N = regN "blade" ;
lin blame_V3for =dirprepV3 (regV "blame") "for" ;
lin blame_N = regN "blame" ;
lin blame_N2for = prepN2 "blame" "for" ;
lin blank_A = regA "blank" ;
lin blank_N = regN "blank" ;
lin bleed_V = useV IrregEng.bleed_V ;
lin blind_A = regA "blind" ;
lin blind_V2 = prpV2 (regV "blind") "" ;
lin block_N = regN "block" ;
lin block_V2 = prpV2 (regV "block") "" ;
lin blood_N = regN "blood" ;
lin blow_N = regN "blow" ;
lin blow_V = useV IrregEng.blow_V ;
lin blue_A = regA "blue" ;
lin bluff_V = (regV "bluff") ;
lin board_N = regN "board" ;
lin boat_N = regN "boat" ;
lin body_N = regN "body" ;
lin boil_V2 = prpV2 (regV "boil") "" ;
lin bold_A = regA "bold" ;
lin bomb_N = regN "bomb" ;
lin bomb_V2 = prpV2 (regV "bomb") "" ;
lin bombard_V2 = prpV2 (regV "bombard") "" ;
lin bond_N = regN "bond" ;
lin bond_V3to =dirprepV3 (regV "bond") "to" ;
lin bone_N = regN "bone" ;
lin bonus_N = regN "bonus" ;
lin book_N = regN "book" ;
lin bookkeeping_N = regN "bookkeeping" ;
lin boolean_A = longA "boolean" ;
lin boorish_A = longA "boorish" ;
lin boost_V2 = prpV2 (regV "boost") "" ;
lin boot_N = regN "boot" ;
lin bootstrap_N = regN "bootstrap" ;
lin border_N = regN "border" ;
lin border_V2 = prpV2 (regV "border") "" ;
lin bore_N = regN "bore" ;
lin bore_V2 = prpV2 (regV "bore") "" ;
lin borrow_V3from =dirprepV3 (regV "borrow") "from" ;
lin boss_N = regN "boss" ;
lin bother_V2 = prpV2 (regV "bother") "" ;
lin bother_V2about = prpV2 (regV "bother") "about" ;
lin bottle_N = regN "bottle" ;
lin bottom_N = regN "bottom" ;
lin bough_N = regN "bough" ;
lin bound_A2for = longA2 "bound" "for" ;
lin bound_V = (regV "bound") ;
lin boundary_N = regN "boundary" ;
lin bounded_A = longA "bounded" ;
lin bow_N = regN "bow" ;
lin bowl_N = regN "bowl" ;
lin box_N = regN "box" ;
lin boy_N = regN "boy" ;
lin brace_N = regN "brace" ;
lin bracket_N = regN "bracket" ;
lin bracket_V2 = prpV2 (regV "bracket") "" ;
lin brain_N = regN "brain" ;
lin branch_V = (regV "branch") ;
lin brand_N = regN "brand" ;
lin brandy_N = regN "brandy" ;
lin brass_N = regN "brass" ;
lin brave_A = regA "brave" ;
lin breach_N = regN "breach" ;
lin breach_V2 = prpV2 (regV "breach") "" ;
lin bread_N = regN "bread" ;
lin breadth_N = regN "breadth" ;
lin break_N = regN "break" ;
lin break_V2 = prpV2 break_V "" ;
lin breakage_N = regN "breakage" ;
lin breakfast_N = regN "breakfast" ;
lin breath_N = regN "breath" ;
lin breathe_V = (regV "breathe") ;
lin breed_V = (regV "breed") ;
lin breed_N = regN "breed" ;
lin breeze_N = regN "breeze" ;
lin brew_V2 = prpV2 (regV "brew") "" ;
lin brick_N = regN "brick" ;
lin bridge_N = regN "bridge" ;
lin bridge_V2 = prpV2 (regV "bridge") "" ;
lin brief_A = regA "brief" ;
lin bright_A = regA "bright" ;
lin brilliant_A = regA "brilliant" ;
lin bring_V2 = prpV2 bring_V "" ;
lin bristle_N = regN "bristle" ;
lin britain_PN = regPN "britain" ;
lin british_A = longA "british" ;
lin broach_V2 = prpV2 (regV "broach") "" ;
lin broad_A = regA "broad" ;
lin broadcast_N = regN "broadcast" ;
lin bronchitis_N = regN "bronchitis" ;
lin brother_N = regN "brother" ;
lin brother_N2of = prepN2 "brother" "of" ;
lin brown_A = regA "brown" ;
lin bruise_N = regN "bruise" ;
lin bruise_V2 = prpV2 (regV "bruise") "" ;
lin brute_N = regN "brute" ;
lin bucket_N = regN "bucket" ;
lin bud_N = regN "bud" ;
lin bud_V = (regV "bud") ;
lin buffer_N = regN "buffer" ;
lin buffer_V2 = prpV2 (regV "buffer") "" ;
lin bug_N = regN "bug" ;
lin build_V2 = prpV2 build_V "" ;
lin building_N = regN "building" ;
lin bullet_N = regN "bullet" ;
lin bully_N = regN "bully" ;
lin bully_V2 = prpV2 (regV "bully") "" ;
lin bun_N = regN "bun" ;
lin bunch_N = regN "bunch" ;
lin bundle_N = regN "bundle" ;
lin burden_N = regN "burden" ;
lin burn_V2 = prpV2 burn_V "" ;
lin burst_V = useV IrregEng.burst_V ;
lin bury_V2 = prpV2 (regV "bury") "" ;
lin bus_N = regN "bus" ;
lin bush_N = regN "bush" ;
lin business_N = regN "business" ;
lin busy_A = regA "busy" ;
lin butter_N = massN "butter" ;
lin butter_V2 = prpV2 (regV "butter") "" ;
lin butterfly_N = regN "butterfly" ;
lin button_N = regN "button" ;
lin buy_V2 = prpV2 buy_V "" ;
lin buzz_V = (regV "buzz") ;
lin by_Prep = mkPrep "by" ;
lin cabinet_N = regN "cabinet" ;
lin cable_N = regN "cable" ;
lin cage_N = regN "cage" ;
lin cake_N = regN "cake" ;
lin calculate_V2 = prpV2 (regV "calculate") "" ;
lin calculus_N = regN "calculus" ;
lin call_N = regN "call" ;
lin call_V2 = prpV2 (regV "call") "" ;
lin calm_A = regA "calm" ;
lin cam_N = regN "cam" ;
lin cambridge_PN = regPN "cambridge" ;
lin camel_N = regN "camel" ;
lin camera_N = regN "camera" ;
lin camp_N = regN "camp" ;
lin campaign_N = regN "campaign" ;
lin can_N = regN "can" ;
lin can_V2 = prpV2 (regV "can") "" ;
lin canada_PN = regPN "canada" ;
lin canadian_A = regA "canadian" ;
lin cancel_V2 = prpV2 (regV "cancel") "" ;
lin cancer_N = regN "cancer" ;
lin candid_A = longA "candid" ;
lin candidate_N = regN "candidate" ;
lin candle_N = regN "candle" ;
lin cannon_N = regN "cannon" ;
lin canonical_A = longA "canonical" ;
lin cap_N = regN "cap" ;
lin capable_A = longA "capable" ;
lin capable_A2of = longA2 "capable" "of" ;
lin capacity_N = regN "capacity" ;
lin capital_N = regN "capital" ;
lin captain_N = regN "captain" ;
lin captain_N2 = prepN2 "captain" "" ;
lin capture_V2 = prpV2 (regV "capture") "" ;
lin car_N = regN "car" ;
lin card_N = regN "card" ;
lin cardboard_N = massN "cardboard" ;
lin cardinal_A = longA "cardinal" ;
lin cardinal_N = regN "cardinal" ;
lin care_V = (regV "care") ;
lin care_N = massN "care" ;
lin career_N = regN "career" ;
lin carriage_N = regN "carriage" ;
lin carry_V2 = prpV2 (regV "carry") "" ;
lin cart_N = regN "cart" ;
lin cartesian_A = longA "cartesian" ;
lin carve_V2 = prpV2 (regV "carve") "" ;
lin case_N = regN "case" ;
lin cash_N = regN "cash" ;
lin cast_N = regN "cast" ;
lin cast_V2 = prpV2 cast_V "" ;
lin castle_N = regN "castle" ;
lin casual_A = longA "casual" ;
lin cat_N = regN "cat" ;
lin catch_N = regN "catch" ;
lin catch_V2 = prpV2 catch_V "" ;
lin categorical_A = longA "categorical" ;
lin category_N = regN "category" ;
lin cater_V2for = prpV2 (regV "cater") "for" ;
lin cause_N = regN "cause" ;
lin cause_V2 = prpV2 (regV "cause") "" ;
lin caution_N = massN "caution" ;
lin cautious_A = longA "cautious" ;
lin cave_N = regN "cave" ;
lin caviar_N = regN "caviar" ;
lin cease_V = (regV "cease") ;
lin ceiling_N = regN "ceiling" ;
lin cell_N = regN "cell" ;
lin cellar_N = regN "cellar" ;
lin cement_N = regN "cement" ;
--lin cement_N = massN "cement" ;
lin census_N = regN "census" ;
lin cent_N = regN "cent" ;
lin centaur_N = regN "centaur" ;
lin center_N = regN "center" ;
lin centre_N = regN "centre" ;
lin centre_V2 = prpV2 (regV "centre") "" ;
lin century_N = regN "century" ;
lin ceremonial_A = longA "ceremonial" ;
lin ceremony_N = regN "ceremony" ;
lin certain_A = longA "certain" ;
lin certain_A2of = longA2 "certain" "of" ;
lin certain_A2 = longA2 "certain" "" ;
lin certainty_N = regN "certainty" ;
lin certainty_N2 = prepN2 "certainty" "" ;
lin certify_V2 = prpV2 (regV "certify") "" ;
lin certitude_N = regN "certitude" ;
lin chain_N = regN "chain" ;
lin chain_V3to =dirprepV3 (regV "chain") "to" ;
lin chair_N = regN "chair" ;
lin chairman_N = irregN "chairman" "chairmen" ;
lin chairwoman_N = irregN "chairwoman" "chairwomen" ;
lin chalk_N = massN "chalk" ;
lin challenge_N = regN "challenge" ;
lin challenge_N2to = prepN2 "challenge" "to" ;
lin chance_N = regN "chance" ;
lin chancellor_N = regN "chancellor" ;
lin change_V = (regV "change") ;
lin change_N = regN "change" ;
lin change_V2 = prpV2 (regV "change") "" ;
lin channel_N = regN "channel" ;
lin chap_N = regN "chap" ;
lin chapter_N = regN "chapter" ;
lin char_V = (regV "char") ;
lin character_N = regN "character" ;
lin characteristic_N = regN "characteristic" ;
lin characteristic_A = longA "characteristic" ;
lin characteristic_A2of = longA2 "characteristic" "of" ;
lin characteristically_A = longA "characteristically" ;
lin characterize_V3_pred =dirprepV3 (regV "characterize") "_pred" ;
lin charge_N = regN "charge" ;
lin charge_V3with =dirprepV3 (regV "charge") "with" ;
lin charitable_A = longA "charitable" ;
lin charity_N = regN "charity" ;
lin charm_N = regN "charm" ;
lin charm_V2 = prpV2 (regV "charm") "" ;
lin charming_A = longA "charming" ;
lin chart_N = regN "chart" ;
lin chase_V2 = prpV2 (regV "chase") "" ;
lin chaste_A = regA "chaste" ;
lin cheap_A = regA "cheap" ;
lin cheat_N = regN "cheat" ;
lin cheat_V2 = prpV2 (regV "cheat") "" ;
lin check_N = regN "check" ;
lin check_V2 = prpV2 (regV "check") "" ;
lin checkmate_N = regN "checkmate" ;
lin cheek_N = regN "cheek" ;
lin cheer_V = (regV "cheer") ;
lin cheer_N = regN "cheer" ;
lin cheerful_A = longA "cheerful" ;
lin cheese_N = massN "cheese" ;
lin chemical_A = regA "chemical" ;
lin chemist_N = regN "chemist" ;
lin chemistry_N = irregN "chemistry" "chemistry" ;
lin cheque_N = regN "cheque" ;
lin chequered_A = longA "chequered" ;
lin chess_N = massN "chess" ;
lin chest_N = regN "chest" ;
lin chicken_N = regN "chicken" ;
lin chief_N = regN "chief" ;
lin child_N = irregN "child" "child" ;
lin chimney_N = regN "chimney" ;
lin chin_N = regN "chin" ;
lin china_PN = regPN "china" ;
lin chinaman_N = regN "chinaman" ;
lin chinese_A = longA "chinese" ;
lin chocolate_N = massN "chocolate" ;
lin choice_N = regN "choice" ;
lin choose_V2 = prpV2 choose_V "" ;
lin christian_N = regN "christian" ;
lin christmas_N = regN "christmas" ;
lin chronic_A = longA "chronic" ;
lin chronology_N = regN "chronology" ;
lin chunk_N = regN "chunk" ;
lin church_N = regN "church" ;
lin churn_N = regN "churn" ;
lin churn_V2 = prpV2 (regV "churn") "" ;
lin churn_V = (regV "churn") ;
lin cigar_N = regN "cigar" ;
lin cigarette_N = regN "cigarette" ;
lin cinema_N = regN "cinema" ;
lin circle_N = regN "circle" ;
lin circuit_N = regN "circuit" ;
lin circular_A = longA "circular" ;
lin circulate_V = (regV "circulate") ;
lin circumscribe_V2 = prpV2 (regV "circumscribe") "" ;
lin circumstance_N = regN "circumstance" ;
lin circumvent_V = (regV "circumvent") ;
lin cite_V2 = prpV2 (regV "cite") "" ;
lin citizen_N = regN "citizen" ;
lin city_N = regN "city" ;
lin civilize_V2 = prpV2 (regV "civilize") "" ;
lin clad_A = longA "clad" ;
lin clad_A2in = longA2 "clad" "in" ;
lin claim_VS = mkVS (regV "claim") ;
lin claim_N2 = prepN2 "claim" "" ;
lin clan_N = regN "clan" ;
lin clap_V = (regV "clap") ;
lin clap_N = regN "clap" ;
lin clarify_V2 = prpV2 (regV "clarify") "" ;
lin clarity_N = regN "clarity" ;
lin clash_V2with = prpV2 (regV "clash") "with" ;
lin class_N = regN "class" ;
lin class_V3_pred =dirprepV3 (regV "class") "_pred" ;
lin classic_A = longA "classic" ;
lin classify_V2 = prpV2 (regV "classify") "" ;
lin clause_N = regN "clause" ;
lin clay_N = massN "clay" ;
lin clean_A = regA "clean" ;
lin clean_V2 = prpV2 (regV "clean") "" ;
lin clear_V2 = prpV2 (regV "clear") "" ;
lin clear_A = regA "clear" ;
lin clear_A2 = regA2 "clear" "" ;
--lin cleave_V2 = prpV2 cleave_V "" ;
lin cleaver_N = regN "cleaver" ;
lin cleft_N = regN "cleft" ;
lin clerk_N = regN "clerk" ;
lin clever_A = regA "clever" ;
lin client_N = regN "client" ;
lin cliff_N = regN "cliff" ;
lin climate_N = regN "climate" ;
lin climax_N = regN "climax" ;
lin climb_V2 = prpV2 (regV "climb") "" ;
lin clinic_N = regN "clinic" ;
lin clip_N = regN "clip" ;
lin clitic_N = regN "clitic" ;
lin clock_N = regN "clock" ;
lin clog_N = regN "clog" ;
lin close_V2 = prpV2 (regV "close") "" ;
lin close_A = regA "close" ;
lin close_A2to = regA2 "close" "to" ;
lin closet_N = regN "closet" ;
lin closure_N = regN "closure" ;
lin cloth_N = regN "cloth" ;
lin clothe_V2 = prpV2 (regV "clothe") "" ;
lin clothing_N = regN "clothing" ;
lin cloud_N = regN "cloud" ;
lin clove_V2 = prpV2 (regV "clove") "" ;
lin club_N = regN "club" ;
lin clue_N = regN "clue" ;
lin clumsy_A = regA "clumsy" ;
lin clutter_N = regN "clutter" ;
lin coach_N = regN "coach" ;
lin coach_V2 = prpV2 (regV "coach") "" ;
lin coal_N = massN "coal" ;
lin coalesce_V = (regV "coalesce") ;
lin coarse_A = regA "coarse" ;
lin coast_N = regN "coast" ;
lin coast_V2 = prpV2 (regV "coast") "" ;
lin coaster_N = regN "coaster" ;
lin coat_N = regN "coat" ;
lin cocktail_N = regN "cocktail" ;
lin cocoa_N = massN "cocoa" ;
lin coconut_N = regN "coconut" ;
lin code_N = regN "code" ;
lin code_V2 = prpV2 (regV "code") "" ;
lin coefficient_N = regN "coefficient" ;
lin coerce_V2 = prpV2 (regV "coerce") "" ;
lin coffee_N = massN "coffee" ;
lin cog_N = regN "cog" ;
lin cognition_N = regN "cognition" ;
lin cognitive_A = longA "cognitive" ;
lin coherence_N = massN "coherence" ;
lin coherent_A = longA "coherent" ;
lin coin_N = regN "coin" ;
lin coincide_V2with = prpV2 (regV "coincide") "with" ;
lin coincidence_N = regN "coincidence" ;
lin coincidental_A = longA "coincidental" ;
lin cold_A = regA "cold" ;
lin cold_N = regN "cold" ;
lin collaborate_V = (regV "collaborate") ;
lin collapse_N = regN "collapse" ;
lin collapse_V = (regV "collapse") ;
lin collar_N = regN "collar" ;
lin colleague_N = regN "colleague" ;
lin collect_V3from =dirprepV3 (regV "collect") "from" ;
lin college_N = regN "college" ;
lin collide_V = (regV "collide") ;
lin collinear_A = longA "collinear" ;
lin collision_N = regN "collision" ;
lin colon_N = regN "colon" ;
lin colony_N = regN "colony" ;
lin colour_N = regN "colour" ;
lin colour_V2 = prpV2 (regV "colour") "" ;
lin column_N = regN "column" ;
lin comb_N = regN "comb" ;
lin combat_N = regN "combat" ;
lin combinator_N = regN "combinator" ;
lin combine_V3with =dirprepV3 (regV "combine") "with" ;
lin come_V2 = prpV2 come_V "" ;
lin comedy_N = regN "comedy" ;
lin comfort_N = regN "comfort" ;
lin comfort_V2 = prpV2 (regV "comfort") "" ;
lin comfortable_A = longA "comfortable" ;
lin comma_N = regN "comma" ;
lin command_N = regN "command" ;
lin command_V2 = prpV2 (regV "command") "" ;
lin commence_V = (regV "commence") ;
lin comment_N = regN "comment" ;
lin comment_V2on = prpV2 (regV "comment") "on" ;
lin commerce_N = regN "commerce" ;
lin commercial_N = regN "commercial" ;
lin commission_V2 = prpV2 (regV "commission") "" ;
lin commission_N = regN "commission" ;
lin commit_V = (regV "commit") ;
lin committee_N = regN "committee" ;
lin commodity_N = regN "commodity" ;
lin common_A = regA "common" ;
lin commonsense_A = longA "commonsense" ;
lin commonwealth_N = regN "commonwealth" ;
lin commune_N = regN "commune" ;
lin communicate_V2with = prpV2 (regV "communicate") "with" ;
lin community_N = regN "community" ;
lin commutative_A = longA "commutative" ;
lin commutator_N = regN "commutator" ;
lin compact_A = longA "compact" ;
lin companion_N = regN "companion" ;
lin company_N = regN "company" ;
lin comparative_A = longA "comparative" ;
lin comparative_N = regN "comparative" ;
lin compare_V3with =dirprepV3 (regV "compare") "with" ;
lin comparison_N2of_ppwith = prepN2 "comparison" "of_ppwith" ;
lin compass_V = (regV "compass") ;
lin compatible_A = longA "compatible" ;
lin compatible_A2with = longA2 "compatible" "with" ;
lin compel_V2 = prpV2 (regV "compel") "" ;
lin compensate_V2for = prpV2 (regV "compensate") "for" ;
lin compete_V2with = prpV2 (regV "compete") "with" ;
lin competence_N = regN "competence" ;
lin competent_A = longA "competent" ;
lin competition_N = regN "competition" ;
lin competitor_N = regN "competitor" ;
lin compile_V2 = prpV2 (regV "compile") "" ;
lin complain_V2about = prpV2 (regV "complain") "about" ;
lin complaint_N2about = prepN2 "complaint" "about" ;
lin complement_N = regN "complement" ;
lin complement_V2 = prpV2 (regV "complement") "" ;
lin complementary_A = longA "complementary" ;
lin complementary_A2to = longA2 "complementary" "to" ;
lin complete_A = longA "complete" ;
lin complete_V2 = prpV2 (regV "complete") "" ;
lin complex_A = longA "complex" ;
lin complex_N = regN "complex" ;
lin complicate_V2 = prpV2 (regV "complicate") "" ;
lin compliment_N = regN "compliment" ;
lin compliment_V2 = prpV2 (regV "compliment") "" ;
lin comply_V2with = prpV2 (regV "comply") "with" ;
lin component_N = regN "component" ;
lin compose_V2 = prpV2 (regV "compose") "" ;
lin composite_A = longA "composite" ;
lin composition_N = regN "composition" ;
lin compound_A = longA "compound" ;
lin compound_N = regN "compound" ;
lin compound_V2 = prpV2 (regV "compound") "" ;
lin comprehend_V2 = prpV2 (regV "comprehend") "" ;
lin comprehensible_A = longA "comprehensible" ;
lin comprehensible_A2to = longA2 "comprehensible" "to" ;
lin comprehension_N = regN "comprehension" ;
lin comprehensive_A = longA "comprehensive" ;
lin compress_V2 = prpV2 (regV "compress") "" ;
lin comprise_V2 = prpV2 (regV "comprise") "" ;
lin compromise_V = (regV "compromise") ;
lin compute_V2 = prpV2 (regV "compute") "" ;
lin computer_N = regN "computer" ;
lin concatenate_V2 = prpV2 (regV "concatenate") "" ;
lin concave_A = regA "concave" ;
lin conceal_V2 = prpV2 (regV "conceal") "" ;
lin concede_VS = mkVS (regV "concede") ;
lin conceive_V2of = prpV2 (regV "conceive") "of" ;
lin concentrate_V2 = prpV2 (regV "concentrate") "" ;
lin concept_N = regN "concept" ;
lin conception_N = regN "conception" ;
lin conceptual_A = longA "conceptual" ;
lin concern_N = regN "concern" ;
lin concern_V2 = prpV2 (regV "concern") "" ;
lin concerning_Prep = mkPrep "concerning" ;
lin concert_N = regN "concert" ;
lin concerted_A = longA "concerted" ;
lin concession_N = regN "concession" ;
lin concise_A = longA "concise" ;
lin conclude_VS = mkVS (regV "conclude") ;
lin conclusion_N2 = prepN2 "conclusion" "" ;
lin conclusive_A = longA "conclusive" ;
lin concomitant_A = longA "concomitant" ;
lin concrete_A = longA "concrete" ;
lin concrete_N = massN "concrete" ;
lin concur_V = (regV "concur") ;
lin concurrent_A = longA "concurrent" ;
lin condemn_V2 = prpV2 (regV "condemn") "" ;
lin condition_N = regN "condition" ;
lin condition_V2 = prpV2 (regV "condition") "" ;
lin conditional_N = regN "conditional" ;
lin conducive_A2to = regA2 "conducive" "to" ;
lin conduct_N = regN "conduct" ;
lin conduct_V2 = prpV2 (regV "conduct") "" ;
lin confer_V2with = prpV2 (regV "confer") "with" ;
lin conference_N = regN "conference" ;
lin confess_VS = mkVS (regV "confess") ;
lin confidence_N = regN "confidence" ;
lin confident_A = longA "confident" ;
lin configure_V2 = prpV2 (regV "configure") "" ;
lin confine_V3to =dirprepV3 (regV "confine") "to" ;
lin confirm_V2 = prpV2 (regV "confirm") "" ;
lin conflate_V2 = prpV2 (regV "conflate") "" ;
lin conflict_V2with = prpV2 (regV "conflict") "with" ;
lin confluence_N = regN "confluence" ;
lin confluent_A = longA "confluent" ;
lin conform_V2to = prpV2 (regV "conform") "to" ;
lin confound_V2 = prpV2 (regV "confound") "" ;
lin confounded_A = longA "confounded" ;
lin confront_V3with =dirprepV3 (regV "confront") "with" ;
lin confuse_V2 = prpV2 (regV "confuse") "" ;
lin congruence_N = regN "congruence" ;
lin congruent_A = longA "congruent" ;
lin conjecture_VS = mkVS (regV "conjecture") ;
lin conjoin_V2 = prpV2 (regV "conjoin") "" ;
lin conjunct_N = regN "conjunct" ;
lin conjunction_N = regN "conjunction" ;
lin conjunctive_A = longA "conjunctive" ;
lin connect_V2 = prpV2 (regV "connect") "" ;
lin connective_N = regN "connective" ;
lin conquer_V2 = prpV2 (regV "conquer") "" ;
lin conqueror_N = regN "conqueror" ;
lin conquest_N = regN "conquest" ;
lin conscience_N = irregN "conscience" "conscience" ;
lin conscious_A = longA "conscious" ;
lin conscious_A2of = longA2 "conscious" "of" ;
lin consecutive_A = longA "consecutive" ;
lin consensus_N = regN "consensus" ;
lin consequence_N = regN "consequence" ;
lin consequent_A = longA "consequent" ;
lin conservative_A = longA "conservative" ;
lin conserve_V2 = prpV2 (regV "conserve") "" ;
lin consider_V2 = prpV2 (regV "consider") "" ;
lin consider_V3 =dirprepV3 (regV "consider") "" ;
lin consider_V2 = prpV2 (regV "consider") "" ;
lin consider_V2 = prpV2 (regV "consider") "" ;
lin considerate_A = longA "considerate" ;
lin consist_V2of = prpV2 (regV "consist") "of" ;
lin consistency_N = regN "consistency" ;
lin consistent_A = longA "consistent" ;
lin consistent_A2with = longA2 "consistent" "with" ;
lin consonant_A = longA "consonant" ;
lin consonant_A2with = longA2 "consonant" "with" ;
lin consonant_N = regN "consonant" ;
lin constant_A = longA "constant" ;
lin constant_N = regN "constant" ;
lin constellation_N = regN "constellation" ;
lin constituency_N = regN "constituency" ;
lin constituent_N = regN "constituent" ;
lin constitute_V2 = prpV2 (regV "constitute") "" ;
lin constrain_V2 = prpV2 (regV "constrain") "" ;
lin constraint_N = regN "constraint" ;
lin constrict_V2 = prpV2 (regV "constrict") "" ;
lin construct_V2 = prpV2 (regV "construct") "" ;
lin constructor_N = regN "constructor" ;
lin construe_V3_pred =dirprepV3 (regV "construe") "_pred" ;
lin consult_V2 = prpV2 (regV "consult") "" ;
lin consume_V2 = prpV2 (regV "consume") "" ;
lin consumption_N = irregN "consumption" "consumption" ;
lin contact_N = regN "contact" ;
lin contact_V2 = prpV2 (regV "contact") "" ;
lin contagion_N = regN "contagion" ;
lin contagious_A = longA "contagious" ;
lin contain_V2 = prpV2 (regV "contain") "" ;
lin contaminate_V2 = prpV2 (regV "contaminate") "" ;
lin contemplate_V2 = prpV2 (regV "contemplate") "" ;
lin contemporary_A = longA "contemporary" ;
lin contemporary_N = regN "contemporary" ;
lin contend_VS = mkVS (regV "contend") ;
lin content_A = longA "content" ;
lin content_A2with = longA2 "content" "with" ;
lin contented_A = longA "contented" ;
lin contented_A2with = longA2 "contented" "with" ;
lin contention_N2 = prepN2 "contention" "" ;
lin context_N = regN "context" ;
lin contextual_A = longA "contextual" ;
lin contiguous_A = longA "contiguous" ;
lin contiguous_A2to = longA2 "contiguous" "to" ;
lin contingency_N = regN "contingency" ;
lin contingent_A = longA "contingent" ;
lin contingent_A2on = longA2 "contingent" "on" ;
lin continual_A = longA "continual" ;
lin continue_V2 = prpV2 (regV "continue") "" ;
lin continue_V2 = prpV2 (regV "continue") "" ;
lin continuity_N = regN "continuity" ;
lin continuous_A = longA "continuous" ;
lin continuum_N = regN "continuum" ;
lin contour_N = regN "contour" ;
lin contract_V = (regV "contract") ;
lin contract_N = regN "contract" ;
lin contradict_V2 = prpV2 (regV "contradict") "" ;
lin contrary_A = longA "contrary" ;
lin contrary_A2to = longA2 "contrary" "to" ;
lin contrast_N = regN "contrast" ;
lin contrast_V3with =dirprepV3 (regV "contrast") "with" ;
lin contrastive_A = longA "contrastive" ;
lin contravene_V2 = prpV2 (regV "contravene") "" ;
lin contribute_V2to = prpV2 (regV "contribute") "to" ;
lin control_N = regN "control" ;
lin control_V2 = prpV2 (regV "control") "" ;
lin controversial_A = longA "controversial" ;
lin controversy_N = regN "controversy" ;
lin convenience_N = regN "convenience" ;
lin convenient_A = longA "convenient" ;
lin convention_N = regN "convention" ;
lin converge_V = (regV "converge") ;
lin convergence_N = regN "convergence" ;
lin conversation_N = regN "conversation" ;
lin converse_A = longA "converse" ;
lin converse_V2with = prpV2 (regV "converse") "with" ;
lin conversion_N = regN "conversion" ;
lin convert_V3to =dirprepV3 (regV "convert") "to" ;
lin convey_V2 = prpV2 (regV "convey") "" ;
lin convict_N = regN "convict" ;
lin convict_V2 = prpV2 (regV "convict") "" ;
lin conviction_N = regN "conviction" ;
lin convince_V3 =dirprepV3 (regV "convince") "" ;
lin convincing_A = longA "convincing" ;
lin convoluted_A = longA "convoluted" ;
lin cook_N = regN "cook" ;
lin cook_V2 = prpV2 (regV "cook") "" ;
lin cool_A = regA "cool" ;
lin cool_V = (regV "cool") ;
lin coordinate_V2 = prpV2 (regV "coordinate") "" ;
lin cope_V2with = prpV2 (regV "cope") "with" ;
lin copper_N = massN "copper" ;
lin copula_N = regN "copula" ;
lin copy_N = regN "copy" ;
lin copy_V2 = prpV2 (regV "copy") "" ;
lin copyright_N = regN "copyright" ;
lin cord_N = regN "cord" ;
lin corn_N = massN "corn" ;
lin corner_N = regN "corner" ;
lin corporation_N = regN "corporation" ;
lin corpus_N = irregN "corpus" "corpus" ;
lin correct_A = longA "correct" ;
lin correct_V2 = prpV2 (regV "correct") "" ;
lin correlate_V2 = prpV2 (regV "correlate") "" ;
lin correspond_V2to = prpV2 (regV "correspond") "to" ;
lin correspondence_N2to = prepN2 "correspondence" "to" ;
lin corresponding_A = longA "corresponding" ;
lin cosmetic_A = longA "cosmetic" ;
lin cost_N = regN "cost" ;
lin cost_V2 = prpV2 (regV "cost") "" ;
lin costly_A = regA "costly" ;
lin costume_N = regN "costume" ;
lin cotton_N = massN "cotton" ;
lin cough_V = (regV "cough") ;
lin cough_N = regN "cough" ;
lin council_N = regN "council" ;
lin councillor_N = regN "councillor" ;
lin count_V2 = prpV2 (regV "count") "" ;
lin counterfactual_A = longA "counterfactual" ;
lin counterintuitive_A = longA "counterintuitive" ;
lin country_N = regN "country" ;
lin county_N = regN "county" ;
lin couple_N = regN "couple" ;
lin couple_V2 = prpV2 (regV "couple") "" ;
lin courage_N = regN "courage" ;
lin course_N = regN "course" ;
lin court_N = regN "court" ;
lin court_V2 = prpV2 (regV "court") "" ;
lin court_V = (regV "court") ;
lin courteous_A = longA "courteous" ;
lin courtesy_N = regN "courtesy" ;
lin cover_N = regN "cover" ;
lin cover_V2 = prpV2 (regV "cover") "" ;
lin covert_A = longA "covert" ;
lin cow_N = regN "cow" ;
lin coward_N = regN "coward" ;
lin crab_N = regN "crab" ;
lin crack_N = regN "crack" ;
lin crack_V2 = prpV2 (regV "crack") "" ;
lin craft_N = regN "craft" ;
lin crafty_A = regA "crafty" ;
lin crag_N = regN "crag" ;
lin crash_V = (regV "crash") ;
lin crate_N = regN "crate" ;
lin crater_N = regN "crater" ;
lin crave_V2 = prpV2 (regV "crave") "" ;
lin crawl_V = (regV "crawl") ;
lin crayfish_N = regN "crayfish" ;
lin crayon_N = regN "crayon" ;
lin craze_N = regN "craze" ;
lin crazy_A = regA "crazy" ;
lin cream_N = regN "cream" ;
lin create_V2 = prpV2 (regV "create") "" ;
lin creator_N = regN "creator" ;
lin creature_N = regN "creature" ;
lin credit_N = regN "credit" ;
lin creep_V2 = prpV2 creep_V "" ;
lin cricket_N = regN "cricket" ;
lin crime_N = regN "crime" ;
lin criminal_A = longA "criminal" ;
lin criminal_N = regN "criminal" ;
lin crisis_N = irregN "crisis" "crisis" ;
lin criterion_N2for = irregN2 "criterion" "criterion" "for" ;
lin critic_N2of = prepN2 "critic" "of" ;
lin criticise_V2 = prpV2 (regV "criticise") "" ;
lin criticism_N = regN "criticism" ;
lin criticize_V2 = prpV2 (regV "criticize") "" ;
lin critique_N = regN "critique" ;
lin crochet_N = regN "crochet" ;
lin crochet_V2 = prpV2 (regV "crochet") "" ;
lin crochet_V = (regV "crochet") ;
lin crop_N = regN "crop" ;
lin crop_V2 = prpV2 (regV "crop") "" ;
lin cross_A = regA "cross" ;
lin cross_N = regN "cross" ;
lin cross_V2 = prpV2 (regV "cross") "" ;
lin crow_V = (regV "crow") ;
lin crow_N = regN "crow" ;
lin crowd_N = regN "crowd" ;
lin crown_N = regN "crown" ;
lin crown_V2 = prpV2 (regV "crown") "" ;
lin crucial_A = longA "crucial" ;
lin crude_A = regA "crude" ;
lin cruel_A = regA "cruel" ;
lin cruel_A2to = regA2 "cruel" "to" ;
lin cruelty_N2to = prepN2 "cruelty" "to" ;
lin crush_V2 = prpV2 (regV "crush") "" ;
lin cry_V = (regV "cry") ;
lin cry_N = regN "cry" ;
lin cub_N = regN "cub" ;
lin cube_N = regN "cube" ;
lin cubic_A = longA "cubic" ;
lin cue_N = regN "cue" ;
lin cue_V2 = prpV2 (regV "cue") "" ;
lin culprit_N = regN "culprit" ;
lin cultivate_V2 = prpV2 (regV "cultivate") "" ;
lin culture_N = regN "culture" ;
lin cumbersome_A = longA "cumbersome" ;
lin cumulative_A = longA "cumulative" ;
lin cunning_A = longA "cunning" ;
lin cup_N = regN "cup" ;
lin cupboard_N = regN "cupboard" ;
lin curb_V2 = prpV2 (regV "curb") "" ;
lin cure_N = regN "cure" ;
lin cure_V3of =dirprepV3 (regV "cure") "of" ;
lin curiosity_N = regN "curiosity" ;
lin curious_A = longA "curious" ;
lin curl_V = (regV "curl") ;
lin curl_N = regN "curl" ;
lin current_A = longA "current" ;
lin current_N = regN "current" ;
lin curriculum_N = regN "curriculum" ;
lin curse_N = regN "curse" ;
lin curse_V2 = prpV2 (regV "curse") "" ;
lin curtain_N = regN "curtain" ;
lin curvature_N = regN "curvature" ;
lin curve_V = (regV "curve") ;
lin curve_N = regN "curve" ;
lin custard_N = massN "custard" ;
lin custom_N = regN "custom" ;
lin cut_N = regN "cut" ;
lin cut_V2 = prpV2 cut_V "" ;
lin cycle_V = (regV "cycle") ;
lin cyclic_A = longA "cyclic" ;
lin cynic_N = regN "cynic" ;
lin dagger_N = regN "dagger" ;
lin daily_A = longA "daily" ;
lin damage_N = regN "damage" ;
lin damage_V2 = prpV2 (regV "damage") "" ;
lin dance_N = regN "dance" ;
lin dance_V = (regV "dance") ;
lin danger_N = regN "danger" ;
lin dangle_V = (regV "dangle") ;
lin dare_V2 = prpV2 (regV "dare") "" ;
lin dare_VV = mkVV (regV "dare") ;
lin dark_N = regN "dark" ;
lin dark_A = regA "dark" ;
lin darken_V2 = prpV2 (regV "darken") "" ;
lin darken_V = (regV "darken") ;
lin database_N = regN "database" ;
lin date_N = regN "date" ;
lin dative_A = longA "dative" ;
lin datum_N = irregN "datum" "datum" ;
lin daughter_N2of = prepN2 "daughter" "of" ;
lin day_N = regN "day" ;
lin dead_A = regA "dead" ;
lin deaf_A = regA "deaf" ;
lin deal_N = regN "deal" ;
lin deal_V2with = prpV2 deal_V "with" ;
lin dear_A = regA "dear" ;
lin dear_A2to = regA2 "dear" "to" ;
lin death_N = regN "death" ;
lin debate_N = regN "debate" ;
lin debate_V2 = prpV2 (regV "debate") "" ;
lin debt_N = regN "debt" ;
lin debtor_N = regN "debtor" ;
lin debug_V2 = prpV2 (regV "debug") "" ;
lin decade_N = regN "decade" ;
lin decay_V = (regV "decay") ;
lin deceive_V2 = prpV2 (regV "deceive") "" ;
lin december_PN = regPN "december" ;
lin deception_N = regN "deception" ;
lin deceptive_A = longA "deceptive" ;
lin decide_VV = mkVV (regV "decide") ;
lin decimal_A = longA "decimal" ;
lin decimal_N = regN "decimal" ;
lin decision_N2 = prepN2 "decision" "" ;
lin decisive_A = longA "decisive" ;
lin declare_V2 = prpV2 (regV "declare") "" ;
lin declare_VS = mkVS (regV "declare") ;
lin decompose_V = (regV "decompose") ;
lin decomposition_N = regN "decomposition" ;
lin decrease_V = (regV "decrease") ;
lin decrease_N2in = prepN2 "decrease" "in" ;
lin decrement_V2 = prpV2 (regV "decrement") "" ;
lin dedicate_V3to =dirprepV3 (regV "dedicate") "to" ;
lin deduce_VS = mkVS (regV "deduce") ;
lin deducible_A = longA "deducible" ;
lin deed_N = regN "deed" ;
lin deep_A = regA "deep" ;
lin deer_N = regN "deer" ;
lin defeat_N = regN "defeat" ;
lin defeat_V2 = prpV2 (regV "defeat") "" ;
lin defect_N = regN "defect" ;
lin defect_V = (regV "defect") ;
lin defence_N = regN "defence" ;
lin defend_V2 = prpV2 (regV "defend") "" ;
lin defense_N = regN "defense" ;
lin defensible_A = longA "defensible" ;
lin defer_V2 = prpV2 (regV "defer") "" ;
lin deficiency_N = regN "deficiency" ;
lin deficient_A = longA "deficient" ;
lin define_V2 = prpV2 (regV "define") "" ;
lin definite_A = regA "definite" ;
lin definition_N = regN "definition" ;
lin definitive_A = longA "definitive" ;
lin deform_V2 = prpV2 (regV "deform") "" ;
lin defy_V2 = prpV2 (regV "defy") "" ;
lin degrade_V2 = prpV2 (regV "degrade") "" ;
lin degree_N = regN "degree" ;
lin delay_N = regN "delay" ;
lin delay_V2 = prpV2 (regV "delay") "" ;
lin delete_V2 = prpV2 (regV "delete") "" ;
lin deliberate_A = longA "deliberate" ;
lin delicacy_N = regN "delicacy" ;
lin delicate_A = longA "delicate" ;
lin delight_N = regN "delight" ;
lin delight_V2 = prpV2 (regV "delight") "" ;
lin delimit_V2 = prpV2 (regV "delimit") "" ;
lin delineate_V2 = prpV2 (regV "delineate") "" ;
lin deliver_V2 = prpV2 (regV "deliver") "" ;
lin delve_V = (regV "delve") ;
lin demand_N = regN "demand" ;
lin demand_V2 = prpV2 (regV "demand") "" ;
lin demonstrate_VS = mkVS (regV "demonstrate") ;
lin denial_N = regN "denial" ;
lin denote_V2 = prpV2 (regV "denote") "" ;
lin dense_A = regA "dense" ;
lin deny_V2 = prpV2 (regV "deny") "" ;
lin depart_V2from = prpV2 (regV "depart") "from" ;
lin department_N = regN "department" ;
lin departure_N = regN "departure" ;
lin depend_V2on = prpV2 (regV "depend") "on" ;
lin dependence_N2on = prepN2 "dependence" "on" ;
lin dependency_N = regN "dependency" ;
lin dependent_N = regN "dependent" ;
lin dependent_A = longA "dependent" ;
lin dependent_A2on = longA2 "dependent" "on" ;
lin depict_V2 = prpV2 (regV "depict") "" ;
lin deploy_V2 = prpV2 (regV "deploy") "" ;
lin deposit_N = regN "deposit" ;
lin deposit_V2 = prpV2 (regV "deposit") "" ;
lin depress_V2 = prpV2 (regV "depress") "" ;
lin depressing_A = longA "depressing" ;
lin depth_N = regN "depth" ;
lin derivative_N = regN "derivative" ;
lin derive_V2from = prpV2 (regV "derive") "from" ;
lin descend_V2 = prpV2 (regV "descend") "" ;
lin descendant_N = regN "descendant" ;
lin descent_N = regN "descent" ;
lin describe_V2 = prpV2 (regV "describe") "" ;
lin description_N = regN "description" ;
lin descriptive_A = longA "descriptive" ;
lin desert_N = regN "desert" ;
lin deserve_V2 = prpV2 (regV "deserve") "" ;
lin design_N = regN "design" ;
lin design_V2 = prpV2 (regV "design") "" ;
lin designate_V3_pred =dirprepV3 (regV "designate") "_pred" ;
lin desire_N2 = prepN2 "desire" "" ;
lin desire_V2 = prpV2 (regV "desire") "" ;
lin desire_V2 = prpV2 (regV "desire") "" ;
lin desire_VV = mkVV (regV "desire") ;
lin desk_N = regN "desk" ;
lin despair_N = regN "despair" ;
lin despair_V = (regV "despair") ;
lin despair_V2of = prpV2 (regV "despair") "of" ;
lin desperate_A = longA "desperate" ;
lin desperate_A2for = longA2 "desperate" "for" ;
lin desperation_N = regN "desperation" ;
lin destination_N = regN "destination" ;
lin destiny_N = regN "destiny" ;
lin destroy_V2 = prpV2 (regV "destroy") "" ;
lin destruction_N2of = prepN2 "destruction" "of" ;
lin destructive_A = longA "destructive" ;
lin detach_V2 = prpV2 (regV "detach") "" ;
lin detail_N = regN "detail" ;
lin detailed_A = longA "detailed" ;
lin detect_V2 = prpV2 (regV "detect") "" ;
lin deteriorate_V = (regV "deteriorate") ;
lin determinate_A = longA "determinate" ;
lin determine_V2 = prpV2 (regV "determine") "" ;
lin determinism_N = regN "determinism" ;
lin deterministic_A = longA "deterministic" ;
lin determinize_V2 = prpV2 (regV "determinize") "" ;
lin detract_V2from = prpV2 (regV "detract") "from" ;
lin develop_V2 = prpV2 (regV "develop") "" ;
lin deviance_N = regN "deviance" ;
lin deviant_A = longA "deviant" ;
lin deviate_V2from = prpV2 (regV "deviate") "from" ;
lin devil_N = regN "devil" ;
lin devise_V2 = prpV2 (regV "devise") "" ;
lin devote_V3to =dirprepV3 (regV "devote") "to" ;
lin devour_V2 = prpV2 (regV "devour") "" ;
lin diagnose_V2 = prpV2 (regV "diagnose") "" ;
lin diagnosis_N = regN "diagnosis" ;
lin diagnostic_A = longA "diagnostic" ;
lin diagonal_A = longA "diagonal" ;
lin diagonal_N = regN "diagonal" ;
lin diagram_N = regN "diagram" ;
lin diagrammatic_A = longA "diagrammatic" ;
lin diagrammatically_Adv = mkAdv "diagrammatically" ;
lin dialect_N = regN "dialect" ;
lin dialogue_N = regN "dialogue" ;
lin diamond_N = regN "diamond" ;
lin dichotomy_N = regN "dichotomy" ;
lin dictionary_N = regN "dictionary" ;
lin die_V = (regV "die") ;
lin die_N = regN "die" ;
lin differ_V2from = prpV2 (regV "differ") "from" ;
lin difference_N = regN "difference" ;
lin different_A = longA "different" ;
lin different_A2from = longA2 "different" "from" ;
lin differentiate_V2 = prpV2 (regV "differentiate") "" ;
lin difficult_A = longA "difficult" ;
lin difficult_A2 = longA2 "difficult" "" ;
lin difficulty_N = regN "difficulty" ;
lin diffuse_A = longA "diffuse" ;
lin diffuse_V = (regV "diffuse") ;
lin dig_V2 = prpV2 dig_V "" ;
lin digest_N = regN "digest" ;
lin digest_V2 = prpV2 (regV "digest") "" ;
lin digit_N = regN "digit" ;
lin digital_A = longA "digital" ;
lin dilate_V = (regV "dilate") ;
lin dimension_N = regN "dimension" ;
lin diminish_V = (regV "diminish") ;
lin dine_V = (regV "dine") ;
lin dinner_N = regN "dinner" ;
lin dire_A = regA "dire" ;
lin direct_A = longA "direct" ;
lin direct_V3to =dirprepV3 (regV "direct") "to" ;
lin direction_N = regN "direction" ;
lin director_N = regN "director" ;
lin directory_N = regN "directory" ;
lin dirt_N = regN "dirt" ;
lin disable_V2 = prpV2 (regV "disable") "" ;
lin disadvantage_N = regN "disadvantage" ;
lin disambiguate_V2 = prpV2 (regV "disambiguate") "" ;
lin disarm_V2 = prpV2 (regV "disarm") "" ;
lin disarmament_N = regN "disarmament" ;
lin disappoint_V2 = prpV2 (regV "disappoint") "" ;
lin disaster_N = regN "disaster" ;
lin disastrous_A = longA "disastrous" ;
lin disbelief_N = regN "disbelief" ;
lin disc_N = regN "disc" ;
lin discard_V2 = prpV2 (regV "discard") "" ;
lin discern_V2 = prpV2 (regV "discern") "" ;
lin discipline_N = regN "discipline" ;
lin disciplined_A = longA "disciplined" ;
lin discontinuity_N = regN "discontinuity" ;
lin discontinuous_A = longA "discontinuous" ;
lin discourage_V2 = prpV2 (regV "discourage") "" ;
lin discourse_N = regN "discourse" ;
lin discover_V2 = prpV2 (regV "discover") "" ;
lin discover_VS = mkVS (regV "discover") ;
lin discovery_N2 = prepN2 "discovery" "" ;
lin discrepancy_N = regN "discrepancy" ;
lin discrete_A = regA "discrete" ;
lin discriminate_V2 = prpV2 (regV "discriminate") "" ;
lin discuss_V2 = prpV2 (regV "discuss") "" ;
lin discussion_N = regN "discussion" ;
lin discussion_N2about = prepN2 "discussion" "about" ;
lin discussion_N2s_withabout = prepN2 "discussion" "s_withabout" ;
lin discussion_N2with = prepN2 "discussion" "with" ;
lin disease_N = regN "disease" ;
lin diseased_A = longA "diseased" ;
lin disguise_V = (regV "disguise") ;
lin disguise_N = regN "disguise" ;
lin disguise_V2 = prpV2 (regV "disguise") "" ;
lin dish_N = regN "dish" ;
lin dishonest_A = longA "dishonest" ;
lin disillusion_V2 = prpV2 (regV "disillusion") "" ;
lin disjoint_A = longA "disjoint" ;
lin disjunct_N = regN "disjunct" ;
lin disjunction_N = regN "disjunction" ;
lin disjunctive_A = longA "disjunctive" ;
lin disk_N = regN "disk" ;
lin dislocate_V2 = prpV2 (regV "dislocate") "" ;
lin dismiss_V2 = prpV2 (regV "dismiss") "" ;
lin disparate_A = longA "disparate" ;
lin dispense_V2with = prpV2 (regV "dispense") "with" ;
lin dispensible_A = longA "dispensible" ;
lin display_N = regN "display" ;
lin display_V2 = prpV2 (regV "display") "" ;
lin dispose_V2of = prpV2 (regV "dispose") "of" ;
lin disproportionate_A = longA "disproportionate" ;
lin dispute_N = regN "dispute" ;
lin dispute_V2 = prpV2 (regV "dispute") "" ;
lin disquieting_A = longA "disquieting" ;
lin disrupt_V2 = prpV2 (regV "disrupt") "" ;
lin dissatisfaction_N = regN "dissatisfaction" ;
lin dissatisfied_A = longA "dissatisfied" ;
lin dissent_V = (regV "dissent") ;
lin dissertation_N = regN "dissertation" ;
lin dissimilar_A = longA "dissimilar" ;
lin dissimilar_A2to = longA2 "dissimilar" "to" ;
lin distance_N = regN "distance" ;
lin distant_A = longA "distant" ;
lin distant_A2from = longA2 "distant" "from" ;
lin distinct_A = longA "distinct" ;
lin distinct_A2from = longA2 "distinct" "from" ;
lin distinction_N = regN "distinction" ;
lin distinctive_A = longA "distinctive" ;
lin distinguish_V3from =dirprepV3 (regV "distinguish") "from" ;
lin distract_V3from =dirprepV3 (regV "distract") "from" ;
lin distribute_V2 = prpV2 (regV "distribute") "" ;
lin district_N = regN "district" ;
lin disturb_V2 = prpV2 (regV "disturb") "" ;
lin ditch_N = regN "ditch" ;
lin ditransitive_A = longA "ditransitive" ;
lin dive_N = regN "dive" ;
lin dive_V = (regV "dive") ;
lin diverse_A = longA "diverse" ;
lin divide_V2 = prpV2 (regV "divide") "" ;
lin dividend_N = regN "dividend" ;
lin divine_A = longA "divine" ;
lin divisible_A = longA "divisible" ;
lin division_N = regN "division" ;
lin divisor_N = regN "divisor" ;
lin divorce_V3from =dirprepV3 (regV "divorce") "from" ;
lin do_V2 = prpV2 (regV "do") "" ;
lin doctor_N = regN "doctor" ;
lin document_N = regN "document" ;
lin document_V2 = prpV2 (regV "document") "" ;
lin dog_N = regN "dog" ;
lin dollar_N = regN "dollar" ;
lin dolt_N = regN "dolt" ;
lin domain_N = regN "domain" ;
lin dome_N = regN "dome" ;
lin dominance_N = regN "dominance" ;
lin dominant_A = longA "dominant" ;
lin dominate_V2 = prpV2 (regV "dominate") "" ;
lin donate_V3to =dirprepV3 (regV "donate") "to" ;
lin donkey_N = regN "donkey" ;
lin doom_N = regN "doom" ;
lin doomed_A = longA "doomed" ;
lin doomsday_N = regN "doomsday" ;
lin door_N = regN "door" ;
lin dormancy_N = regN "dormancy" ;
lin dormant_A = regA "dormant" ;
lin dosage_N = regN "dosage" ;
lin dose_N = regN "dose" ;
lin dose_V3with =dirprepV3 (regV "dose") "with" ;
lin dot_N = regN "dot" ;
lin double_A = longA "double" ;
lin double_V2 = prpV2 (regV "double") "" ;
lin doubt_V2 = prpV2 (regV "doubt") "" ;
lin doubt_VS = mkVS (regV "doubt") ;
lin doubt_N2 = prepN2 "doubt" "" ;
lin dour_A = regA "dour" ;
lin dove_N = regN "dove" ;
lin down_N = regN "down" ;
lin down_Prep = mkPrep "down" ;
lin downward_Adv = mkAdv "downward" ;
lin doze_V = (regV "doze") ;
lin dozen_N2 = prepN2 "dozen" "" ;
lin draft_N = regN "draft" ;
lin drag_N = regN "drag" ;
lin drag_V2 = prpV2 (regV "drag") "" ;
lin drain_N = regN "drain" ;
lin drain_V2 = prpV2 (regV "drain") "" ;
lin dram_N = regN "dram" ;
lin drama_N = regN "drama" ;
lin dramatic_A = longA "dramatic" ;
lin dramatically_Adv = mkAdv "dramatically" ;
lin dramatist_N = regN "dramatist" ;
lin drastic_A = longA "drastic" ;
lin drastically_Adv = mkAdv "drastically" ;
lin draught_N = regN "draught" ;
lin draw_V2 = prpV2 draw_V "" ;
lin drawback_N = regN "drawback" ;
lin drawer_N = regN "drawer" ;
lin dread_N = regN "dread" ;
lin dread_V2 = prpV2 (regV "dread") "" ;
lin dreadful_A = longA "dreadful" ;
lin dream_N = regN "dream" ;
lin dream_VS = mkVS (regV "dream") ;
lin dress_V = (regV "dress") ;
lin dress_N = regN "dress" ;
lin drill_N = regN "drill" ;
lin drill_V2 = prpV2 (regV "drill") "" ;
lin drink_N = regN "drink" ;
lin drink_V2 = prpV2 drink_V "" ;
lin drive_V = useV IrregEng.drive_V ;
lin drop_N = regN "drop" ;
lin drop_V2 = prpV2 (regV "drop") "" ;
lin drought_N = regN "drought" ;
lin drown_V = (regV "drown") ;
lin drug_N = regN "drug" ;
lin drum_N = regN "drum" ;
lin drunk_A = regA "drunk" ;
lin dry_A = regA "dry" ;
lin dry_V2 = prpV2 (regV "dry") "" ;
lin dual_A = longA "dual" ;
lin dubious_A = longA "dubious" ;
lin duck_N = regN "duck" ;
lin duck_V = (regV "duck") ;
lin due_A = longA "due" ;
lin due_A2to = longA2 "due" "to" ;
lin duel_N = regN "duel" ;
lin dull_A = regA "dull" ;
lin dumb_A = regA "dumb" ;
lin dummy_N = regN "dummy" ;
lin dump_N = regN "dump" ;
lin dump_V2 = prpV2 (regV "dump") "" ;
lin dumpling_N = regN "dumpling" ;
lin duplicate_V2 = prpV2 (regV "duplicate") "" ;
--lin during_Prep = mkPrep "during" ;
lin dust_N = regN "dust" ;
lin dutch_A = longA "dutch" ;
lin duty_N = regN "duty" ;
lin dwarf_N = regN "dwarf" ;
lin dwarf_V2 = prpV2 (regV "dwarf") "" ;
--lin dwell_V2 = prpV2 dwell_V "" ;
lin dwelling_N = regN "dwelling" ;
lin dynamic_A = longA "dynamic" ;
lin dynamically_Adv = mkAdv "dynamically" ;
lin dynamism_N = regN "dynamism" ;
lin dynamo_N = regN "dynamo" ;
lin eager_A2 = longA2 "eager" "" ;
lin eager_A = longA "eager" ;
lin ear_N = regN "ear" ;
lin earl_N = regN "earl" ;
lin early_A = regA "early" ;
lin earn_V2 = prpV2 (regV "earn") "" ;
lin earth_N = massN "earth" ;
lin ease_N = regN "ease" ;
lin east_N = massN "east" ;
lin east_A = longA "east" ;
lin east_A2of = longA2 "east" "of" ;
lin eastern_A = regA "eastern" ;
lin easy_A = regA "easy" ;
lin easy_A2 = regA2 "easy" "" ;
lin eat_V2 = prpV2 eat_V "" ;
lin ebb_V = (regV "ebb") ;
lin echo_N = regN "echo" ;
lin echo_V2 = prpV2 (regV "echo") "" ;
lin economic_A = longA "economic" ;
lin economical_A = longA "economical" ;
lin economy_N = regN "economy" ;
lin edge_N = regN "edge" ;
lin edible_A = longA "edible" ;
lin edinburgh_PN = regPN "edinburgh" ;
lin edit_V2 = prpV2 (regV "edit") "" ;
lin edition_N = regN "edition" ;
lin editor_N = regN "editor" ;
lin educate_V2 = prpV2 (regV "educate") "" ;
lin effect_N = regN "effect" ;
lin effect_V2 = prpV2 (regV "effect") "" ;
lin effective_A = regA "effective" ;
lin efficacy_N = regN "efficacy" ;
lin efficiency_N = regN "efficiency" ;
lin efficient_A = longA "efficient" ;
lin effort_N = regN "effort" ;
lin egg_N = regN "egg" ;
lin elaborate_A = longA "elaborate" ;
lin elaborate_V2 = prpV2 (regV "elaborate") "" ;
lin elbow_N = regN "elbow" ;
lin elect_V2 = prpV2 (regV "elect") "" ;
lin electric_A = longA "electric" ;
lin electricity_N = massN "electricity" ;
lin electron_N = regN "electron" ;
lin electronic_A = longA "electronic" ;
lin elegance_N = regN "elegance" ;
lin elegant_A = longA "elegant" ;
lin element_N = regN "element" ;
lin elephant_N = regN "elephant" ;
lin elephantine_A = longA "elephantine" ;
lin elevate_V2 = prpV2 (regV "elevate") "" ;
lin elicit_V = (regV "elicit") ;
lin eligible_A = longA "eligible" ;
lin eligible_A2for = longA2 "eligible" "for" ;
lin eliminate_V2 = prpV2 (regV "eliminate") "" ;
lin ellipse_N = regN "ellipse" ;
lin ellipsis_N = regN "ellipsis" ;
lin elliptical_A = longA "elliptical" ;
lin elsewhere_Adv = mkAdv "elsewhere" ;
lin elucidate_V2 = prpV2 (regV "elucidate") "" ;
lin elude_V2 = prpV2 (regV "elude") "" ;
lin elusive_A = longA "elusive" ;
lin embarrass_V2 = prpV2 (regV "embarrass") "" ;
lin embassy_N = regN "embassy" ;
lin embed_V3in =dirprepV3 (regV "embed") "in" ;
lin embody_V2 = prpV2 (regV "embody") "" ;
lin embrace_N = regN "embrace" ;
lin embrace_V2 = prpV2 (regV "embrace") "" ;
lin embrace_V = (regV "embrace") ;
lin emerge_V = (regV "emerge") ;
lin emergency_N = regN "emergency" ;
lin emergent_A = longA "emergent" ;
lin emphasis_N = regN "emphasis" ;
lin emphasise_V2 = prpV2 (regV "emphasise") "" ;
lin emphasise_VS = mkVS (regV "emphasise") ;
lin emphasize_V2 = prpV2 (regV "emphasize") "" ;
lin emphasize_VS = mkVS (regV "emphasize") ;
lin emphatic_A = longA "emphatic" ;
lin emphatically_Adv = mkAdv "emphatically" ;
lin empire_N = regN "empire" ;
lin empirical_A = longA "empirical" ;
lin empiricism_N = regN "empiricism" ;
lin empiricist_N = regN "empiricist" ;
lin employ_V2 = prpV2 (regV "employ") "" ;
lin empty_A = regA "empty" ;
lin empty_V2 = prpV2 (regV "empty") "" ;
lin emulate_V2 = prpV2 (regV "emulate") "" ;
lin enable_V2 = prpV2 (regV "enable") "" ;
lin encapsulate_V2 = prpV2 (regV "encapsulate") "" ;
lin enchant_V2 = prpV2 (regV "enchant") "" ;
lin enclose_V2 = prpV2 (regV "enclose") "" ;
lin enclosure_N = regN "enclosure" ;
lin encode_V2 = prpV2 (regV "encode") "" ;
lin encompass_V2 = prpV2 (regV "encompass") "" ;
lin encounter_V2 = prpV2 (regV "encounter") "" ;
lin encourage_V2 = prpV2 (regV "encourage") "" ;
lin encrypt_V2 = prpV2 (regV "encrypt") "" ;
lin encumber_V2 = prpV2 (regV "encumber") "" ;
lin encyclopaedia_N = regN "encyclopaedia" ;
lin encyclopaedic_A = longA "encyclopaedic" ;
lin end_N = regN "end" ;
lin end_V2 = prpV2 (regV "end") "" ;
lin endeavour_VV = mkVV (regV "endeavour") ;
lin ending_N = regN "ending" ;
lin endow_V3with =dirprepV3 (regV "endow") "with" ;
lin enemy_N = regN "enemy" ;
lin energetic_A = longA "energetic" ;
lin energetically_Adv = mkAdv "energetically" ;
lin energy_N = regN "energy" ;
lin enforce_V2 = prpV2 (regV "enforce") "" ;
lin engage_V2 = prpV2 (regV "engage") "" ;
lin engender_V2 = prpV2 (regV "engender") "" ;
lin engine_N = regN "engine" ;
lin engineer_N = regN "engineer" ;
lin engineer_V2 = prpV2 (regV "engineer") "" ;
lin england_PN = regPN "england" ;
lin english_A = longA "english" ;
lin engross_V2 = prpV2 (regV "engross") "" ;
lin engulf_V2 = prpV2 (regV "engulf") "" ;
lin enhance_V2 = prpV2 (regV "enhance") "" ;
lin enjoy_V2 = prpV2 (regV "enjoy") "" ;
lin enlarge_V2 = prpV2 (regV "enlarge") "" ;
lin enormous_A = longA "enormous" ;
lin enquire_V2about = prpV2 (regV "enquire") "about" ;
lin enrich_V2 = prpV2 (regV "enrich") "" ;
lin ensure_VS = mkVS (regV "ensure") ;
lin entail_VS = mkVS (regV "entail") ;
lin enter_V2 = prpV2 (regV "enter") "" ;
lin enterprise_N = regN "enterprise" ;
lin enterprising_A = longA "enterprising" ;
lin entertain_V2 = prpV2 (regV "entertain") "" ;
lin enthusiast_N = regN "enthusiast" ;
lin entire_A = longA "entire" ;
lin entitle_V3to =dirprepV3 (regV "entitle") "to" ;
lin entity_N = regN "entity" ;
lin entrance_N = regN "entrance" ;
lin entrance_V2 = prpV2 (regV "entrance") "" ;
lin entropy_N = regN "entropy" ;
lin entrust_V3to =dirprepV3 (regV "entrust") "to" ;
lin entry_N = regN "entry" ;
lin enumerate_V2 = prpV2 (regV "enumerate") "" ;
lin envelope_N = regN "envelope" ;
lin environment_N = regN "environment" ;
lin envisage_V2 = prpV2 (regV "envisage") "" ;
lin envy_N = regN "envy" ;
lin envy_V2 = prpV2 (regV "envy") "" ;
lin epistemology_N = regN "epistemology" ;
lin equal_N = regN "equal" ;
lin equal_V2 = prpV2 (regV "equal") "" ;
lin equal_A = regA "equal" ;
lin equal_A2to = regA2 "equal" "to" ;
lin equate_V3with =dirprepV3 (regV "equate") "with" ;
lin equation_N = regN "equation" ;
lin equidistant_A = longA "equidistant" ;
lin equip_V2 = prpV2 (regV "equip") "" ;
lin equipment_N = regN "equipment" ;
lin equivalence_N2to = prepN2 "equivalence" "to" ;
lin equivalent_V = (regV "equivalent") ;
lin equivalent_A = longA "equivalent" ;
lin equivalent_A2to = longA2 "equivalent" "to" ;
lin ergonomic_A = longA "ergonomic" ;
lin ergonomically_Adv = mkAdv "ergonomically" ;
lin erroneous_A = longA "erroneous" ;
lin error_N = regN "error" ;
lin escape_V2from = prpV2 (regV "escape") "from" ;
lin eschew_V2 = prpV2 (regV "eschew") "" ;
lin esoteric_A = longA "esoteric" ;
lin especially_Adv = mkAdv "especially" ;
lin espouse_V2 = prpV2 (regV "espouse") "" ;
lin essay_N = regN "essay" ;
lin essence_N = regN "essence" ;
lin essential_A = longA "essential" ;
lin establish_V2 = prpV2 (regV "establish") "" ;
lin establishment_N = regN "establishment" ;
lin estate_N = regN "estate" ;
lin estimate_VS = mkVS (regV "estimate") ;
lin euclidean_A = longA "euclidean" ;
lin europe_PN = regPN "europe" ;
lin european_A = longA "european" ;
lin european_N = regN "european" ;
lin evade_V2 = prpV2 (regV "evade") "" ;
lin evaluable_A = longA "evaluable" ;
lin evaluate_V2 = prpV2 (regV "evaluate") "" ;
lin even_Adv = mkAdv "even" ;
lin even_A = regA "even" ;
lin evening_N = regN "evening" ;
lin event_N = regN "event" ;
lin eventual_A = longA "eventual" ;
lin ever_Adv = mkAdv "ever" ;
lin everyday_A = longA "everyday" ;
---- lin everywhere_Adv = mkAdv "everywhere" ;
lin evidence_N = regN "evidence" ;
lin evident_A = longA "evident" ;
lin evident_A2 = longA2 "evident" "" ;
lin evil_A = regA "evil" ;
lin evocation_N = regN "evocation" ;
lin evoke_V2 = prpV2 (regV "evoke") "" ;
lin evolution_N = regN "evolution" ;
lin evolve_V = (regV "evolve") ;
lin exacerbate_V2 = prpV2 (regV "exacerbate") "" ;
lin exact_A = regA "exact" ;
lin exaggerate_V2 = prpV2 (regV "exaggerate") "" ;
lin exaggerate_V = (regV "exaggerate") ;
lin exalt_V2 = prpV2 (regV "exalt") "" ;
lin examination_N = regN "examination" ;
lin examine_V2 = prpV2 (regV "examine") "" ;
lin example_N = regN "example" ;
lin excede_V2 = prpV2 (regV "excede") "" ;
lin exceed_V2 = prpV2 (regV "exceed") "" ;
lin excellence_N = regN "excellence" ;
lin excellent_A = longA "excellent" ;
lin exception_N = regN "exception" ;
lin excess_N = regN "excess" ;
lin excessive_A = longA "excessive" ;
lin exchange_N = regN "exchange" ;
lin exchange_V3for =dirprepV3 (regV "exchange") "for" ;
lin excite_V2 = prpV2 (regV "excite") "" ;
lin exclude_V2 = prpV2 (regV "exclude") "" ;
lin exclusion_N = regN "exclusion" ;
lin exclusive_A = longA "exclusive" ;
lin exclusive_A2to = longA2 "exclusive" "to" ;
lin excursion_N = regN "excursion" ;
lin excuse_V2 = prpV2 (regV "excuse") "" ;
lin excuse_N2for = prepN2 "excuse" "for" ;
lin execute_V2 = prpV2 (regV "execute") "" ;
lin exemplar_N = regN "exemplar" ;
lin exemplify_V2 = prpV2 (regV "exemplify") "" ;
lin exercise_N = regN "exercise" ;
lin exert_V2 = prpV2 (regV "exert") "" ;
lin exhaust_V2 = prpV2 (regV "exhaust") "" ;
lin exhibit_N = regN "exhibit" ;
lin exhibit_V2 = prpV2 (regV "exhibit") "" ;
lin exhort_V2 = prpV2 (regV "exhort") "" ;
lin exist_V = (regV "exist") ;
lin existence_N = regN "existence" ;
lin existent_A = longA "existent" ;
lin exit_N = regN "exit" ;
lin exit_V2from = prpV2 (regV "exit") "from" ;
lin exophoric_A = longA "exophoric" ;
lin expand_V = (regV "expand") ;
lin expansion_N = regN "expansion" ;
lin expect_V2 = prpV2 (regV "expect") "" ;
lin expect_V2 = prpV2 (regV "expect") "" ;
lin expect_VS = mkVS (regV "expect") ;
lin expedient_N = regN "expedient" ;
lin expel_V2 = prpV2 (regV "expel") "" ;
lin expend_V2 = prpV2 (regV "expend") "" ;
lin expenditure_N = regN "expenditure" ;
lin expense_N = regN "expense" ;
lin expensive_A = longA "expensive" ;
lin experience_N = regN "experience" ;
lin experience_V2 = prpV2 (regV "experience") "" ;
lin experiment_N = regN "experiment" ;
lin experiment_V = (regV "experiment") ;
lin expert_N = regN "expert" ;
lin expertise_N = regN "expertise" ;
lin expire_V2 = prpV2 (regV "expire") "" ;
lin expiry_N = regN "expiry" ;
lin explain_V3to =dirprepV3 (regV "explain") "to" ;
lin explanation_N = regN "explanation" ;
lin explanatory_A = longA "explanatory" ;
lin explicate_V2 = prpV2 (regV "explicate") "" ;
lin explicit_A = longA "explicit" ;
lin explode_V = (regV "explode") ;
lin exploit_V2 = prpV2 (regV "exploit") "" ;
lin explore_V2 = prpV2 (regV "explore") "" ;
lin explore_V = (regV "explore") ;
lin explosion_N = regN "explosion" ;
lin explosive_A = longA "explosive" ;
lin explosive_N = regN "explosive" ;
lin exponent_N = regN "exponent" ;
lin exponential_A = longA "exponential" ;
lin exponential_N = regN "exponential" ;
lin expose_V2 = prpV2 (regV "expose") "" ;
lin exposure_V = (regV "exposure") ;
lin express_A = longA "express" ;
lin express_V2 = prpV2 (regV "express") "" ;
lin expressible_A = longA "expressible" ;
lin expressible_A2by = longA2 "expressible" "by" ;
lin expression_N = regN "expression" ;
lin expressly_Adv = mkAdv "expressly" ;
lin expulsion_N = regN "expulsion" ;
lin expunge_V2 = prpV2 (regV "expunge") "" ;
lin extant_A = longA "extant" ;
lin extend_V2 = prpV2 (regV "extend") "" ;
lin extensible_A = longA "extensible" ;
lin extension_N = regN "extension" ;
lin extensive_A = longA "extensive" ;
lin extent_N = regN "extent" ;
lin external_A = longA "external" ;
lin extra_A = longA "extra" ;
lin extract_V3from =dirprepV3 (regV "extract") "from" ;
lin extraneous_A = longA "extraneous" ;
lin extravagance_N = regN "extravagance" ;
lin extravagant_A = longA "extravagant" ;
lin extreme_A = longA "extreme" ;
lin extrinsic_A = longA "extrinsic" ;
lin extrinsically_Adv = mkAdv "extrinsically" ;
lin eye_N = regN "eye" ;
lin face_N = regN "face" ;
lin face_V2 = prpV2 (regV "face") "" ;
lin face_V3with =dirprepV3 (regV "face") "with" ;
lin facet_N = regN "facet" ;
lin facetious_A = longA "facetious" ;
lin facilitate_V2 = prpV2 (regV "facilitate") "" ;
lin facility_N = regN "facility" ;
lin fact_N2 = prepN2 "fact" "" ;
lin factive_A = longA "factive" ;
lin factive_N = regN "factive" ;
lin factor_N = regN "factor" ;
lin factor_V2 = prpV2 (regV "factor") "" ;
lin factorial_N = regN "factorial" ;
lin factory_N = regN "factory" ;
lin factual_A = longA "factual" ;
lin faculty_N = regN "faculty" ;
lin fail_V2 = prpV2 (regV "fail") "" ;
lin failure_N = regN "failure" ;
lin faint_A = regA "faint" ;
lin fair_A = regA "fair" ;
lin fair_N = regN "fair" ;
lin fairy_N = regN "fairy" ;
lin faith_N = regN "faith" ;
lin fall_N = regN "fall" ;
lin fall_V = useV IrregEng.fall_V ;
lin false_A = regA "false" ;
lin falsehood_N = regN "falsehood" ;
lin fame_N = regN "fame" ;
lin familiar_A = longA "familiar" ;
lin familiar_A2to = longA2 "familiar" "to" ;
lin family_N = regN "family" ;
lin fan_N = regN "fan" ;
lin fancy_A = regA "fancy" ;
lin fancy_V2 = prpV2 (regV "fancy") "" ;
lin far_A = longA "far" ;
lin far_A2from = longA2 "far" "from" ;
lin farce_N = regN "farce" ;
lin fare_N = regN "fare" ;
lin farm_N = regN "farm" ;
lin farm_V = (regV "farm") ;
lin fashion_N = regN "fashion" ;
lin fashionable_A = longA "fashionable" ;
lin fast_A = regA "fast" ;
lin fasten_V3to =dirprepV3 (regV "fasten") "to" ;
lin fat_N = massN "fat" ;
lin fat_A = duplADeg "fat" ;
lin fate_N = regN "fate" ;
lin father_N = regN "father" ;
lin fatigue_N = regN "fatigue" ;
lin fatigue_V2 = prpV2 (regV "fatigue") "" ;
lin fault_N = regN "fault" ;
lin favor_N = regN "favor" ;
lin favor_V2 = prpV2 (regV "favor") "" ;
lin favour_N = regN "favour" ;
lin favour_V2 = prpV2 (regV "favour") "" ;
lin favourable_A = longA "favourable" ;
lin favourable_A2to = longA2 "favourable" "to" ;
lin favourite_A = longA "favourite" ;
lin fear_N = regN "fear" ;
lin fear_V2 = prpV2 (regV "fear") "" ;
lin feasible_A = longA "feasible" ;
lin feast_N = regN "feast" ;
lin feather_N = regN "feather" ;
lin feature_N = regN "feature" ;
lin feature_V2 = prpV2 (regV "feature") "" ;
lin february_PN = regPN "february" ;
lin federal_A = longA "federal" ;
lin federation_N = regN "federation" ;
lin fee_N = regN "fee" ;
lin feed_V2 = prpV2 feed_V "" ;
lin feedback_N = regN "feedback" ;
lin feel_V2 = prpV2 feel_V "" ;
lin feeling_N2 = prepN2 "feeling" "" ;
lin felix_PN = regPN "felix" ;
lin fellow_N = regN "fellow" ;
lin felt_N = regN "felt" ;
lin female_A = longA "female" ;
lin fence_N = regN "fence" ;
lin fertilize_V2 = prpV2 (regV "fertilize") "" ;
lin fertilizer_N = regN "fertilizer" ;
lin fetch_V3from =dirprepV3 (regV "fetch") "from" ;
lin fetter_V2 = prpV2 (regV "fetter") "" ;
lin fever_N = regN "fever" ;
lin fiction_N = regN "fiction" ;
lin fictional_A = longA "fictional" ;
lin fido_PN = regPN "fido" ;
lin field_N = regN "field" ;
lin fierce_A = regA "fierce" ;
lin fig_N = regN "fig" ;
lin fight_N = regN "fight" ;
lin fight_V2 = prpV2 IrregEng.fight_V "" ;
lin fight_V = useV IrregEng.fight_V ;
lin figure_N = regN "figure" ;
lin file_N = regN "file" ;
lin file_V2 = prpV2 (regV "file") "" ;
lin fill_V2 = prpV2 (regV "fill") "" ;
lin fill_V3 =dirprepV3 (regV "fill") "" ;
lin film_N = regN "film" ;
lin film_V2 = prpV2 (regV "film") "" ;
lin filter_N = regN "filter" ;
lin filter_V2 = prpV2 (regV "filter") "" ;
lin fin_N = regN "fin" ;
lin final_A = longA "final" ;
lin finance_N = regN "finance" ;
lin financial_A = longA "financial" ;
lin find_V2 = prpV2 find_V "" ;
lin fine_A = regA "fine" ;
lin fine_N = regN "fine" ;
lin fine_V2 = prpV2 (regV "fine") "" ;
lin finger_N = regN "finger" ;
lin fingerprint_N = regN "fingerprint" ;
lin finish_N = regN "finish" ;
lin finish_V2 = prpV2 (regV "finish") "" ;
lin finish_V = (regV "finish") ;
lin finite_A = longA "finite" ;
lin fir_N = regN "fir" ;
lin fire_N = regN "fire" ;
lin fire_V2 = prpV2 (regV "fire") "" ;
lin firm_N = regN "firm" ;
lin firm_A = regA "firm" ;
lin firstly_Adv = mkAdv "firstly" ;
lin fish_N = regN "fish" ;
lin fish_V = (regV "fish") ;
lin fisherman_N = irregN "fisherman" "fishermen" ;
lin fit_V2 = prpV2 (regV "fit") "" ;
lin fit_A = regA "fit" ;
lin fit_A2for = regA2 "fit" "for" ;
lin fix_V3to =dirprepV3 (regV "fix") "to" ;
lin flag_N = regN "flag" ;
lin flame_N = regN "flame" ;
lin flash_N = regN "flash" ;
lin flash_V = (regV "flash") ;
lin flat_A = regA "flat" ;
lin flat_N = regN "flat" ;
lin flavour_N = regN "flavour" ;
lin flaw_N = regN "flaw" ;
lin flawed_A = longA "flawed" ;
lin flesh_N = massN "flesh" ;
lin flexible_A = longA "flexible" ;
lin flight_N2from = prepN2 "flight" "from" ;
lin flip_V2 = prpV2 (regV "flip") "" ;
lin float_V = (regV "float") ;
lin flood_N = regN "flood" ;
lin flood_V2 = prpV2 (regV "flood") "" ;
lin floor_N = regN "floor" ;
lin flour_N = massN "flour" ;
lin flourish_V2 = prpV2 (regV "flourish") "" ;
lin flourish_V = (regV "flourish") ;
lin flow_N = regN "flow" ;
lin flower_N = regN "flower" ;
lin flu_N = regN "flu" ;
lin fluid_A = longA "fluid" ;
lin fluid_N = regN "fluid" ;
lin flux_N = regN "flux" ;
lin fly_N = regN "fly" ;
lin fly_V = useV IrregEng.fly_V ;
lin foam_N = regN "foam" ;
lin foam_V = (regV "foam") ;
lin focal_A = longA "focal" ;
lin focus_N = regN "focus" ;
lin focus_V2 = prpV2 (regV "focus") "" ;
lin focus_V2on = prpV2 (regV "focus") "on" ;
lin fog_N = regN "fog" ;
lin foist_V3on =dirprepV3 (regV "foist") "on" ;
lin fold_N = regN "fold" ;
lin fold_V2 = prpV2 (regV "fold") "" ;
lin follow_V2 = prpV2 (regV "follow") "" ;
lin fond_A2of = regA2 "fond" "of" ;
lin food_N = massN "food" ;
lin fool_N = regN "fool" ;
lin fool_V2 = prpV2 (regV "fool") "" ;
lin foolish_A = longA "foolish" ;
lin foot_N = irregN "foot" "feet" ;
lin football_N = regN "football" ;
--lin for_Prep = mkPrep "for" ;
lin foray_N = regN "foray" ;
lin forbid_V2 = prpV2 forbid_V "" ;
lin force_N = regN "force" ;
lin force_V2 = prpV2 (regV "force") "" ;
lin forcible_A = longA "forcible" ;
lin forearm_N = regN "forearm" ;
--lin forego_V2 = prpV2 forego_V "" ;
lin foreground_N = regN "foreground" ;
lin forehead_N = regN "forehead" ;
lin foreign_A = longA "foreign" ;
lin foreigner_N = regN "foreigner" ;
lin forerunner_N = regN "forerunner" ;
--lin foresee_V2 = prpV2 foresee_V "" ;
lin forest_N = regN "forest" ;
lin forestall_V2 = prpV2 (regV "forestall") "" ;
lin forever_Adv = mkAdv "forever" ;
lin forget_VV = mkVV forget_V ;
--lin forgive_V3for =dirprepV3 forgive_V "for" ;
--lin forgo_V2 = prpV2 forgo_V "" ;
lin fork_N = regN "fork" ;
lin form_N = regN "form" ;
lin form_V2 = prpV2 (regV "form") "" ;
lin formal_A = longA "formal" ;
lin formalism_N = regN "formalism" ;
lin format_N = regN "format" ;
lin formation_N = regN "formation" ;
lin former_A = longA "former" ;
lin formula_N = regN "formula" ;
lin formulate_V2 = prpV2 (regV "formulate") "" ;
lin fort_N = regN "fort" ;
lin forthcoming_A = longA "forthcoming" ;
lin forthwith_Adv = mkAdv "forthwith" ;
lin fortnight_N = regN "fortnight" ;
lin fortuitous_A = longA "fortuitous" ;
lin fortunate_A = longA "fortunate" ;
lin fortune_N = regN "fortune" ;
lin forum_N = regN "forum" ;
lin forward_A = longA "forward" ;
lin forwards_Adv = mkAdv "forwards" ;
lin found_V2 = prpV2 (regV "found") "" ;
lin foundation_N = regN "foundation" ;
lin fountain_N = regN "fountain" ;
lin fox_N = regN "fox" ;
lin fraction_N = regN "fraction" ;
lin fracture_N = regN "fracture" ;
lin fracture_V2 = prpV2 (regV "fracture") "" ;
lin fragment_N = regN "fragment" ;
lin fragment_V2 = prpV2 (regV "fragment") "" ;
lin fragmentary_A = longA "fragmentary" ;
lin frame_N = regN "frame" ;
lin frame_V2 = prpV2 (regV "frame") "" ;
lin framework_N = regN "framework" ;
lin france_PN = regPN "france" ;
lin franz_PN = regPN "franz" ;
lin free_A = regA "free" ;
lin free_V2 = prpV2 (regV "free") "" ;
lin freedom_N = regN "freedom" ;
lin freeze_V2 = prpV2 freeze_V "" ;
lin french_A = regA "french" ;
lin frequency_N = regN "frequency" ;
lin frequent_A = longA "frequent" ;
lin fresh_A = regA "fresh" ;
lin friction_N = regN "friction" ;
lin friday_PN = regPN "friday" ;
lin friend_N = regN "friend" ;
lin friendly_A = regA "friendly" ;
lin friendly_A2to = regA2 "friendly" "to" ;
lin fright_N = regN "fright" ;
lin frighten_V2 = prpV2 (regV "frighten") "" ;
lin frill_N = regN "frill" ;
lin fringe_N = regN "fringe" ;
--lin from_Prep = mkPrep "from" ;
lin front_A = longA "front" ;
lin front_N = regN "front" ;
lin fruit_N = massN "fruit" ;
lin fry_V2 = prpV2 (regV "fry") "" ;
lin fulfil_V = (regV "fulfil") ;
lin full_A = regA "full" ;
lin fun_N = regN "fun" ;
lin function_N = regN "function" ;
lin function_V = (regV "function") ;
lin functor_N = regN "functor" ;
lin fund_N = regN "fund" ;
lin fundamental_A = longA "fundamental" ;
lin funeral_N = regN "funeral" ;
lin funereal_A = longA "funereal" ;
lin fungus_N = irregN "fungus" "fungi" ;
lin funny_A = regA "funny" ;
lin fur_N = regN "fur" ;
lin furnish_V3with =dirprepV3 (regV "furnish") "with" ;
lin furniture_N = massN "furniture" ;
lin fuss_N = regN "fuss" ;
lin future_A = longA "future" ;
lin future_N = regN "future" ;
lin fuzzy_A = longA "fuzzy" ;
lin gag_N = regN "gag" ;
lin gag_V2 = prpV2 (regV "gag") "" ;
lin gain_N = regN "gain" ;
lin gain_V2 = prpV2 (regV "gain") "" ;
lin galactic_A = longA "galactic" ;
lin galaxy_N = regN "galaxy" ;
lin gale_N = regN "gale" ;
lin gallon_N = regN "gallon" ;
lin gamble_V = (regV "gamble") ;
lin game_N = regN "game" ;
lin gap_N = regN "gap" ;
lin gape_V = (regV "gape") ;
lin gape_V2at = prpV2 (regV "gape") "at" ;
lin garage_N = regN "garage" ;
lin garden_N = regN "garden" ;
lin garment_N = regN "garment" ;
lin gas_N = regN "gas" ;
lin gaseous_A = longA "gaseous" ;
lin gate_N = regN "gate" ;
lin gather_V = (regV "gather") ;
lin gauge_N = regN "gauge" ;
lin gauge_V2 = prpV2 (regV "gauge") "" ;
lin gay_A = regA "gay" ;
lin gaze_V2at = prpV2 (regV "gaze") "at" ;
lin gaze_N = regN "gaze" ;
lin gear_N = regN "gear" ;
lin gear_V2 = prpV2 (regV "gear") "" ;
lin generable_A = longA "generable" ;
lin general_A = longA "general" ;
lin general_N = regN "general" ;
lin generate_V2 = prpV2 (regV "generate") "" ;
lin generation_N = regN "generation" ;
lin generator_N = regN "generator" ;
lin generic_A = longA "generic" ;
lin generosity_N = regN "generosity" ;
lin generous_A = longA "generous" ;
lin generous_A2to = longA2 "generous" "to" ;
lin genitive_A = longA "genitive" ;
lin genius_N = regN "genius" ;
lin gentle_A = regA "gentle" ;
lin gentleman_N = irregN "gentleman" "gentlemen" ;
lin gently_Adv = mkAdv "gently" ;
lin genuine_A = longA "genuine" ;
lin genus_N = regN "genus" ;
lin geography_N = regN "geography" ;
lin geology_N = regN "geology" ;
lin geometry_N = regN "geometry" ;
lin german_A = longA "german" ;
lin germane_A = longA "germane" ;
lin germanic_A = longA "germanic" ;
lin germany_PN = regPN "germany" ;
lin gerund_N = regN "gerund" ;
lin gesture_V = (regV "gesture") ;
lin gesture_N = regN "gesture" ;
lin get_V2 = prpV2 get_V "" ;
lin gift_N = regN "gift" ;
lin gin_N = massN "gin" ;
lin giraffe_N = regN "giraffe" ;
lin girl_N = regN "girl" ;
lin gist_N = regN "gist" ;
lin give_V3 = dirdirV3 give_V ;
lin give_V3to =dirprepV3 give_V "to" ;
lin glad_A2 = regA2 "glad" "" ;
lin glad_A = regA "glad" ;
lin glad_A2 = regA2 "glad" "" ;
lin glance_N = regN "glance" ;
lin glance_V2at = prpV2 (regV "glance") "at" ;
lin glass_N = regN "glass" ;
lin glean_V2 = prpV2 (regV "glean") "" ;
lin global_A = longA "global" ;
lin globe_N = regN "globe" ;
lin glory_N = regN "glory" ;
lin gloss_N = regN "gloss" ;
lin gloss_V2 = prpV2 (regV "gloss") "" ;
lin glow_N = regN "glow" ;
lin glow_V2 = prpV2 (regV "glow") "" ;
lin gnat_N = regN "gnat" ;
lin gnu_N = regN "gnu" ;
lin go_V2 = prpV2 go_V "" ;
lin goat_N = regN "goat" ;
lin god_N = regN "god" ;
lin goddess_N = regN "goddess" ;
lin gold_N = regN "gold" ;
lin golden_A = regA "golden" ;
lin good_A = longA "good" ;
lin goose_N = irregN "goose" "geese" ;
lin gore_N = regN "gore" ;
lin gorilla_N = regN "gorilla" ;
lin gory_A = regA "gory" ;
lin gospel_N = regN "gospel" ;
lin govern_V = (regV "govern") ;
lin government_N = regN "government" ;
lin grab_V2 = prpV2 (regV "grab") "" ;
lin grace_N = regN "grace" ;
lin grade_N = regN "grade" ;
lin gradual_A = longA "gradual" ;
lin graft_N = regN "graft" ;
lin graft_V2 = prpV2 (regV "graft") "" ;
lin graham_PN = regPN "graham" ;
lin grain_N = regN "grain" ;
lin gram_N = regN "gram" ;
lin grammar_N = regN "grammar" ;
lin grammatical_A = longA "grammatical" ;
lin grand_A = regA "grand" ;
lin grandfather_N = regN "grandfather" ;
lin grandmother_N = regN "grandmother" ;
lin grant_N = regN "grant" ;
lin grant_V2 = prpV2 (regV "grant") "" ;
lin grape_N = regN "grape" ;
lin graph_N = regN "graph" ;
lin graphic_A = longA "graphic" ;
lin grasp_N = regN "grasp" ;
lin grasp_V2 = prpV2 (regV "grasp") "" ;
lin grass_N = massN "grass" ;
lin grateful_A = regA "grateful" ;
lin grateful_A2to = regA2 "grateful" "to" ;
lin grateful_A2 = regA2 "grateful" "" ;
lin gratuitous_A = longA "gratuitous" ;
lin grave_N = regN "grave" ;
lin gravitation_N = regN "gravitation" ;
lin gravity_N = regN "gravity" ;
lin gravy_N = massN "gravy" ;
lin gray_A = regA "gray" ;
lin grease_N = massN "grease" ;
lin great_A = regA "great" ;
lin greece_PN = regPN "greece" ;
lin greed_N = regN "greed" ;
lin greek_A = longA "greek" ;
lin greek_N = regN "greek" ;
lin green_N = regN "green" ;
lin greet_V2 = prpV2 (regV "greet") "" ;
lin gregarious_A = longA "gregarious" ;
lin grey_A = regA "grey" ;
lin grid_N = regN "grid" ;
lin grief_N = regN "grief" ;
lin grieve_V = (regV "grieve") ;
lin grill_V2 = prpV2 (regV "grill") "" ;
lin grim_A = regA "grim" ;
lin grime_N = regN "grime" ;
lin grin_N = regN "grin" ;
lin grin_V = (regV "grin") ;
lin grind_V2 = prpV2 grind_V "" ;
lin grip_N = regN "grip" ;
lin grip_V2 = prpV2 (regV "grip") "" ;
lin grit_N = regN "grit" ;
lin grog_N = regN "grog" ;
lin gross_A = regA "gross" ;
lin ground_N = regN "ground" ;
lin group_N = regN "group" ;
lin group_V2 = prpV2 (regV "group") "" ;
lin grove_N = regN "grove" ;
lin grow_V2 = prpV2 IrregEng.grow_V "" ;
lin grow_V = useV IrregEng.grow_V ;
lin growth_N = massN "growth" ;
lin guarantee_N = regN "guarantee" ;
lin guarantee_VS = mkVS (regV "guarantee") ;
lin guard_N = regN "guard" ;
lin guard_V2 = prpV2 (regV "guard") "" ;
lin guess_N = regN "guess" ;
lin guess_VS = mkVS (regV "guess") ;
lin guest_N = regN "guest" ;
lin guide_N = regN "guide" ;
lin guide_V2 = prpV2 (regV "guide") "" ;
lin guideline_N = regN "guideline" ;
lin guilt_N = regN "guilt" ;
lin guinea_N = regN "guinea" ;
lin guise_N = regN "guise" ;
lin gun_N = regN "gun" ;
lin habit_N = regN "habit" ;
lin habitual_A = longA "habitual" ;
lin hail_N = regN "hail" ;
lin hair_N = massN "hair" ;
lin half_Adv = mkAdv "half" ;
lin half_A = longA "half" ;
lin half_N = irregN "half" "halves" ;
lin hall_N = regN "hall" ;
lin halt_N = regN "halt" ;
lin halt_V2 = prpV2 (regV "halt") "" ;
lin halt_V = (regV "halt") ;
lin halve_V2 = prpV2 (regV "halve") "" ;
lin hamburger_N = regN "hamburger" ;
lin hammer_N = regN "hammer" ;
lin hammer_V2 = prpV2 (regV "hammer") "" ;
lin hamper_V2 = prpV2 (regV "hamper") "" ;
lin hand_N = regN "hand" ;
lin hand_V3 = dirdirV3 (regV "hand") ;
lin hand_V3to =dirprepV3 (regV "hand") "to" ;
lin handicap_N = regN "handicap" ;
lin handicap_V2 = prpV2 (regV "handicap") "" ;
lin handkerchief_N = regN "handkerchief" ;
lin handle_N = regN "handle" ;
lin handle_V2 = prpV2 (regV "handle") "" ;
lin handsome_A = longA "handsome" ;
lin hang_V2 = prpV2 (regV "hang") "" ;
lin hang_V = useV IrregEng.hang_V ;
lin happen_V = (regV "happen") ;
lin happen_V2 = prpV2 (regV "happen") "" ;
lin happening_N = regN "happening" ;
lin happy_A = regA "happy" ;
lin happy_A2 = regA2 "happy" "" ;
lin harbour_N = regN "harbour" ;
lin hard_A = regA "hard" ;
lin hard_A2 = regA2 "hard" "" ;
lin hardly_Adv = mkAdv "hardly" ;
lin hardware_N = regN "hardware" ;
lin harm_N = regN "harm" ;
lin harm_V2 = prpV2 (regV "harm") "" ;
lin harmonium_N = regN "harmonium" ;
lin harmony_N = regN "harmony" ;
lin harness_N = regN "harness" ;
lin harness_V3to =dirprepV3 (regV "harness") "to" ;
lin hash_N = regN "hash" ;
lin hash_V2 = prpV2 (regV "hash") "" ;
lin haste_N = regN "haste" ;
lin hasty_A = longA "hasty" ;
lin hat_N = regN "hat" ;
lin hate_V2 = prpV2 (regV "hate") "" ;
lin hatred_N = massN "hatred" ;
lin have_V2 = prpV2 have_V "" ;
lin haven_N = regN "haven" ;
lin hazard_N = regN "hazard" ;
lin haze_N = regN "haze" ;
lin head_N = regN "head" ;
lin head_V2 = prpV2 (regV "head") "" ;
lin heading_N = regN "heading" ;
lin heal_V2 = prpV2 (regV "heal") "" ;
lin health_N = massN "health" ;
lin healthy_A = regA "healthy" ;
lin heap_N = regN "heap" ;
lin hear_V2 = prpV2 hear_V "" ;
lin heart_N = regN "heart" ;
lin hearth_N = regN "hearth" ;
lin heat_V = (regV "heat") ;
lin heath_N = regN "heath" ;
lin heathen_N = regN "heathen" ;
lin heave_V = (regV "heave") ;
lin heaven_N = regN "heaven" ;
lin heavy_A = regA "heavy" ;
lin heel_N = regN "heel" ;
lin height_N = regN "height" ;
lin helicopter_N = regN "helicopter" ;
lin help_N = regN "help" ;
lin help_V2 = prpV2 (regV "help") "" ;
lin hemlock_N = regN "hemlock" ;
lin hen_N = regN "hen" ;
lin hence_Adv = mkAdv "hence" ;
lin herd_N2of = prepN2 "herd" "of" ;
---- lin here_Adv = mkAdv "here" ;
lin herring_N = regN "herring" ;
lin heterogeneity_N = regN "heterogeneity" ;
lin heterogeneous_A = longA "heterogeneous" ;
lin heuristic_A = longA "heuristic" ;
lin heuristic_N = regN "heuristic" ;
lin heuristically_Adv = mkAdv "heuristically" ;
lin hide_V2 = prpV2 IrregEng.hide_V "" ;
lin hide_V = useV IrregEng.hide_V ;
lin hierarchy_N = regN "hierarchy" ;
lin high_A = regA "high" ;
lin highlight_N = regN "highlight" ;
lin highlight_V2 = prpV2 (regV "highlight") "" ;
lin hill_N = regN "hill" ;
lin hind_A = longA "hind" ;
lin hinder_V2 = prpV2 (regV "hinder") "" ;
lin hindrance_N = regN "hindrance" ;
lin hinge_N = regN "hinge" ;
lin hint_N = regN "hint" ;
lin hint_V2at = prpV2 (regV "hint") "at" ;
lin hire_V2 = prpV2 (regV "hire") "" ;
lin history_N = regN "history" ;
lin hit_V2 = prpV2 hit_V "" ;
lin hither_Adv = mkAdv "hither" ;
lin hitherto_Adv = mkAdv "hitherto" ;
lin hoax_N = regN "hoax" ;
lin hoax_V2 = prpV2 (regV "hoax") "" ;
lin hold_V2 = prpV2 hold_V "" ;
lin hole_N = regN "hole" ;
lin holiday_N = regN "holiday" ;
lin hollow_A = regA "hollow" ;
lin holy_A = regA "holy" ;
lin home_N = regN "home" ;
lin homogeneous_A = longA "homogeneous" ;
lin homomorphism_N = regN "homomorphism" ;
lin hone_V2 = prpV2 (regV "hone") "" ;
lin honest_A = longA "honest" ;
lin honesty_N = massN "honesty" ;
lin honey_N = regN "honey" ;
lin honor_N = regN "honor" ;
lin honour_N = regN "honour" ;
lin honour_V2 = prpV2 (regV "honour") "" ;
lin honourable_A = longA "honourable" ;
lin hook_N = regN "hook" ;
lin hook_V2 = prpV2 (regV "hook") "" ;
lin hop_N = regN "hop" ;
lin hop_V = (regV "hop") ;
lin hope_N = regN "hope" ;
lin hope_V2for = prpV2 (regV "hope") "for" ;
lin hope_VS = mkVS (regV "hope") ;
lin horizon_N = regN "horizon" ;
lin horizontal_A = longA "horizontal" ;
lin horn_N = regN "horn" ;
lin horrendous_A = longA "horrendous" ;
lin horrible_A = longA "horrible" ;
lin horrify_V2 = prpV2 (regV "horrify") "" ;
lin horror_N = regN "horror" ;
lin horse_N = regN "horse" ;
lin hospitable_A = longA "hospitable" ;
lin hospitable_A2to = longA2 "hospitable" "to" ;
lin hospital_N = regN "hospital" ;
lin hospitality_N = regN "hospitality" ;
lin host_N = regN "host" ;
lin host_V2 = prpV2 (regV "host") "" ;
lin hot_A = regA "hot" ;
lin hotel_N = regN "hotel" ;
lin hour_N = regN "hour" ;
lin house_N = regN "house" ;
lin house_V2 = prpV2 (regV "house") "" ;
lin household_A = longA "household" ;
lin household_N = regN "household" ;
lin how_Adv = mkAdv "how" ;
lin however_Adv = mkAdv "however" ;
lin huge_A = regA "huge" ;
lin hum_N = regN "hum" ;
lin hum_V = (regV "hum") ;
lin human_A = longA "human" ;
lin human_N = regN "human" ;
lin humble_A = regA "humble" ;
lin humility_N = regN "humility" ;
lin humor_N = massN "humor" ;
lin humour_N = massN "humour" ;
lin hunch_V = (regV "hunch") ;
lin hundred_N = regN "hundred" ;
lin hundred_N2 = prepN2 "hundred" "" ;
lin hunger_V2for = prpV2 (regV "hunger") "for" ;
lin hungry_A = regA "hungry" ;
lin hungry_A2for = regA2 "hungry" "for" ;
lin hunt_N = regN "hunt" ;
lin hunt_V2 = prpV2 (regV "hunt") "" ;
lin huntsman_N = irregN "huntsman" "huntsmen" ;
lin hurry_V = (regV "hurry") ;
lin hurry_N = regN "hurry" ;
lin hurt_V2 = prpV2 IrregEng.hurt_V "" ;
lin hurt_V = useV IrregEng.hurt_V ;
lin husband_N2of = prepN2 "husband" "of" ;
lin hut_N = regN "hut" ;
lin hybrid_A = longA "hybrid" ;
lin hydrogen_N = regN "hydrogen" ;
lin hygiene_N = regN "hygiene" ;
lin hypothesis_N = irregN "hypothesis" "hypotheses" ;
lin hypothesize_V2 = prpV2 (regV "hypothesize") "" ;
lin hypothetical_A = longA "hypothetical" ;
lin ice_N = massN "ice" ;
lin iceland_PN = regPN "iceland" ;
lin icelandic_A = longA "icelandic" ;
lin icon_N = regN "icon" ;
lin idea_N = regN "idea" ;
lin ideal_A = longA "ideal" ;
lin identical_A = longA "identical" ;
lin identical_A2to = longA2 "identical" "to" ;
lin identify_V2 = prpV2 (regV "identify") "" ;
lin identity_N = regN "identity" ;
lin idiocy_N = regN "idiocy" ;
lin idiom_N = regN "idiom" ;
lin idiomatic_A = longA "idiomatic" ;
lin idiot_N = regN "idiot" ;
lin idle_A = regA "idle" ;
lin idle_V = (regV "idle") ;
lin ignore_V2 = prpV2 (regV "ignore") "" ;
lin illegal_A = longA "illegal" ;
lin illegitimacy_N = regN "illegitimacy" ;
lin illegitimate_A = longA "illegitimate" ;
lin illocutionary_A = longA "illocutionary" ;
lin illogical_A = longA "illogical" ;
lin illuminate_V2 = prpV2 (regV "illuminate") "" ;
lin illusion_N = regN "illusion" ;
lin illusory_A = longA "illusory" ;
lin illustrate_V2 = prpV2 (regV "illustrate") "" ;
lin image_N = regN "image" ;
lin imaginary_A = longA "imaginary" ;
lin imagine_V2 = prpV2 (regV "imagine") "" ;
lin imagine_VS = mkVS (regV "imagine") ;
lin imbalance_N = regN "imbalance" ;
lin imitate_V2 = prpV2 (regV "imitate") "" ;
lin immaterial_A = longA "immaterial" ;
lin immediacy_N = regN "immediacy" ;
lin immediate_A = longA "immediate" ;
lin immense_A = longA "immense" ;
lin immigrant_N = regN "immigrant" ;
lin immigration_N = regN "immigration" ;
lin immoderate_A = longA "immoderate" ;
lin immodest_A = longA "immodest" ;
lin immodesty_N = regN "immodesty" ;
lin immune_A2to = longA2 "immune" "to" ;
lin impair_V2 = prpV2 (regV "impair") "" ;
lin impart_V3to =dirprepV3 (regV "impart") "to" ;
lin impartial_A = longA "impartial" ;
lin impatient_A = longA "impatient" ;
lin impatient_A2with = longA2 "impatient" "with" ;
lin impenetrable_A = longA "impenetrable" ;
lin imperative_A = longA "imperative" ;
lin imperative_A2 = longA2 "imperative" "" ;
lin imperfect_A = longA "imperfect" ;
lin imperfection_N = regN "imperfection" ;
lin imperial_A = longA "imperial" ;
lin imperious_A = longA "imperious" ;
lin impersonal_A = longA "impersonal" ;
lin impertinent_A = longA "impertinent" ;
lin impinge_V2on = prpV2 (regV "impinge") "on" ;
lin implausible_A = longA "implausible" ;
lin implement_V2 = prpV2 (regV "implement") "" ;
lin implicate_V2 = prpV2 (regV "implicate") "" ;
lin implicature_N = regN "implicature" ;
lin implicit_A = longA "implicit" ;
lin implicit_A2in = longA2 "implicit" "in" ;
lin imply_VS = mkVS (regV "imply") ;
lin impolite_A = longA "impolite" ;
lin impolite_A2to = longA2 "impolite" "to" ;
lin import_N = regN "import" ;
lin import_V2 = prpV2 (regV "import") "" ;
lin importance_N = massN "importance" ;
lin important_A = longA "important" ;
lin important_A2 = longA2 "important" "" ;
lin important_A2 = longA2 "important" "" ;
lin impose_V3on =dirprepV3 (regV "impose") "on" ;
lin imposition_N = regN "imposition" ;
lin impossible_A2 = longA2 "impossible" "" ;
lin impossible_A = longA "impossible" ;
lin impossible_A2 = longA2 "impossible" "" ;
lin impossible_A2 = longA2 "impossible" "" ;
lin imprecise_A = longA "imprecise" ;
lin imprecision_N = regN "imprecision" ;
lin impress_V2 = prpV2 (regV "impress") "" ;
lin improbable_A = longA "improbable" ;
lin improve_V = (regV "improve") ;
lin impure_A = regA "impure" ;
--lin in_Prep = mkPrep "in" ;
lin inability_N2to = prepN2 "inability" "to" ;
lin inaccuracy_N = regN "inaccuracy" ;
lin inactive_A = longA "inactive" ;
lin inadequacy_N2for = prepN2 "inadequacy" "for" ;
lin inadequecy_N = regN "inadequecy" ;
lin incapacitate_V2 = prpV2 (regV "incapacitate") "" ;
lin incarnation_N = regN "incarnation" ;
lin inch_N = regN "inch" ;
lin incident_N = regN "incident" ;
lin incidental_A = longA "incidental" ;
lin incisive_A = longA "incisive" ;
lin incline_V = (regV "incline") ;
lin inclined_A2to = longA2 "inclined" "to" ;
lin include_V2 = prpV2 (regV "include") "" ;
lin including_Prep = mkPrep "including" ;
lin inclusion_N = regN "inclusion" ;
lin inclusive_A = longA "inclusive" ;
lin incoherence_N = regN "incoherence" ;
lin income_N = regN "income" ;
lin inconceivable_A2 = longA2 "inconceivable" "" ;
lin inconsistency_N = regN "inconsistency" ;
lin incontestable_A = longA "incontestable" ;
lin incontestable_A2 = longA2 "incontestable" "" ;
lin inconvenience_N = regN "inconvenience" ;
lin inconvenience_V2 = prpV2 (regV "inconvenience") "" ;
lin incorporate_V2 = prpV2 (regV "incorporate") "" ;
lin incorporate_V2 = prpV2 (regV "incorporate") "" ;
lin incorrigible_A = longA "incorrigible" ;
lin increase_N = regN "increase" ;
lin increase_V2 = prpV2 (regV "increase") "" ;
lin increase_V = (regV "increase") ;
lin increment_N = regN "increment" ;
lin increment_V2 = prpV2 (regV "increment") "" ;
lin incur_V2 = prpV2 (regV "incur") "" ;
lin indeed_Adv = mkAdv "indeed" ;
lin indefinite_A = regA "indefinite" ;
lin independence_N = massN "independence" ;
lin independent_A = longA "independent" ;
lin indeterminacy_N = regN "indeterminacy" ;
lin index_N = irregN "index" "indices" ;
lin index_V2 = prpV2 (regV "index") "" ;
lin india_PN = regPN "india" ;
lin indian_A = regA "indian" ;
lin indicate_VS = mkVS (regV "indicate") ;
lin indigestion_N = regN "indigestion" ;
lin indirect_A = longA "indirect" ;
lin indiscriminate_A = longA "indiscriminate" ;
lin indistinguishable_A = longA "indistinguishable" ;
lin individual_A = longA "individual" ;
lin individual_N = regN "individual" ;
lin indoor_A = longA "indoor" ;
lin induce_V2 = prpV2 (regV "induce") "" ;
lin induct_V2 = prpV2 (regV "induct") "" ;
lin indulge_V2in = prpV2 (regV "indulge") "in" ;
lin indulgent_A = longA "indulgent" ;
lin industry_N = regN "industry" ;
lin inescapable_A = longA "inescapable" ;
lin inevitable_A = longA "inevitable" ;
lin infect_V2 = prpV2 (regV "infect") "" ;
lin infection_N = regN "infection" ;
lin infectious_A = longA "infectious" ;
lin infer_V3from =dirprepV3 (regV "infer") "from" ;
lin inference_N = regN "inference" ;
lin inferior_A = longA "inferior" ;
lin inferior_A2to = longA2 "inferior" "to" ;
lin infinite_A = longA "infinite" ;
lin infinitesimal_A = longA "infinitesimal" ;
lin infinitive_A = longA "infinitive" ;
lin infix_N = regN "infix" ;
lin inflate_V2 = prpV2 (regV "inflate") "" ;
lin inflation_N = regN "inflation" ;
lin inflect_V = (regV "inflect") ;
lin influence_N = regN "influence" ;
lin influence_V2 = prpV2 (regV "influence") "" ;
lin inform_V3 =dirprepV3 (regV "inform") "" ;
lin informal_A = longA "informal" ;
lin informant_N = regN "informant" ;
lin information_N = regN "information" ;
lin ingenious_A = longA "ingenious" ;
lin ingenuity_N = massN "ingenuity" ;
lin ingredient_N = regN "ingredient" ;
lin inhabit_V2 = prpV2 (regV "inhabit") "" ;
lin inherent_A = longA "inherent" ;
lin inherent_A2to = longA2 "inherent" "to" ;
lin inherit_V3from =dirprepV3 (regV "inherit") "from" ;
lin inheritance_N = regN "inheritance" ;
lin inhibit_V2 = prpV2 (regV "inhibit") "" ;
lin initial_A = longA "initial" ;
lin initialize_V2 = prpV2 (regV "initialize") "" ;
lin initiate_V2 = prpV2 (regV "initiate") "" ;
lin inject_V3with =dirprepV3 (regV "inject") "with" ;
lin injunction_N = regN "injunction" ;
lin injure_V2 = prpV2 (regV "injure") "" ;
lin injury_N = regN "injury" ;
lin ink_N = regN "ink" ;
lin inn_N = regN "inn" ;
lin innate_A = longA "innate" ;
lin innate_A2to = longA2 "innate" "to" ;
lin inner_A = longA "inner" ;
lin innocuous_A = longA "innocuous" ;
lin innovation_N = regN "innovation" ;
lin input_N = regN "input" ;
lin inquire_V2about = prpV2 (regV "inquire") "about" ;
lin inquire_V2 = prpV2 (regV "inquire") "" ;
lin inquiry_N2about = prepN2 "inquiry" "about" ;
lin inscribe_V2 = prpV2 (regV "inscribe") "" ;
lin inscription_N = regN "inscription" ;
lin insect_N = regN "insect" ;
lin insert_V2 = prpV2 (regV "insert") "" ;
lin inside_Adv = mkAdv "inside" ;
lin inside_N = regN "inside" ;
lin insight_N = regN "insight" ;
lin insist_V2 = prpV2 (regV "insist") "" ;
lin insistence_N2on = prepN2 "insistence" "on" ;
lin insistence_N2 = prepN2 "insistence" "" ;
lin insistent_A2 = longA2 "insistent" "" ;
lin inspect_V2 = prpV2 (regV "inspect") "" ;
lin inspector_N = regN "inspector" ;
lin inspire_V2 = prpV2 (regV "inspire") "" ;
lin instability_N = regN "instability" ;
lin install_V2 = prpV2 (regV "install") "" ;
lin instance_N2of = prepN2 "instance" "of" ;
lin instant_N = regN "instant" ;
lin instantiate_V2 = prpV2 (regV "instantiate") "" ;
lin instantly_Adv = mkAdv "instantly" ;
lin instigate_V2 = prpV2 (regV "instigate") "" ;
lin instil_V3in =dirprepV3 (regV "instil") "in" ;
lin instinct_N = regN "instinct" ;
lin institute_V2 = prpV2 (regV "institute") "" ;
lin institute_N = regN "institute" ;
lin institution_N = regN "institution" ;
lin instruct_V2 = prpV2 (regV "instruct") "" ;
lin instrument_N = regN "instrument" ;
lin insulate_V3from =dirprepV3 (regV "insulate") "from" ;
lin insult_N = regN "insult" ;
lin insult_V2 = prpV2 (regV "insult") "" ;
lin insurance_N = regN "insurance" ;
lin insure_V2 = prpV2 (regV "insure") "" ;
lin intact_A = longA "intact" ;
lin integer_N = regN "integer" ;
lin integral_A = longA "integral" ;
lin integrate_V3with =dirprepV3 (regV "integrate") "with" ;
lin intellectual_A = longA "intellectual" ;
lin intelligence_N = regN "intelligence" ;
lin intelligent_A = longA "intelligent" ;
lin intelligible_A = longA "intelligible" ;
lin intend_VV = mkVV (regV "intend") ;
lin intense_A = longA "intense" ;
lin intension_N = regN "intension" ;
lin intention_N = regN "intention" ;
lin inter_V2 = prpV2 (regV "inter") "" ;
lin interdisciplinary_A = longA "interdisciplinary" ;
lin interest_N = regN "interest" ;
lin interest_V2 = prpV2 (regV "interest") "" ;
lin interface_N = regN "interface" ;
lin interfere_V2with = prpV2 (regV "interfere") "with" ;
lin interference_N = regN "interference" ;
lin interject_V = (regV "interject") ;
lin intermediate_A = longA "intermediate" ;
lin internal_A = longA "internal" ;
lin international_A = longA "international" ;
lin interpolate_V2 = prpV2 (regV "interpolate") "" ;
lin interpret_V2 = prpV2 (regV "interpret") "" ;
lin interpretive_A = longA "interpretive" ;
lin interrogate_V2 = prpV2 (regV "interrogate") "" ;
lin interrogative_A = longA "interrogative" ;
lin interrupt_V2 = prpV2 (regV "interrupt") "" ;
lin intersect_V2 = prpV2 (regV "intersect") "" ;
lin interval_N = regN "interval" ;
lin intervene_V = (regV "intervene") ;
lin intimacy_N = regN "intimacy" ;
lin intimate_A = longA "intimate" ;
lin intimate_VS = mkVS (regV "intimate") ;
lin into_Prep = mkPrep "into" ;
lin intonation_N = regN "intonation" ;
lin intractable_A = longA "intractable" ;
lin intransitive_A = longA "intransitive" ;
lin intravenous_A = longA "intravenous" ;
lin intricacy_N = regN "intricacy" ;
lin intricate_A = longA "intricate" ;
lin intrigue_N = regN "intrigue" ;
lin intrigue_V = (regV "intrigue") ;
lin intrinsic_A = longA "intrinsic" ;
lin intrinsically_Adv = mkAdv "intrinsically" ;
lin introduce_V3to =dirprepV3 (regV "introduce") "to" ;
lin introduction_N2to = prepN2 "introduction" "to" ;
lin introspection_N = massN "introspection" ;
lin introspective_A = longA "introspective" ;
lin intrude_V = (regV "intrude") ;
lin intrusion_N = regN "intrusion" ;
lin intuition_N = regN "intuition" ;
lin intuitive_A = longA "intuitive" ;
lin invade_V2 = prpV2 (regV "invade") "" ;
lin invalid_N = regN "invalid" ;
lin invalidate_V2 = prpV2 (regV "invalidate") "" ;
lin invaluable_A = longA "invaluable" ;
lin invariable_A = longA "invariable" ;
lin invariant_A = longA "invariant" ;
lin invasion_N = regN "invasion" ;
lin invent_V2 = prpV2 (regV "invent") "" ;
lin inverse_A = longA "inverse" ;
lin inversion_N = regN "inversion" ;
lin invert_V2 = prpV2 (regV "invert") "" ;
lin invest_V3with =dirprepV3 (regV "invest") "with" ;
lin investigate_V2 = prpV2 (regV "investigate") "" ;
lin invisible_A = longA "invisible" ;
lin invisible_A2to = longA2 "invisible" "to" ;
lin invite_V3to =dirprepV3 (regV "invite") "to" ;
lin invocation_N = regN "invocation" ;
lin invoke_V2 = prpV2 (regV "invoke") "" ;
lin involve_V2 = prpV2 (regV "involve") "" ;
lin inwards_Adv = mkAdv "inwards" ;
lin ireland_PN = regPN "ireland" ;
lin irish_A = longA "irish" ;
lin iron_N = regN "iron" ;
lin iron_V2 = prpV2 (regV "iron") "" ;
lin irony_N = regN "irony" ;
lin irrational_A = longA "irrational" ;
lin irregular_A = longA "irregular" ;
lin irrelevant_A = longA "irrelevant" ;
lin irremediable_A = longA "irremediable" ;
lin irrespective_A2of = longA2 "irrespective" "of" ;
lin irretrievable_A = longA "irretrievable" ;
lin irritant_N = regN "irritant" ;
lin irritate_V2 = prpV2 (regV "irritate") "" ;
lin island_N = regN "island" ;
lin isolable_A = longA "isolable" ;
lin isolate_V2 = prpV2 (regV "isolate") "" ;
lin isomorphic_A = longA "isomorphic" ;
lin issue_V = (regV "issue") ;
lin issue_N = regN "issue" ;
lin italy_PN = regPN "italy" ;
lin item_N = regN "item" ;
lin itemize_V2 = prpV2 (regV "itemize") "" ;
lin iterate_V = (regV "iterate") ;
lin january_PN = regPN "january" ;
lin japan_PN = regPN "japan" ;
lin japanese_A = longA "japanese" ;
lin jaundice_N = regN "jaundice" ;
lin jaundiced_A = longA "jaundiced" ;
lin jaw_N = regN "jaw" ;
lin jealous_A = longA "jealous" ;
lin jealous_A2of = longA2 "jealous" "of" ;
lin jealousy_N2of = prepN2 "jealousy" "of" ;
lin jew_N = regN "jew" ;
lin jewel_N = regN "jewel" ;
lin jeweller_N = regN "jeweller" ;
lin jewellery_N = regN "jewellery" ;
lin job_N = regN "job" ;
lin john_PN = regPN "john" ;
lin join_V3to =dirprepV3 (regV "join") "to" ;
lin joint_N = regN "joint" ;
lin joke_N = regN "joke" ;
lin joke_V = (regV "joke") ;
lin journal_N = regN "journal" ;
lin journalism_N = regN "journalism" ;
lin journalist_N = regN "journalist" ;
lin journey_N = regN "journey" ;
lin joy_N = regN "joy" ;
lin judge_N = regN "judge" ;
lin judge_V2 = prpV2 (regV "judge") "" ;
lin judge_V2 = prpV2 (regV "judge") "" ;
lin judgment_N = regN "judgment" ;
lin judicious_A = longA "judicious" ;
lin juggle_V2 = prpV2 (regV "juggle") "" ;
lin juggle_V = (regV "juggle") ;
lin juice_N = regN "juice" ;
lin july_PN = regPN "july" ;
lin jumble_V2 = prpV2 (regV "jumble") "" ;
lin jump_V = (regV "jump") ;
lin jump_N = regN "jump" ;
lin june_PN = regPN "june" ;
lin junk_N = regN "junk" ;
lin just_A = longA "just" ;
lin justice_N = regN "justice" ;
lin justify_V2 = prpV2 (regV "justify") "" ;
lin juxtapose_V2 = prpV2 (regV "juxtapose") "" ;
lin juxtaposition_N = regN "juxtaposition" ;
lin keen_A = regA "keen" ;
lin keen_A2on = regA2 "keen" "on" ;
lin keen_A2 = regA2 "keen" "" ;
lin keep_V2 = prpV2 keep_V "" ;
lin kennel_N = regN "kennel" ;
lin kettle_N = regN "kettle" ;
lin key_N = regN "key" ;
lin kick_N = regN "kick" ;
lin kick_V2 = prpV2 (regV "kick") "" ;
lin kidney_N = regN "kidney" ;
lin kill_V2 = prpV2 (regV "kill") "" ;
lin kill_V3f =dirprepV3 (regV "kill") "f" ;
lin kilogram_N = regN "kilogram" ;
lin kilometre_N = regN "kilometre" ;
lin kim_PN = regPN "kim" ;
lin kind_N = regN "kind" ;
lin kind_A = regA "kind" ;
lin kind_A2to = regA2 "kind" "to" ;
lin king_N = regN "king" ;
lin kingdom_N = regN "kingdom" ;
lin kiss_N = regN "kiss" ;
lin kiss_V2 = prpV2 (regV "kiss") "" ;
lin kiss_V = (regV "kiss") ;
lin kitchen_N = regN "kitchen" ;
lin knee_N = regN "knee" ;
lin kneel_V = useV IrregEng.kneel_V ;
lin knife_N = irregN "knife" "knives" ;
lin knob_N = regN "knob" ;
lin knock_N = regN "knock" ;
lin knock_V2 = prpV2 (regV "knock") "" ;
lin knock_V = (regV "knock") ;
lin knocker_N = regN "knocker" ;
lin knot_N = regN "knot" ;
lin knot_V2 = prpV2 (regV "knot") "" ;
lin know_VS = mkVS know_V ;
lin label_N = regN "label" ;
lin label_V2 = prpV2 (regV "label") "" ;
lin laboratory_N = regN "laboratory" ;
lin laborious_A = longA "laborious" ;
lin labour_N = massN "labour" ;
lin labour_V = (regV "labour") ;
lin lace_N = regN "lace" ;
lin lace_V2 = prpV2 (regV "lace") "" ;
lin lack_N = regN "lack" ;
lin lack_V2 = prpV2 (regV "lack") "" ;
lin lacuna_N = regN "lacuna" ;
lin ladder_N = regN "ladder" ;
lin lady_N = regN "lady" ;
lin lake_N = regN "lake" ;
lin lamb_N = regN "lamb" ;
lin lament_N = regN "lament" ;
lin lament_V2 = prpV2 (regV "lament") "" ;
lin lamp_N = regN "lamp" ;
lin land_N = regN "land" ;
lin land_V = (regV "land") ;
lin lane_N = regN "lane" ;
lin language_N = regN "language" ;
lin lapse_V = (regV "lapse") ;
lin large_A = regA "large" ;
lin last_A = longA "last" ;
lin last_V = (regV "last") ;
lin late_A = regA "late" ;
lin lately_Adv = mkAdv "lately" ;
lin latitude_N = regN "latitude" ;
lin lattice_N = regN "lattice" ;
lin laugh_N = regN "laugh" ;
lin laugh_V2at = prpV2 (regV "laugh") "at" ;
lin laughter_N = regN "laughter" ;
lin law_N = regN "law" ;
lin lawn_N = regN "lawn" ;
lin lawyer_N = regN "lawyer" ;
lin lax_A = regA "lax" ;
lin lay_V3loc =dirprepV3 lay_V "loc" ;
lin layer_N = regN "layer" ;
lin layer_V2 = prpV2 (regV "layer") "" ;
lin laze_V = (regV "laze") ;
lin lazy_A = regA "lazy" ;
lin lead_N = regN "lead" ;
lin lead_V2 = prpV2 lead_V "" ;
lin leaf_N = irregN "leaf" "leaves" ;
lin league_N = regN "league" ;
lin lean_V2on = prpV2 (regV "lean") "on" ;
lin leap_V = (regV "leap") ;
lin learn_VS = mkVS (regV "learn") ;
lin leather_N = massN "leather" ;
lin leave_V2 = prpV2 IrregEng.leave_V "" ;
lin leave_V = useV IrregEng.leave_V ;
lin lecture_N = regN "lecture" ;
lin lecture_V = (regV "lecture") ;
lin lee_PN = regPN "lee" ;
lin left_A = longA "left" ;
lin leftward_A = longA "leftward" ;
lin leg_N = regN "leg" ;
lin legacy_N = regN "legacy" ;
lin legal_A = longA "legal" ;
lin legible_A = longA "legible" ;
lin legitimate_A = longA "legitimate" ;
lin legitimize_V2 = prpV2 (regV "legitimize") "" ;
lin lemon_N = regN "lemon" ;
lin lend_V3to =dirprepV3 (regV "lend") "to" ;
lin length_N = regN "length" ;
lin lengthen_V2 = prpV2 (regV "lengthen") "" ;
lin lesson_N = regN "lesson" ;
lin let_V3se_vp =dirprepV3 let_V "se_vp" ;
lin lethal_A = longA "lethal" ;
lin letter_N = regN "letter" ;
lin level_A = longA "level" ;
lin level_N = regN "level" ;
lin level_V2 = prpV2 (regV "level") "" ;
lin lexical_A = longA "lexical" ;
lin lexicalist_A = longA "lexicalist" ;
lin lexicon_N = regN "lexicon" ;
lin liable_A = longA "liable" ;
lin liable_A2to = longA2 "liable" "to" ;
lin liable_A2 = longA2 "liable" "" ;
lin liar_N = regN "liar" ;
lin liberal_A = longA "liberal" ;
lin liberate_V3from =dirprepV3 (regV "liberate") "from" ;
lin libertine_N = regN "libertine" ;
lin liberty_N = regN "liberty" ;
lin library_N = regN "library" ;
lin licence_N = regN "licence" ;
lin license_V2 = prpV2 (regV "license") "" ;
lin lid_N = regN "lid" ;
lin lie_V = (regV "lie") ;
lin lie_V2 = prpV2 IrregEng.lie_V "" ;
lin life_N = regN "life" ;
lin lift_N = regN "lift" ;
lin lift_V2 = prpV2 (regV "lift") "" ;
lin light_A = regA "light" ;
lin light_N = regN "light" ;
lin light_V2 = prpV2 light_V "" ;
lin lightning_N = regN "lightning" ;
lin like_A = longA "like" ;
lin like_V2 = prpV2 (regV "like") "" ;
lin like_V2 = prpV2 (regV "like") "" ;
lin like_V2 = prpV2 (regV "like") "" ;
lin likelihood_N2of = prepN2 "likelihood" "of" ;
lin likely_A = longA "likely" ;
lin likely_A2 = longA2 "likely" "" ;
lin likely_A2 = longA2 "likely" "" ;
lin limb_N = regN "limb" ;
lin lime_N = regN "lime" ;
lin limit_N = regN "limit" ;
lin limit_V2 = prpV2 (regV "limit") "" ;
lin line_N = regN "line" ;
lin line_V2 = prpV2 (regV "line") "" ;
lin linear_A = longA "linear" ;
lin linguist_N = regN "linguist" ;
lin linguistic_A = longA "linguistic" ;
lin linguistics_N = massN "linguistics" ;
lin link_N = regN "link" ;
lin link_V3to =dirprepV3 (regV "link") "to" ;
lin lion_N = regN "lion" ;
lin lip_N = regN "lip" ;
lin liquefaction_N = regN "liquefaction" ;
lin liquefy_V = (regV "liquefy") ;
lin liquid_A = longA "liquid" ;
lin liquid_N = regN "liquid" ;
lin lisp_N = regN "lisp" ;
lin lisp_PN = regPN "lisp" ;
lin list_N = regN "list" ;
lin list_V2 = prpV2 (regV "list") "" ;
lin listen_V2to = prpV2 (regV "listen") "to" ;
lin liszt_PN = regPN "liszt" ;
lin literal_A = longA "literal" ;
lin literary_A = longA "literary" ;
lin literature_N = massN "literature" ;
lin litre_N = regN "litre" ;
lin little_N = massN "little" ;
lin live_A = regA "live" ;
lin live_V2 = prpV2 (regV "live") "" ;
lin load_N = regN "load" ;
lin load_V2 = prpV2 (regV "load") "" ;
lin loaf_N = irregN "loaf" "loaves" ;
lin loan_V3to =dirprepV3 (regV "loan") "to" ;
lin lobster_N = regN "lobster" ;
lin local_A = longA "local" ;
lin locate_V2 = prpV2 (regV "locate") "" ;
lin location_N = regN "location" ;
lin locative_A = longA "locative" ;
lin lock_N = regN "lock" ;
lin lock_V2 = prpV2 (regV "lock") "" ;
lin log_N = regN "log" ;
lin logarithm_N = regN "logarithm" ;
lin logic_N = regN "logic" ;
lin loiter_V = (regV "loiter") ;
lin london_PN = regPN "london" ;
lin lonely_A = regA "lonely" ;
lin long_Adv = mkAdv "long" ;
lin long_A = regA "long" ;
lin long_V2for = prpV2 (regV "long") "for" ;
lin longwinded_A = longA "longwinded" ;
lin look_N = regN "look" ;
lin look_V3 =dirprepV3 (regV "look") "" ;
lin look_V2for = prpV2 (regV "look") "for" ;
lin loop_N = regN "loop" ;
lin loophole_N = regN "loophole" ;
lin loose_A = regA "loose" ;
lin lord_N = regN "lord" ;
lin lore_N = regN "lore" ;
lin lose_V2 = prpV2 lose_V "" ;
lin loss_N = regN "loss" ;
lin lot_N = regN "lot" ;
lin lottery_N = regN "lottery" ;
lin loud_A = regA "loud" ;
lin lounge_V = (regV "lounge") ;
lin love_N = regN "love" ;
lin love_V2 = prpV2 (regV "love") "" ;
lin lovely_A = regA "lovely" ;
lin low_A = regA "low" ;
lin lower_V2 = prpV2 (regV "lower") "" ;
lin loyal_A = longA "loyal" ;
lin loyal_A2to = longA2 "loyal" "to" ;
lin luck_N = regN "luck" ;
lin lump_N = regN "lump" ;
lin lung_N = regN "lung" ;
lin lunge_V2 = prpV2 (regV "lunge") "" ;
lin lurk_V = (regV "lurk") ;
lin lush_A = regA "lush" ;
lin luxury_N = regN "luxury" ;
lin machine_N = regN "machine" ;
lin machinery_N = massN "machinery" ;
lin mad_A = regA "mad" ;
lin mad_A2about = regA2 "mad" "about" ;
lin mad_A2with = regA2 "mad" "with" ;
lin made_A2from = longA2 "made" "from" ;
lin magazine_N = regN "magazine" ;
lin magic_A = longA "magic" ;
lin magic_N = massN "magic" ;
lin magnet_N = regN "magnet" ;
lin magnetic_A = longA "magnetic" ;
lin magnitude_N = regN "magnitude" ;
lin mail_N = massN "mail" ;
lin mail_V3to =dirprepV3 (regV "mail") "to" ;
lin main_A = longA "main" ;
lin mainstream_A = longA "mainstream" ;
lin maintain_V2 = prpV2 (regV "maintain") "" ;
lin maintain_VS = mkVS (regV "maintain") ;
lin maintenance_N = regN "maintenance" ;
lin major_A = longA "major" ;
lin make_V2 = prpV2 make_V "" ;
lin male_A = longA "male" ;
lin malign_V2 = prpV2 (regV "malign") "" ;
lin malignant_A = longA "malignant" ;
lin mammal_N = regN "mammal" ;
lin man_N = irregN "man" "men" ;
lin man_V2 = prpV2 (regV "man") "" ;
lin manage_V2 = prpV2 (regV "manage") "" ;
lin manage_VV = mkVV (regV "manage") ;
lin manager_N = regN "manager" ;
lin mandatory_A = longA "mandatory" ;
lin manifest_A = longA "manifest" ;
lin manifest_N = regN "manifest" ;
lin manifest_V2 = prpV2 (regV "manifest") "" ;
lin manifestation_N = regN "manifestation" ;
lin manipulate_V2 = prpV2 (regV "manipulate") "" ;
lin manner_N = regN "manner" ;
lin manoeuvre_N = regN "manoeuvre" ;
lin manoeuvre_V2 = prpV2 (regV "manoeuvre") "" ;
lin manoeuvre_V = (regV "manoeuvre") ;
lin manual_A = longA "manual" ;
lin manual_N = regN "manual" ;
lin manufacture_V2 = prpV2 (regV "manufacture") "" ;
lin manuscript_N = regN "manuscript" ;
lin map_N = regN "map" ;
lin map_V3to =dirprepV3 (regV "map") "to" ;
lin mapping_N = regN "mapping" ;
lin march_N = regN "march" ;
lin march_PN = regPN "march" ;
lin margin_N = regN "margin" ;
lin marginal_A = longA "marginal" ;
lin marine_A = longA "marine" ;
lin mark_N = regN "mark" ;
lin mark_V2 = prpV2 (regV "mark") "" ;
lin market_N = regN "market" ;
lin marking_N = regN "marking" ;
lin marriage_N = regN "marriage" ;
lin marry_V2 = prpV2 (regV "marry") "" ;
lin mars_PN = regPN "mars" ;
lin mary_PN = regPN "mary" ;
lin mass_N = regN "mass" ;
lin massive_A = longA "massive" ;
lin master_N = regN "master" ;
lin master_V2 = prpV2 (regV "master") "" ;
lin mat_N = regN "mat" ;
lin match_N = regN "match" ;
lin match_V2 = prpV2 (regV "match") "" ;
lin material_A = longA "material" ;
lin material_N = regN "material" ;
lin mathematical_A = longA "mathematical" ;
lin mathematician_N = regN "mathematician" ;
lin mathematics_N = massN "mathematics" ;
lin matrix_N = irregN "matrix" "matrices" ;
lin matter_N = regN "matter" ;
lin matter_V = (regV "matter") ;
lin mature_A = regA "mature" ;
lin mature_V = (regV "mature") ;
lin maxim_N = regN "maxim" ;
lin maximal_A = longA "maximal" ;
lin maximize_V2 = prpV2 (regV "maximize") "" ;
lin maximum_N = regN "maximum" ;
lin may_PN = regPN "may" ;
lin maybe_Adv = mkAdv "maybe" ;
lin mayor_N = regN "mayor" ;
lin meal_N = regN "meal" ;
lin mean_A = regA "mean" ;
lin mean_V2 = prpV2 mean_V "" ;
lin mean_VS = mkVS mean_V ;
lin meaning_N = regN "meaning" ;
lin meanwhile_Adv = mkAdv "meanwhile" ;
lin measure_N = regN "measure" ;
lin measure_V2 = prpV2 (regV "measure") "" ;
lin meat_N = massN "meat" ;
lin mechanic_V = (regV "mechanic") ;
lin mechanical_A = longA "mechanical" ;
lin mechanism_N = regN "mechanism" ;
lin mechanize_V2 = prpV2 (regV "mechanize") "" ;
lin mediate_V2 = prpV2 (regV "mediate") "" ;
lin medical_A = longA "medical" ;
lin medicine_N = massN "medicine" ;
lin medium_A = longA "medium" ;
lin medium_N = regN "medium" ;
lin meet_V2 = prpV2 meet_V "" ;
lin meeting_N2with = prepN2 "meeting" "with" ;
lin melody_N = regN "melody" ;
lin melt_V = (regV "melt") ;
lin member_N = regN "member" ;
lin memorable_A = longA "memorable" ;
lin memorial_N = regN "memorial" ;
lin memory_N2ger = prepN2 "memory" "ger" ;
lin memory_N2of = prepN2 "memory" "of" ;
lin mend_V2 = prpV2 (regV "mend") "" ;
lin mental_A = longA "mental" ;
lin mention_N = regN "mention" ;
lin mention_V2 = prpV2 (regV "mention") "" ;
lin mercy_N = regN "mercy" ;
lin merge_V2 = prpV2 (regV "merge") "" ;
lin merit_N = regN "merit" ;
lin merry_A = regA "merry" ;
lin mess_N = regN "mess" ;
lin message_N = regN "message" ;
lin messenger_N = regN "messenger" ;
lin metal_N = regN "metal" ;
lin metaphor_N = regN "metaphor" ;
lin method_N = regN "method" ;
lin methodical_A = longA "methodical" ;
lin methodology_N = regN "methodology" ;
lin metre_N = regN "metre" ;
lin metric_A = longA "metric" ;
lin microbiology_N = regN "microbiology" ;
lin microphone_N = regN "microphone" ;
lin microscope_N = regN "microscope" ;
lin middle_A = longA "middle" ;
lin middle_N = regN "middle" ;
lin mighty_A = regA "mighty" ;
lin migrate_V = (regV "migrate") ;
lin mild_A = regA "mild" ;
lin mile_N = regN "mile" ;
lin military_A = longA "military" ;
lin milk_N = massN "milk" ;
lin mill_N = regN "mill" ;
lin mill_V2 = prpV2 (regV "mill") "" ;
lin million_N2 = prepN2 "million" "" ;
lin mimic_N = regN "mimic" ;
lin mimic_V2 = prpV2 (regV "mimic") "" ;
lin mind_N = regN "mind" ;
lin mind_V2 = prpV2 (regV "mind") "" ;
lin mind_V2 = prpV2 (regV "mind") "" ;
lin mine_N = regN "mine" ;
lin mine_V2 = prpV2 (regV "mine") "" ;
lin mineral_N = regN "mineral" ;
lin minim_N = regN "minim" ;
lin minimal_A = longA "minimal" ;
lin minimize_V2 = prpV2 (regV "minimize") "" ;
lin minimum_N = regN "minimum" ;
lin minister_N = regN "minister" ;
lin ministry_N = regN "ministry" ;
lin ministry_N2of = prepN2 "ministry" "of" ;
lin minor_A = longA "minor" ;
lin minor_N = regN "minor" ;
lin minute_A = longA "minute" ;
lin minute_N = regN "minute" ;
lin mirror_N = regN "mirror" ;
lin miscellaneous_A = longA "miscellaneous" ;
lin misconception_N = regN "misconception" ;
lin misery_N = regN "misery" ;
lin mislead_V2 = prpV2 (regV "mislead") "" ;
lin misplace_V2 = prpV2 (regV "misplace") "" ;
lin miss_V2 = prpV2 (regV "miss") "" ;
lin missile_N = regN "missile" ;
lin mist_N = regN "mist" ;
lin mistake_N = regN "mistake" ;
lin mistake_V3for =dirprepV3 mistake_V "for" ;
lin mix_V3with =dirprepV3 (regV "mix") "with" ;
lin mixture_N = regN "mixture" ;
lin mnemonic_A = longA "mnemonic" ;
lin mode_N = regN "mode" ;
lin model_A = longA "model" ;
lin model_N = regN "model" ;
lin model_V2 = prpV2 (regV "model") "" ;
lin moderate_A = longA "moderate" ;
lin moderate_V2 = prpV2 (regV "moderate") "" ;
lin modern_A = longA "modern" ;
lin modest_A = longA "modest" ;
lin modesty_N = massN "modesty" ;
lin modify_V2 = prpV2 (regV "modify") "" ;
lin modular_A = longA "modular" ;
lin module_N = regN "module" ;
lin molecular_A = longA "molecular" ;
lin molecule_N = regN "molecule" ;
lin moment_N = regN "moment" ;
lin momentary_A = longA "momentary" ;
lin momentous_A = longA "momentous" ;
lin momentum_N = regN "momentum" ;
lin monday_PN = regPN "monday" ;
lin money_N = massN "money" ;
lin monitor_N = regN "monitor" ;
lin monitor_V2 = prpV2 (regV "monitor") "" ;
lin monkey_N = regN "monkey" ;
lin monotonic_A = longA "monotonic" ;
lin monotonically_Adv = mkAdv "monotonically" ;
lin month_N = regN "month" ;
lin moon_N = regN "moon" ;
lin moral_A = longA "moral" ;
lin moral_N = regN "moral" ;
lin morning_N = regN "morning" ;
lin morpheme_N = regN "morpheme" ;
lin morphology_N = regN "morphology" ;
lin morphosyntactic_A = longA "morphosyntactic" ;
lin mortal_A = longA "mortal" ;
lin mortise_N = regN "mortise" ;
lin mosque_N = regN "mosque" ;
lin mosquito_N = regN "mosquito" ;
lin mostly_Adv = mkAdv "mostly" ;
lin mother_N2of = prepN2 "mother" "of" ;
lin motion_N = regN "motion" ;
lin motivate_V2 = prpV2 (regV "motivate") "" ;
lin motive_N = regN "motive" ;
lin motor_N = regN "motor" ;
lin mould_N = regN "mould" ;
lin mould_V2 = prpV2 (regV "mould") "" ;
lin mountain_N = regN "mountain" ;
lin mouse_N = mk2N "mouse" "mice";
lin mouth_N = regN "mouth" ;
lin move_V = (regV "move") ;
lin mud_N = massN "mud" ;
lin muesli_N = massN "muesli" ;
lin multifarious_A = longA "multifarious" ;
lin multiple_A = longA "multiple" ;
lin multiplicity_N = regN "multiplicity" ;
lin multiply_V3by =dirprepV3 (regV "multiply") "by" ;
lin multitude_N2of = prepN2 "multitude" "of" ;
lin mundane_A = longA "mundane" ;
lin murder_N = regN "murder" ;
lin muscle_N = regN "muscle" ;
lin muscular_A = longA "muscular" ;
lin music_N = massN "music" ;
lin musical_N = regN "musical" ;
lin mutter_V2about = prpV2 (regV "mutter") "about" ;
lin mutual_A = longA "mutual" ;
lin mystery_N = regN "mystery" ;
lin myth_N = regN "myth" ;
lin mythical_A = longA "mythical" ;
lin mythology_N = regN "mythology" ;
lin nail_N = regN "nail" ;
lin naive_A = longA "naive" ;
lin name_N = regN "name" ;
lin name_V2 = prpV2 (regV "name") "" ;
lin namely_Adv = mkAdv "namely" ;
lin narrow_A = regA "narrow" ;
lin narrow_V2 = prpV2 (regV "narrow") "" ;
lin nasty_A = regA "nasty" ;
lin nation_N = regN "nation" ;
lin native_A = longA "native" ;
lin native_N = regN "native" ;
lin nature_N = regN "nature" ;
lin navigate_V = (regV "navigate") ;
lin navigator_N = regN "navigator" ;
lin navy_N = regN "navy" ;
lin near_A = regA "near" ;
lin near_A2to = regA2 "near" "to" ;
lin nearby_Adv = mkAdv "nearby" ;
lin neat_A = regA "neat" ;
lin necessary_A = longA "necessary" ;
lin necessary_A2for = longA2 "necessary" "for" ;
lin necessary_A2to = longA2 "necessary" "to" ;
lin necessitate_V2 = prpV2 (regV "necessitate") "" ;
lin necessity_N = regN "necessity" ;
lin neck_N = regN "neck" ;
lin need_N = regN "need" ;
lin need_V2 = prpV2 (regV "need") "" ;
lin needle_N = regN "needle" ;
lin negate_V2 = prpV2 (regV "negate") "" ;
lin negative_A = longA "negative" ;
lin negative_N = regN "negative" ;
lin neglect_N = regN "neglect" ;
lin neglect_V2 = prpV2 (regV "neglect") "" ;
lin negligence_N = regN "negligence" ;
lin negligent_A = longA "negligent" ;
lin negligible_A = longA "negligible" ;
lin negotiate_V2with = prpV2 (regV "negotiate") "with" ;
lin neighbour_N = regN "neighbour" ;
lin nephew_N2of = prepN2 "nephew" "of" ;
lin nerve_N = regN "nerve" ;
lin nervous_A = longA "nervous" ;
lin nest_N = regN "nest" ;
lin nest_V2in = prpV2 (regV "nest") "in" ;
lin net_N = regN "net" ;
lin network_N = regN "network" ;
lin neutral_A = longA "neutral" ;
lin never_Adv = mkAdv "never" ;
lin nevertheless_Adv = mkAdv "nevertheless" ;
lin new_A = regA "new" ;
lin news_N = regN "news" ;
lin newspaper_N = regN "newspaper" ;
lin newton_PN = regPN "newton" ;
lin next_A = longA "next" ;
lin nibble_V2 = prpV2 (regV "nibble") "" ;
lin nice_A = regA "nice" ;
lin nicety_N = regN "nicety" ;
lin nigeria_PN = regPN "nigeria" ;
lin night_N = regN "night" ;
lin nip_V2 = prpV2 (regV "nip") "" ;
lin noble_A = regA "noble" ;
lin nobleman_N = irregN "nobleman" "noblemen" ;
lin nod_V2 = prpV2 (regV "nod") "" ;
lin nod_V = (regV "nod") ;
lin node_N = regN "node" ;
lin noise_N = regN "noise" ;
lin nominal_A = longA "nominal" ;
lin nominate_V2 = prpV2 (regV "nominate") "" ;
lin nominative_A = longA "nominative" ;
lin nonetheless_Adv = mkAdv "nonetheless" ;
lin nonsense_N = regN "nonsense" ;
lin nonsensical_A = longA "nonsensical" ;
lin normal_A = longA "normal" ;
lin normative_A = longA "normative" ;
lin north_N = massN "north" ;
lin north_A = longA "north" ;
lin north_A2of = longA2 "north" "of" ;
lin northern_A = longA "northern" ;
lin nose_N = regN "nose" ;
--lin not_Adv = mkAdv "not" ;
lin notation_N = regN "notation" ;
lin note_N = regN "note" ;
lin note_VS = mkVS (regV "note") ;
lin notice_N = regN "notice" ;
lin notice_V2 = prpV2 (regV "notice") "" ;
lin notice_VS = mkVS (regV "notice") ;
lin notion_N = regN "notion" ;
lin notoriety_N = massN "notoriety" ;
lin notorious_A = longA "notorious" ;
lin notorious_A2for = longA2 "notorious" "for" ;
lin noun_N = regN "noun" ;
lin novel_A = longA "novel" ;
lin novel_N = regN "novel" ;
lin novelty_N = regN "novelty" ;
lin november_PN = regPN "november" ;
lin novice_N = regN "novice" ;
lin now_Adv = mkAdv "now" ;
---- lin now_Adv = mkAdv "now" ;
lin nowhere_Adv = mkAdv "nowhere" ;
lin nuclear_A = regA "nuclear" ;
lin nucleus_N = regN "nucleus" ;
lin nudge_N = regN "nudge" ;
lin nudge_V2 = prpV2 (regV "nudge") "" ;
lin nuisance_N = regN "nuisance" ;
lin numeral_N = regN "numeral" ;
lin numeric_A = longA "numeric" ;
lin numerical_A = longA "numerical" ;
lin numerous_A = longA "numerous" ;
lin nurse_N = regN "nurse" ;
lin nurse_V2 = prpV2 (regV "nurse") "" ;
lin nut_N = regN "nut" ;
lin nutrient_N = regN "nutrient" ;
lin nutrition_N = regN "nutrition" ;
lin nutritious_A = longA "nutritious" ;
lin nylon_N = massN "nylon" ;
lin oaf_N = regN "oaf" ;
lin oak_N = regN "oak" ;
lin oar_N = regN "oar" ;
lin oath_N = regN "oath" ;
lin obey_V2 = prpV2 (regV "obey") "" ;
lin object_N = regN "object" ;
lin object_V2to = prpV2 (regV "object") "to" ;
lin objectionable_A = longA "objectionable" ;
lin objective_A = longA "objective" ;
lin objective_N = regN "objective" ;
lin obligation_N = regN "obligation" ;
lin obligatory_A = longA "obligatory" ;
lin obligatory_A2for = longA2 "obligatory" "for" ;
lin oblige_V2 = prpV2 (regV "oblige") "" ;
lin oblique_A = longA "oblique" ;
lin obscure_A = longA "obscure" ;
lin obscure_V2 = prpV2 (regV "obscure") "" ;
lin observe_V2 = prpV2 (regV "observe") "" ;
lin obstacle_N = regN "obstacle" ;
lin obstruct_V2 = prpV2 (regV "obstruct") "" ;
lin obstruction_V = (regV "obstruction") ;
lin obtain_V2 = prpV2 (regV "obtain") "" ;
lin obvious_A = longA "obvious" ;
lin obvious_A2 = longA2 "obvious" "" ;
lin occasion_N = regN "occasion" ;
lin occupation_N = regN "occupation" ;
lin occupy_V2 = prpV2 (regV "occupy") "" ;
lin occur_V = (regV "occur") ;
lin occurrence_V = (regV "occurrence") ;
lin ocean_N = regN "ocean" ;
lin october_PN = regPN "october" ;
lin odd_A = regA "odd" ;
lin of_Prep = mkPrep "of" ;
lin off_Prep = mkPrep "off" ;
lin offence_N2against = prepN2 "offence" "against" ;
lin offend_V2 = prpV2 (regV "offend") "" ;
lin offense_N2against = prepN2 "offense" "against" ;
lin offensive_A = longA "offensive" ;
lin offer_VV = mkVV (regV "offer") ;
lin offer_N2 = prepN2 "offer" "" ;
lin office_N = regN "office" ;
lin officer_N = regN "officer" ;
lin official_N = regN "official" ;
lin offset_V2 = prpV2 (regV "offset") "" ;
lin often_Adv = mkAdv "often" ;
lin oil_N = massN "oil" ;
lin oil_V2 = prpV2 (regV "oil") "" ;
lin old_A = regA "old" ;
lin omission_N = regN "omission" ;
lin omit_V2 = prpV2 (regV "omit") "" ;
lin omniscient_A = longA "omniscient" ;
--lin on_Prep = mkPrep "on" ;
lin once_Adv = mkAdv "once" ;
lin onerous_A = longA "onerous" ;
lin onion_N = regN "onion" ;
-- lin only_Adv = mkAdv "only" ;
lin only_A = longA "only" ;
lin onto_Prep = mkPrep "onto" ;
lin ontology_N = regN "ontology" ;
lin opacity_N = massN "opacity" ;
lin opaque_A = longA "opaque" ;
lin open_A = longA "open" ;
lin open_V = (regV "open") ;
lin opening_N = regN "opening" ;
lin operand_N = regN "operand" ;
lin operate_V2 = prpV2 (regV "operate") "" ;
lin operation_N2on = prepN2 "operation" "on" ;
lin operator_N = regN "operator" ;
lin opinion_N = regN "opinion" ;
lin opponent_N = regN "opponent" ;
lin opportune_A = longA "opportune" ;
lin opportunistic_A = longA "opportunistic" ;
lin opportunity_N = regN "opportunity" ;
lin oppose_V2 = prpV2 (regV "oppose") "" ;
lin opposite_A = longA "opposite" ;
lin opposition_N2to = prepN2 "opposition" "to" ;
lin optimal_A = longA "optimal" ;
lin optimism_N = massN "optimism" ;
lin optimist_N = regN "optimist" ;
lin optimize_V2 = prpV2 (regV "optimize") "" ;
lin optimum_V = (regV "optimum") ;
lin option_N = regN "option" ;
lin oral_A = regA "oral" ;
lin orange_A = longA "orange" ;
lin orange_N = regN "orange" ;
lin order_N = regN "order" ;
lin order_V2 = prpV2 (regV "order") "" ;
lin order_V2 = prpV2 (regV "order") "" ;
lin ordering_N = regN "ordering" ;
lin orderly_A = longA "orderly" ;
lin ordinary_A = longA "ordinary" ;
lin ore_N = regN "ore" ;
lin organ_N = regN "organ" ;
lin organic_A = longA "organic" ;
lin organically_Adv = mkAdv "organically" ;
lin organization_N = regN "organization" ;
lin organize_V2 = prpV2 (regV "organize") "" ;
lin orient_N = regN "orient" ;
lin orient_V2 = prpV2 (regV "orient") "" ;
lin origin_N = regN "origin" ;
lin original_A = longA "original" ;
lin original_N = regN "original" ;
lin originate_V = (regV "originate") ;
lin orthography_N = massN "orthography" ;
lin ostensible_A = longA "ostensible" ;
lin ostensive_A = longA "ostensive" ;
lin ostentation_N = massN "ostentation" ;
lin ostentatious_A = longA "ostentatious" ;
lin other_A = longA "other" ;
lin other_N = regN "other" ;
lin otherwise_Adv = mkAdv "otherwise" ;
lin outdated_A = longA "outdated" ;
lin outdoor_A = longA "outdoor" ;
lin outdoors_N = massN "outdoors" ;
lin outer_A = longA "outer" ;
lin outlaw_N = regN "outlaw" ;
lin outlaw_V2 = prpV2 (regV "outlaw") "" ;
lin outline_N = regN "outline" ;
lin outline_V2 = prpV2 (regV "outline") "" ;
lin outrage_N = regN "outrage" ;
lin outrage_V2 = prpV2 (regV "outrage") "" ;
lin outside_Adv = mkAdv "outside" ;
lin outside_N = regN "outside" ;
lin outside_Prep = mkPrep "outside" ;
lin outstanding_A = longA "outstanding" ;
lin over_N = regN "over" ;
lin over_Prep = mkPrep "over" ;
lin overflow_N = regN "overflow" ;
lin overflow_V2 = prpV2 (regV "overflow") "" ;
lin overflow_V = (regV "overflow") ;
lin overlap_V = (regV "overlap") ;
lin overt_A = longA "overt" ;
lin overture_N = regN "overture" ;
lin overwhelm_V2 = prpV2 (regV "overwhelm") "" ;
lin owe_V3 = dirdirV3 (regV "owe") ;
lin own_A = longA "own" ;
lin own_V2 = prpV2 (regV "own") "" ;
lin ox_N = irregN "ox" "ox" ;
lin oxford_PN = regPN "oxford" ;
lin oxygen_N = massN "oxygen" ;
lin pace_N = regN "pace" ;
lin pack_V2 = prpV2 (regV "pack") "" ;
lin package_N = regN "package" ;
lin package_V2 = prpV2 (regV "package") "" ;
lin packet_N = regN "packet" ;
lin page_N = regN "page" ;
lin pain_N = regN "pain" ;
lin painstaking_A = longA "painstaking" ;
lin paint_N = massN "paint" ;
lin paint_V2 = prpV2 (regV "paint") "" ;
lin pair_N = regN "pair" ;
lin pair_V3with =dirprepV3 (regV "pair") "with" ;
lin palace_N = regN "palace" ;
lin pale_A = regA "pale" ;
lin pamper_V2 = prpV2 (regV "pamper") "" ;
lin pamphlet_N = regN "pamphlet" ;
lin pan_N = regN "pan" ;
lin panacea_N = regN "panacea" ;
lin pane_N = regN "pane" ;
lin panel_N = regN "panel" ;
lin panelling_N = regN "panelling" ;
lin panic_V = (regV "panic") ;
lin panic_N = regN "panic" ;
lin pantry_N = regN "pantry" ;
lin paper_N = regN "paper" ;
lin paper_V2 = prpV2 (regV "paper") "" ;
lin paradigm_N = regN "paradigm" ;
lin paradox_N = regN "paradox" ;
lin paragraph_N = regN "paragraph" ;
lin parallel_N = regN "parallel" ;
lin parallel_V2 = prpV2 (regV "parallel") "" ;
lin parallel_A = longA "parallel" ;
lin parallel_A2to = longA2 "parallel" "to" ;
lin parameter_N = regN "parameter" ;
lin paraphrase_N = regN "paraphrase" ;
lin paraphrase_V2 = prpV2 (regV "paraphrase") "" ;
lin parasite_N = regN "parasite" ;
lin parasitic_A = longA "parasitic" ;
lin parasol_N = regN "parasol" ;
lin parcel_N = regN "parcel" ;
lin parent_N2of = prepN2 "parent" "of" ;
lin parenthesis_N = irregN "parenthesis" "parenthesis" ;
lin parenthesize_V2 = prpV2 (regV "parenthesize") "" ;
lin parenthetical_A = longA "parenthetical" ;
lin parity_N = regN "parity" ;
lin park_N = regN "park" ;
lin park_V2 = prpV2 (regV "park") "" ;
lin parliament_N = regN "parliament" ;
lin parse_V2 = prpV2 (regV "parse") "" ;
lin parsimony_N = regN "parsimony" ;
lin part_N = regN "part" ;
lin participant_N = regN "participant" ;
lin participate_V2in = prpV2 (regV "participate") "in" ;
lin particle_N = regN "particle" ;
lin particular_A = longA "particular" ;
lin partition_N = regN "partition" ;
lin partition_V2 = prpV2 (regV "partition") "" ;
lin partly_Adv = mkAdv "partly" ;
lin partner_N = regN "partner" ;
lin party_N = regN "party" ;
lin pass_V3to =dirprepV3 (regV "pass") "to" ;
lin passage_N = regN "passage" ;
lin passenger_N = regN "passenger" ;
lin passion_N = regN "passion" ;
lin passionate_A = longA "passionate" ;
lin passive_A = longA "passive" ;
lin past_A = longA "past" ;
lin past_N = regN "past" ;
lin paste_N = regN "paste" ;
lin paste_V3to =dirprepV3 (regV "paste") "to" ;
lin pastry_N = massN "pastry" ;
lin pasty_N = regN "pasty" ;
lin pat_V2 = prpV2 (regV "pat") "" ;
lin path_N = regN "path" ;
lin pathology_N = regN "pathology" ;
lin patience_N = regN "patience" ;
lin patient_N = regN "patient" ;
lin patient_A = longA "patient" ;
lin patient_A2with = longA2 "patient" "with" ;
lin pattern_N = regN "pattern" ;
lin paucity_N2of = prepN2 "paucity" "of" ;
lin pause_V = (regV "pause") ;
lin pause_N = regN "pause" ;
lin pay_N = regN "pay" ;
lin pay_V2for = prpV2 pay_V "for" ;
lin pea_N = regN "pea" ;
lin peace_N = massN "peace" ;
lin peak_N = regN "peak" ;
lin pear_N = regN "pear" ;
lin peculiar_A = longA "peculiar" ;
lin peculiar_A2to = longA2 "peculiar" "to" ;
lin pedagogical_A = longA "pedagogical" ;
lin pedant_N = regN "pedant" ;
lin pedantic_A = longA "pedantic" ;
lin pedantically_A = longA "pedantically" ;
lin pelvic_A = longA "pelvic" ;
lin pelvis_N = regN "pelvis" ;
lin pen_N = regN "pen" ;
lin penal_A = longA "penal" ;
lin penalize_V2 = prpV2 (regV "penalize") "" ;
lin penalty_N = regN "penalty" ;
lin pencil_N = regN "pencil" ;
lin pending_A = longA "pending" ;
lin penetrate_V2 = prpV2 (regV "penetrate") "" ;
lin penny_N = regN "penny" ;
lin people_N = regN "people" ;
lin pepper_N = massN "pepper" ;
lin perceive_V2 = prpV2 (regV "perceive") "" ;
lin perception_N = regN "perception" ;
lin perceptive_A = longA "perceptive" ;
lin perceptual_A = longA "perceptual" ;
lin percolate_V = (regV "percolate") ;
lin percolator_N = regN "percolator" ;
lin peremptory_A = longA "peremptory" ;
lin perfect_A = longA "perfect" ;
lin perform_V = (regV "perform") ;
lin perhaps_Adv = mkAdv "perhaps" ;
lin period_N = regN "period" ;
lin peripheral_A = longA "peripheral" ;
lin periphery_N = regN "periphery" ;
lin perjure_V2 = prpV2 (regV "perjure") "" ;
lin permanent_A = longA "permanent" ;
lin permissible_A = longA "permissible" ;
lin permission_N = regN "permission" ;
lin permissive_A = longA "permissive" ;
lin permit_N = regN "permit" ;
lin permit_V2 = prpV2 (regV "permit") "" ;
lin permute_V2 = prpV2 (regV "permute") "" ;
lin perpetual_A = longA "perpetual" ;
lin perpetuate_V2 = prpV2 (regV "perpetuate") "" ;
lin perpetuity_N = regN "perpetuity" ;
lin persimmon_N = regN "persimmon" ;
lin persist_V = (regV "persist") ;
lin persistence_N = regN "persistence" ;
lin persistent_A = longA "persistent" ;
lin person_N = mkN "person" (variants { "persons"; "people"});
lin personal_A = longA "personal" ;
lin perspective_N = regN "perspective" ;
lin perspicuous_A = longA "perspicuous" ;
lin persuade_V3 =dirprepV3 (regV "persuade") "" ;
lin persuade_V2 = prpV2 (regV "persuade") "" ;
lin persuasion_N = regN "persuasion" ;
lin persuasive_A = longA "persuasive" ;
lin perverse_A = longA "perverse" ;
lin perversion_N = regN "perversion" ;
lin pervert_N = regN "pervert" ;
lin pervert_V2 = prpV2 (regV "pervert") "" ;
lin pet_N = regN "pet" ;
lin petrol_N = massN "petrol" ;
lin phase_N = regN "phase" ;
lin phenomenon_N = irregN "phenomenon" "phenomenon" ;
lin philosopher_N = regN "philosopher" ;
lin philosophy_N = regN "philosophy" ;
lin phone_N = regN "phone" ;
lin phone_V2 = prpV2 (regV "phone") "" ;
lin phonemic_A = longA "phonemic" ;
lin phonetic_A = longA "phonetic" ;
lin phonetically_Adv = mkAdv "phonetically" ;
lin phonology_N = massN "phonology" ;
lin phonotactic_A = longA "phonotactic" ;
lin photo_N = regN "photo" ;
lin photograph_N = regN "photograph" ;
lin photograph_V2 = prpV2 (regV "photograph") "" ;
lin photography_N = massN "photography" ;
lin phrase_N = regN "phrase" ;
lin physical_A = longA "physical" ;
lin physician_N = regN "physician" ;
lin physics_N = regN "physics" ;
lin pianist_N = regN "pianist" ;
lin piano_N = regN "piano" ;
lin pick_N = regN "pick" ;
lin pick_V2 = prpV2 (regV "pick") "" ;
lin pick_V3 =dirprepV3 (regV "pick") "" ;
lin picnic_N = regN "picnic" ;
lin picnic_V = (regV "picnic") ;
lin picture_N = regN "picture" ;
lin picture_V2 = prpV2 (regV "picture") "" ;
lin piece_N = regN "piece" ;
lin pierce_V2 = prpV2 (regV "pierce") "" ;
lin pig_N = regN "pig" ;
lin pigeon_N = regN "pigeon" ;
lin pilchard_N = regN "pilchard" ;
lin pile_N = regN "pile" ;
lin pilfer_V2 = prpV2 (regV "pilfer") "" ;
lin pill_N = regN "pill" ;
lin pillar_N = regN "pillar" ;
lin pillow_N = regN "pillow" ;
lin pilot_N = regN "pilot" ;
lin pilot_V2 = prpV2 (regV "pilot") "" ;
lin pin_N = regN "pin" ;
lin pin_V3to =dirprepV3 (regV "pin") "to" ;
lin pink_A = regA "pink" ;
lin pipe_N = regN "pipe" ;
lin pistol_N = regN "pistol" ;
lin pit_N = regN "pit" ;
lin pitch_N = regN "pitch" ;
lin pitch_V2 = prpV2 (regV "pitch") "" ;
lin pitchfork_N = regN "pitchfork" ;
lin pith_N = regN "pith" ;
lin pity_V2 = prpV2 (regV "pity") "" ;
lin pity_N = regN "pity" ;
lin place_N = regN "place" ;
lin place_V2 = prpV2 (regV "place") "" ;
lin place_V3in =dirprepV3 (regV "place") "in" ;
lin plague_N = regN "plague" ;
lin plague_V2 = prpV2 (regV "plague") "" ;
lin plain_A = regA "plain" ;
lin plain_N = regN "plain" ;
lin plan_VV = mkVV (regV "plan") ;
lin plan_N2 = prepN2 "plan" "" ;
lin planar_A = longA "planar" ;
lin plane_N = regN "plane" ;
lin planet_N = regN "planet" ;
lin plant_N = regN "plant" ;
lin plastic_A = longA "plastic" ;
lin plastic_N = massN "plastic" ;
lin plate_N = regN "plate" ;
lin plateau_N = regN "plateau" ;
lin platypus_N = regN "platypus" ;
lin plausible_A = longA "plausible" ;
lin play_N = regN "play" ;
lin play_V2 = prpV2 (regV "play") "" ;
lin play_V = (regV "play") ;
lin play_V2with = prpV2 (regV "play") "with" ;
lin pleasant_A = longA "pleasant" ;
lin please_V2 = prpV2 (regV "please") "" ;
lin pleasure_N = regN "pleasure" ;
lin pledge_N = regN "pledge" ;
lin pledge_VS = mkVS (regV "pledge") ;
lin plenty_N = massN "plenty" ;
lin plot_N = regN "plot" ;
lin plot_V = (regV "plot") ;
lin plug_N = regN "plug" ;
lin plum_N = regN "plum" ;
lin plumber_N = regN "plumber" ;
lin plume_N = regN "plume" ;
lin plummet_V = (regV "plummet") ;
lin plump_A = regA "plump" ;
lin plunge_V = (regV "plunge") ;
lin plural_A = longA "plural" ;
lin plural_N = regN "plural" ;
lin pocket_N = regN "pocket" ;
lin pocket_V2 = prpV2 (regV "pocket") "" ;
lin poem_N = regN "poem" ;
lin poet_N = regN "poet" ;
lin poetry_N = massN "poetry" ;
lin point_N = regN "point" ;
lin point_V2to = prpV2 (regV "point") "to" ;
lin poison_N = regN "poison" ;
lin poison_V2 = prpV2 (regV "poison") "" ;
lin poland_PN = regPN "poland" ;
lin polar_A = longA "polar" ;
lin pole_N = regN "pole" ;
lin policeman_N = irregN "policeman" "policemen" ;
lin policy_N = regN "policy" ;
lin polish_A = longA "polish" ;
lin polish_N = regN "polish" ;
lin polish_V2 = prpV2 (regV "polish") "" ;
lin polite_A = longA "polite" ;
lin polite_A2to = longA2 "polite" "to" ;
lin political_A = longA "political" ;
lin politician_N = regN "politician" ;
lin politics_N = irregN "politics" "politics" ;
lin pollute_V2 = prpV2 (regV "pollute") "" ;
lin ponder_V = (regV "ponder") ;
lin pool_N = regN "pool" ;
lin poor_A = regA "poor" ;
lin pop_N = regN "pop" ;
lin popular_A = longA "popular" ;
lin popular_A2with = longA2 "popular" "with" ;
lin populated_A = longA "populated" ;
lin populated_A2by = longA2 "populated" "by" ;
lin population_N = regN "population" ;
lin porcupine_N = regN "porcupine" ;
lin pore_N = regN "pore" ;
lin pore_V2over = prpV2 (regV "pore") "over" ;
lin pork_N = massN "pork" ;
lin porosity_N = regN "porosity" ;
lin porous_A = longA "porous" ;
lin porpoise_N = regN "porpoise" ;
lin port_N = regN "port" ;
lin portable_A = longA "portable" ;
lin portion_N = regN "portion" ;
lin pose_N = regN "pose" ;
lin pose_V2 = prpV2 (regV "pose") "" ;
lin position_N = regN "position" ;
lin positive_A = longA "positive" ;
lin positive_A2 = longA2 "positive" "" ;
lin positively_Adv = mkAdv "positively" ;
lin possess_V2 = prpV2 (regV "possess") "" ;
lin possession_N = regN "possession" ;
lin possible_A2 = longA2 "possible" "" ;
lin possible_A = longA "possible" ;
lin possible_A2 = longA2 "possible" "" ;
lin post_N = regN "post" ;
lin post_V3to =dirprepV3 (regV "post") "to" ;
lin posterior_A = longA "posterior" ;
lin postman_N = irregN "postman" "postmen" ;
lin postpone_V2 = prpV2 (regV "postpone") "" ;
lin postulate_V2 = prpV2 (regV "postulate") "" ;
lin pot_N = regN "pot" ;
lin potato_N = regN "potato" ;
lin potency_N = regN "potency" ;
lin potent_A = longA "potent" ;
lin potential_A = longA "potential" ;
lin pound_N = regN "pound" ;
lin pound_V2 = prpV2 (regV "pound") "" ;
lin pour_V3loc =dirprepV3 (regV "pour") "loc" ;
lin powder_N = regN "powder" ;
lin power_N = regN "power" ;
lin power_V2 = prpV2 (regV "power") "" ;
lin practical_A = longA "practical" ;
lin practice_N = regN "practice" ;
lin practise_V2 = prpV2 (regV "practise") "" ;
lin practitioner_N = regN "practitioner" ;
lin pragmatic_A = longA "pragmatic" ;
lin pragmatically_Adv = mkAdv "pragmatically" ;
lin pragmatics_N = irregN "pragmatics" "pragmatics" ;
lin praise_N = regN "praise" ;
lin praise_V2 = prpV2 (regV "praise") "" ;
lin pray_V2to = prpV2 (regV "pray") "to" ;
lin prayer_N = regN "prayer" ;
lin precarious_A = longA "precarious" ;
lin precede_V2 = prpV2 (regV "precede") "" ;
lin precedence_N = regN "precedence" ;
lin precedent_N = regN "precedent" ;
lin precious_A = longA "precious" ;
lin precise_A = longA "precise" ;
lin precision_N = regN "precision" ;
lin preclude_V2 = prpV2 (regV "preclude") "" ;
lin precursor_N = regN "precursor" ;
lin predecessor_N = regN "predecessor" ;
lin predicate_N = regN "predicate" ;
lin predicate_V2 = prpV2 (regV "predicate") "" ;
lin predict_V2 = prpV2 (regV "predict") "" ;
lin predilection_N2for = prepN2 "predilection" "for" ;
lin preface_N = regN "preface" ;
lin prefer_V3to =dirprepV3 (regV "prefer") "to" ;
lin prefer_V2 = prpV2 (regV "prefer") "" ;
lin prefer_VV = mkVV (regV "prefer") ;
lin prefer_V2 = prpV2 (regV "prefer") "" ;
lin preference_N = regN "preference" ;
lin pregnancy_N = regN "pregnancy" ;
lin pregnant_A = longA "pregnant" ;
lin prejudice_N = regN "prejudice" ;
lin prejudiced_A = longA "prejudiced" ;
lin preliminary_A = longA "preliminary" ;
lin premise_N = regN "premise" ;
lin preoccupation_N2with = prepN2 "preoccupation" "with" ;
lin preoccupied_A2with = longA2 "preoccupied" "with" ;
lin preoccupy_V2 = prpV2 (regV "preoccupy") "" ;
lin prepare_V3for =dirprepV3 (regV "prepare") "for" ;
lin preposition_N = regN "preposition" ;
lin prerequisite_N = regN "prerequisite" ;
lin prescribe_V2 = prpV2 (regV "prescribe") "" ;
lin prescription_N = regN "prescription" ;
lin prescriptive_A = longA "prescriptive" ;
lin presence_N = regN "presence" ;
lin present_A = longA "present" ;
lin present_N = regN "present" ;
lin present_V3with =dirprepV3 (regV "present") "with" ;
lin preserve_V3from =dirprepV3 (regV "preserve") "from" ;
lin preside_V = (regV "preside") ;
lin presidency_N = regN "presidency" ;
lin president_N = regN "president" ;
lin press_V2 = prpV2 (regV "press") "" ;
lin pressure_N = regN "pressure" ;
lin prestige_N = regN "prestige" ;
lin presume_VS = mkVS (regV "presume") ;
lin presumption_N = regN "presumption" ;
lin presumptuous_A = longA "presumptuous" ;
lin presuppose_VS = mkVS (regV "presuppose") ;
lin presupposition_N2 = prepN2 "presupposition" "" ;
lin pretence_N2 = prepN2 "pretence" "" ;
lin pretend_VS = mkVS (regV "pretend") ;
lin pretty_A = regA "pretty" ;
lin prevent_V2 = prpV2 (regV "prevent") "" ;
lin previous_A = longA "previous" ;
lin price_N = regN "price" ;
lin prick_V = (regV "prick") ;
lin prickle_N = regN "prickle" ;
lin pride_N = regN "pride" ;
lin priest_N = regN "priest" ;
lin prim_A = regA "prim" ;
lin primary_A = longA "primary" ;
lin primitive_A = longA "primitive" ;
lin prince_N = regN "prince" ;
lin principal_A = longA "principal" ;
lin principle_N = regN "principle" ;
lin principled_A = longA "principled" ;
lin print_V2 = prpV2 (regV "print") "" ;
lin prior_N = regN "prior" ;
lin prior_A = longA "prior" ;
lin prior_A2to = longA2 "prior" "to" ;
lin priority_N = regN "priority" ;
lin prison_N = regN "prison" ;
lin privacy_N = regN "privacy" ;
lin private_A = longA "private" ;
lin privilege_N = regN "privilege" ;
lin prize_N = regN "prize" ;
lin probability_N2 = prepN2 "probability" "" ;
lin probable_A = longA "probable" ;
lin probable_A2 = longA2 "probable" "" ;
lin probe_N = regN "probe" ;
lin probe_V2 = prpV2 (regV "probe") "" ;
lin problem_N = regN "problem" ;
lin problematic_A = longA "problematic" ;
lin procedure_N = regN "procedure" ;
lin proceed_V = (regV "proceed") ;
lin process_N = regN "process" ;
lin process_V2 = prpV2 (regV "process") "" ;
lin procession_N = regN "procession" ;
lin processor_N = regN "processor" ;
lin produce_N = regN "produce" ;
lin produce_V2 = prpV2 (regV "produce") "" ;
lin product_N = regN "product" ;
lin profession_N = regN "profession" ;
lin professor_N = regN "professor" ;
lin proficiency_N2in = prepN2 "proficiency" "in" ;
lin proficient_A2in = longA2 "proficient" "in" ;
lin profit_N = regN "profit" ;
lin profitable_A = longA "profitable" ;
lin profound_A = longA "profound" ;
lin profundity_N = regN "profundity" ;
lin profuse_A = longA "profuse" ;
lin profusion_N2of = prepN2 "profusion" "of" ;
lin prognosis_N = regN "prognosis" ;
lin program_N = regN "program" ;
lin program_V = (regV "program") ;
lin programme_N = regN "programme" ;
lin progress_V2of = prpV2 (regV "progress") "of" ;
lin progress_N = regN "progress" ;
lin prohibit_V2 = prpV2 (regV "prohibit") "" ;
lin project_N = regN "project" ;
lin project_V = (regV "project") ;
lin proliferate_V = (regV "proliferate") ;
lin prolong_V2 = prpV2 (regV "prolong") "" ;
lin prominence_N = regN "prominence" ;
lin prominent_A = longA "prominent" ;
lin promise_V2 = prpV2 (regV "promise") "" ;
lin promote_V2 = prpV2 (regV "promote") "" ;
lin prompt_A = regA "prompt" ;
lin prompt_N = regN "prompt" ;
lin prompt_V2 = prpV2 (regV "prompt") "" ;
lin promulgate_V2 = prpV2 (regV "promulgate") "" ;
lin prone_A = longA "prone" ;
lin prone_A2to = longA2 "prone" "to" ;
lin pronominal_A = longA "pronominal" ;
lin pronoun_N = regN "pronoun" ;
lin pronounce_V2 = prpV2 (regV "pronounce") "" ;
lin pronunciation_N = regN "pronunciation" ;
lin proof_N2 = prepN2 "proof" "" ;
lin propagate_V = (regV "propagate") ;
lin propensity_N2for = prepN2 "propensity" "for" ;
lin proper_A = longA "proper" ;
lin property_N = regN "property" ;
lin proponent_N = regN "proponent" ;
lin proportion_N = regN "proportion" ;
lin propose_V2 = prpV2 (regV "propose") "" ;
lin propose_VV = mkVV (regV "propose") ;
lin proposition_N = regN "proposition" ;
lin prose_N = massN "prose" ;
lin prosody_N = regN "prosody" ;
lin prospect_N2 = prepN2 "prospect" "" ;
lin prospect_V2for = prpV2 (regV "prospect") "for" ;
lin prospective_A = longA "prospective" ;
lin prospector_N = regN "prospector" ;
lin protect_V3from =dirprepV3 (regV "protect") "from" ;
lin protest_N = regN "protest" ;
lin protest_V2against = prpV2 (regV "protest") "against" ;
lin protocol_N = regN "protocol" ;
lin prototype_N = regN "prototype" ;
lin proud_A = regA "proud" ;
lin proud_A2of = regA2 "proud" "of" ;
lin prove_VS = mkVS (regV "prove") ;
lin proven_A = longA "proven" ;
lin provide_V3for =dirprepV3 (regV "provide") "for" ;
lin provision_N = regN "provision" ;
lin prune_N = regN "prune" ;
lin prune_V2 = prpV2 (regV "prune") "" ;
lin psychology_N = regN "psychology" ;
lin pub_N = regN "pub" ;
lin public_A = longA "public" ;
lin public_N = regN "public" ;
lin publication_N = regN "publication" ;
lin publicity_N = regN "publicity" ;
lin publish_V2 = prpV2 (regV "publish") "" ;
lin pull_V2 = prpV2 (regV "pull") "" ;
lin pulley_N = regN "pulley" ;
lin pulpit_N = regN "pulpit" ;
lin pump_N = regN "pump" ;
lin punch_N = regN "punch" ;
lin punch_V2 = prpV2 (regV "punch") "" ;
lin punctual_A = longA "punctual" ;
lin punctuate_V2 = prpV2 (regV "punctuate") "" ;
lin punish_V2 = prpV2 (regV "punish") "" ;
lin punitive_A = longA "punitive" ;
lin pupil_N = regN "pupil" ;
lin purchase_V = (regV "purchase") ;
lin pure_A = regA "pure" ;
lin purge_N = regN "purge" ;
lin purple_A = regA "purple" ;
lin purpose_N = regN "purpose" ;
lin purse_N = regN "purse" ;
lin pursue_V2 = prpV2 (regV "pursue") "" ;
lin pursuit_N = regN "pursuit" ;
lin purveyor_N = regN "purveyor" ;
lin push_V2 = prpV2 (regV "push") "" ;
lin put_V3loc =dirprepV3 put_V "loc" ;
lin puzzle_N = regN "puzzle" ;
lin puzzle_V2 = prpV2 (regV "puzzle") "" ;
lin pyramid_N = regN "pyramid" ;
lin quadruple_N = regN "quadruple" ;
lin quail_N = regN "quail" ;
lin qualify_V2for = prpV2 (regV "qualify") "for" ;
lin qualitative_A = longA "qualitative" ;
lin quality_N = regN "quality" ;
lin quantify_V2 = prpV2 (regV "quantify") "" ;
lin quantitative_A = longA "quantitative" ;
lin quarrel_N2with = prepN2 "quarrel" "with" ;
lin quarter_N = regN "quarter" ;
lin quartet_N = regN "quartet" ;
lin queen_N = regN "queen" ;
lin queer_A = regA "queer" ;
lin query_N = regN "query" ;
lin query_V2 = prpV2 (regV "query") "" ;
lin quest_N = regN "quest" ;
lin question_N = regN "question" ;
lin question_V2 = prpV2 (regV "question") "" ;
lin quibble_V2about = prpV2 (regV "quibble") "about" ;
lin quick_A = regA "quick" ;
lin quiet_A = regA "quiet" ;
lin quiet_N = regN "quiet" ;
lin quilt_N = regN "quilt" ;
lin quit_V2 = prpV2 (regV "quit") "" ;
--lin quite_Adv = mkAdv "quite" ;
lin quiz_N = irregN "quiz" "quiz" ;
lin quote_V2 = prpV2 (regV "quote") "" ;
lin rabbit_N = regN "rabbit" ;
lin rabid_A = longA "rabid" ;
lin rabies_N = regN "rabies" ;
lin race_N = regN "race" ;
lin race_V2 = prpV2 (regV "race") "" ;
lin rack_N = regN "rack" ;
lin radar_N = regN "radar" ;
lin radical_A = longA "radical" ;
lin radio_N = regN "radio" ;
lin radish_N = regN "radish" ;
lin radius_N = irregN "radius" "radius" ;
lin rage_N = regN "rage" ;
lin raid_V2 = prpV2 (regV "raid") "" ;
lin rail_N = regN "rail" ;
lin railway_N = regN "railway" ;
lin rain_V = (regV "rain") ;
lin rain_N = regN "rain" ;
lin raise_V2 = prpV2 (regV "raise") "" ;
lin raisin_N = regN "raisin" ;
lin random_A = longA "random" ;
lin range_N = regN "range" ;
lin range_V2over = prpV2 (regV "range") "over" ;
lin rank_N = regN "rank" ;
lin rank_V2 = prpV2 (regV "rank") "" ;
lin rapid_A = longA "rapid" ;
lin rare_A = regA "rare" ;
lin rat_N = regN "rat" ;
lin rate_N = regN "rate" ;
lin rather_Adv = mkAdv "rather" ;
lin ratio_N = regN "ratio" ;
lin ration_N = regN "ration" ;
lin ration_V2 = prpV2 (regV "ration") "" ;
lin rational_A = longA "rational" ;
lin rationale_N = regN "rationale" ;
lin raw_A = regA "raw" ;
lin ray_N = regN "ray" ;
lin razor_N = regN "razor" ;
lin reach_V2 = prpV2 (regV "reach") "" ;
lin read_V2 = prpV2 read_V "" ;
lin ready_A = regA "ready" ;
lin ready_A2for = regA2 "ready" "for" ;
lin real_A = longA "real" ;
lin realist_N = regN "realist" ;
lin realistic_A = longA "realistic" ;
lin realistically_Adv = mkAdv "realistically" ;
lin realize_VS = mkVS (regV "realize") ;
lin realm_N = regN "realm" ;
lin rear_A = longA "rear" ;
lin rear_N = regN "rear" ;
lin reason_V = (regV "reason") ;
lin reason_N2for = prepN2 "reason" "for" ;
lin reasonable_A = longA "reasonable" ;
lin rebut_V2 = prpV2 (regV "rebut") "" ;
lin recapitulate_V2 = prpV2 (regV "recapitulate") "" ;
lin recede_V = (regV "recede") ;
lin receipt_N = regN "receipt" ;
lin receive_V3from =dirprepV3 (regV "receive") "from" ;
lin recency_N = regN "recency" ;
lin recent_A = longA "recent" ;
lin reception_N = regN "reception" ;
lin recession_N = regN "recession" ;
lin recipe_N = regN "recipe" ;
lin recipient_N = regN "recipient" ;
lin reciprocal_A = longA "reciprocal" ;
lin reciprocate_V = (regV "reciprocate") ;
lin recite_V2 = prpV2 (regV "recite") "" ;
lin recognise_V2 = prpV2 (regV "recognise") "" ;
lin recognition_N = regN "recognition" ;
lin recognize_V2 = prpV2 (regV "recognize") "" ;
lin recommend_V2 = prpV2 (regV "recommend") "" ;
lin reconcile_V2 = prpV2 (regV "reconcile") "" ;
lin record_N = regN "record" ;
lin record_V2 = prpV2 (regV "record") "" ;
lin recourse_N2to = prepN2 "recourse" "to" ;
lin recover_V = (regV "recover") ;
lin recovery_N = regN "recovery" ;
lin rectify_V2 = prpV2 (regV "rectify") "" ;
lin recursion_N = regN "recursion" ;
lin recursive_A = longA "recursive" ;
lin red_A = regA "red" ;
lin redeem_V2 = prpV2 (regV "redeem") "" ;
lin reduce_V2 = prpV2 (regV "reduce") "" ;
lin reducible_A = longA "reducible" ;
lin reducible_A2to = longA2 "reducible" "to" ;
lin redundancy_N = regN "redundancy" ;
lin redundant_A = longA "redundant" ;
lin reed_N = regN "reed" ;
lin refer_V2to = prpV2 (regV "refer") "to" ;
lin reference_N2to = prepN2 "reference" "to" ;
lin referent_N = regN "referent" ;
lin referral_N = regN "referral" ;
lin refine_V2 = prpV2 (regV "refine") "" ;
lin reflect_V2 = prpV2 (regV "reflect") "" ;
lin reflexive_A = longA "reflexive" ;
lin refractor_N = regN "refractor" ;
lin refractory_A = longA "refractory" ;
lin refresh_V2 = prpV2 (regV "refresh") "" ;
lin refuse_N = regN "refuse" ;
lin refuse_VV = mkVV (regV "refuse") ;
lin refute_V2 = prpV2 (regV "refute") "" ;
lin regard_N = regN "regard" ;
lin regard_V3_pred =dirprepV3 (regV "regard") "_pred" ;
lin regime_N = regN "regime" ;
lin regiment_N = regN "regiment" ;
lin regiment_V2 = prpV2 (regV "regiment") "" ;
lin region_N = regN "region" ;
lin regress_V = (regV "regress") ;
lin regular_A = longA "regular" ;
lin regulate_V2 = prpV2 (regV "regulate") "" ;
lin regulation_N = regN "regulation" ;
lin reinforce_V2 = prpV2 (regV "reinforce") "" ;
lin reject_V2 = prpV2 (regV "reject") "" ;
lin rejoice_V = (regV "rejoice") ;
lin relate_V3to =dirprepV3 (regV "relate") "to" ;
lin related_A = longA "related" ;
lin related_A2to = longA2 "related" "to" ;
lin relation_N = regN "relation" ;
lin relative_N = regN "relative" ;
lin relax_V = (regV "relax") ;
lin release_V2 = prpV2 (regV "release") "" ;
lin relegate_V3to =dirprepV3 (regV "relegate") "to" ;
lin relevance_N2to = prepN2 "relevance" "to" ;
lin relevant_A = longA "relevant" ;
lin relevant_A2to = longA2 "relevant" "to" ;
lin reliable_A = longA "reliable" ;
lin relief_N = regN "relief" ;
lin relieve_V2 = prpV2 (regV "relieve") "" ;
lin religion_N = regN "religion" ;
lin religious_A = longA "religious" ;
lin relinquish_V2 = prpV2 (regV "relinquish") "" ;
lin reluctance_N2 = prepN2 "reluctance" "" ;
lin reluctant_A = longA "reluctant" ;
lin reluctant_A2 = longA2 "reluctant" "" ;
lin rely_V2on = prpV2 (regV "rely") "on" ;
lin remain_V = (regV "remain") ;
lin remainder_N = regN "remainder" ;
lin remark_N = regN "remark" ;
lin remedial_A = longA "remedial" ;
lin remedy_N = regN "remedy" ;
lin remedy_V2 = prpV2 (regV "remedy") "" ;
lin remember_VS = mkVS (regV "remember") ;
lin remind_V3 =dirprepV3 (regV "remind") "" ;
lin remind_V2 = prpV2 (regV "remind") "" ;
lin reminder_N = regN "reminder" ;
lin reminiscent_A = longA "reminiscent" ;
lin reminiscent_A2of = longA2 "reminiscent" "of" ;
lin remnant_N = regN "remnant" ;
lin remote_A = regA "remote" ;
lin remove_V3from =dirprepV3 (regV "remove") "from" ;
lin renaissance_N = regN "renaissance" ;
lin render_V3 =dirprepV3 (regV "render") "" ;
lin rendition_N = regN "rendition" ;
lin renew_V2 = prpV2 (regV "renew") "" ;
lin renounce_V2 = prpV2 (regV "renounce") "" ;
lin rent_N = regN "rent" ;
lin rent_V2 = prpV2 (regV "rent") "" ;
lin renunciation_N = regN "renunciation" ;
lin repair_N = regN "repair" ;
lin repair_V2 = prpV2 (regV "repair") "" ;
lin repeat_V2 = prpV2 (regV "repeat") "" ;
lin repercussion_N = regN "repercussion" ;
lin repetition_N = regN "repetition" ;
lin repetitious_A = longA "repetitious" ;
lin repetitive_A = longA "repetitive" ;
lin replace_V2 = prpV2 (regV "replace") "" ;
lin replica_N = regN "replica" ;
lin replicate_V2 = prpV2 (regV "replicate") "" ;
lin reply_N = regN "reply" ;
lin reply_V2to = prpV2 (regV "reply") "to" ;
lin report_N = regN "report" ;
lin report_V2 = prpV2 (regV "report") "" ;
lin report_VS = mkVS (regV "report") ;
lin reprehend_V2 = prpV2 (regV "reprehend") "" ;
lin reprehensible_A = longA "reprehensible" ;
lin represent_V3_pred =dirprepV3 (regV "represent") "_pred" ;
lin representative_A = longA "representative" ;
lin representative_N = regN "representative" ;
lin reprove_V2 = prpV2 (regV "reprove") "" ;
lin reptile_N = regN "reptile" ;
lin republic_N = regN "republic" ;
lin request_V2 = prpV2 (regV "request") "" ;
lin request_N2for = prepN2 "request" "for" ;
lin require_V2 = prpV2 (regV "require") "" ;
lin require_V2_sbse = prpV2 (regV "require") "_sbse" ;
lin requisite_A = longA "requisite" ;
lin rescue_V2 = prpV2 (regV "rescue") "" ;
lin resemble_V2 = prpV2 (regV "resemble") "" ;
lin reset_V2 = prpV2 (regV "reset") "" ;
lin reside_V2 = prpV2 (regV "reside") "" ;
lin residence_N = regN "residence" ;
lin resident_N = regN "resident" ;
lin residue_N = regN "residue" ;
lin resist_V2 = prpV2 (regV "resist") "" ;
lin resistant_A2to = longA2 "resistant" "to" ;
lin resistence_N = regN "resistence" ;
lin resolute_A = longA "resolute" ;
lin resolution_N = regN "resolution" ;
lin resolve_V2 = prpV2 (regV "resolve") "" ;
lin resort_N = regN "resort" ;
lin resort_V2to = prpV2 (regV "resort") "to" ;
lin resource_N = regN "resource" ;
lin respect_N = regN "respect" ;
lin respect_V2 = prpV2 (regV "respect") "" ;
lin respective_A = longA "respective" ;
lin respiration_N = regN "respiration" ;
lin respiratory_A = longA "respiratory" ;
lin respond_V2to = prpV2 (regV "respond") "to" ;
lin response_N2to = prepN2 "response" "to" ;
lin responsible_A = longA "responsible" ;
lin responsible_A2for = longA2 "responsible" "for" ;
lin rest_N = regN "rest" ;
lin rest_V = (regV "rest") ;
lin restaurant_N = regN "restaurant" ;
lin restore_V3to =dirprepV3 (regV "restore") "to" ;
lin restrain_V2 = prpV2 (regV "restrain") "" ;
lin restraint_N = regN "restraint" ;
lin restrict_V2 = prpV2 (regV "restrict") "" ;
lin result_N = regN "result" ;
lin result_V = (regV "result") ;
lin resume_V2 = prpV2 (regV "resume") "" ;
lin resumption_V = (regV "resumption") ;
lin resurgence_N = regN "resurgence" ;
lin resurgent_A = longA "resurgent" ;
lin resurrect_V2 = prpV2 (regV "resurrect") "" ;
lin retain_V2 = prpV2 (regV "retain") "" ;
lin retention_N2 = prepN2 "retention" "" ;
lin retract_V2 = prpV2 (regV "retract") "" ;
lin retrieve_V2 = prpV2 (regV "retrieve") "" ;
lin return_N = regN "return" ;
lin return_V2 = prpV2 (regV "return") "" ;
lin return_V2to = prpV2 (regV "return") "to" ;
lin revamp_V2 = prpV2 (regV "revamp") "" ;
lin reveal_V2 = prpV2 (regV "reveal") "" ;
lin revel_V2in = prpV2 (regV "revel") "in" ;
lin revelation_N = regN "revelation" ;
lin revenge_N = regN "revenge" ;
lin revenue_N = regN "revenue" ;
lin reverse_V2 = prpV2 (regV "reverse") "" ;
lin reverse_N2of = prepN2 "reverse" "of" ;
lin reversible_A = longA "reversible" ;
lin revise_V2 = prpV2 (regV "revise") "" ;
lin revive_V2 = prpV2 (regV "revive") "" ;
lin revocation_N = regN "revocation" ;
lin revoke_V = (regV "revoke") ;
lin revolution_N = regN "revolution" ;
lin revolve_V = (regV "revolve") ;
lin reward_V2 = prpV2 (regV "reward") "" ;
lin reward_N2for = prepN2 "reward" "for" ;
lin rhetoric_N = regN "rhetoric" ;
lin rice_N = regN "rice" ;
lin rich_A = regA "rich" ;
lin rid_V3of =dirprepV3 (regV "rid") "of" ;
lin ride_N = regN "ride" ;
lin ride_V2 = prpV2 (regV "ride") "" ;
lin ridiculous_A = longA "ridiculous" ;
lin right_A = longA "right" ;
lin right_N = regN "right" ;
lin rigid_A = regA "rigid" ;
lin rigorous_A = longA "rigorous" ;
lin rigour_N = regN "rigour" ;
lin ring_N = regN "ring" ;
lin ring_V2 = prpV2 IrregEng.ring_V "" ;
lin ring_V = useV IrregEng.ring_V ;
lin ripe_A = regA "ripe" ;
lin rise_N = regN "rise" ;
lin rise_V = useV IrregEng.rise_V ;
lin risk_N = regN "risk" ;
lin risk_V2 = prpV2 (regV "risk") "" ;
lin rite_N = regN "rite" ;
lin rival_A = longA "rival" ;
lin rival_N = regN "rival" ;
lin rivalry_N = regN "rivalry" ;
lin river_N = regN "river" ;
lin road_N = regN "road" ;
lin roam_V = (regV "roam") ;
lin roast_A = longA "roast" ;
lin roast_V2 = prpV2 (regV "roast") "" ;
lin rob_V2 = prpV2 (regV "rob") "" ;
lin robot_N = regN "robot" ;
lin robust_A = longA "robust" ;
lin rock_N = regN "rock" ;
lin rock_V2 = prpV2 (regV "rock") "" ;
lin rock_V = (regV "rock") ;
lin rod_N = regN "rod" ;
lin role_N = regN "role" ;
lin roll_V = (regV "roll") ;
lin romance_N = regN "romance" ;
lin romantic_A = longA "romantic" ;
lin romantic_N = regN "romantic" ;
lin roof_N = regN "roof" ;
lin room_N = regN "room" ;
lin root_N = regN "root" ;
lin rope_N = regN "rope" ;
lin rose_N = regN "rose" ;
lin rot_V = (regV "rot") ;
lin rotten_A = regA "rotten" ;
lin rough_A = regA "rough" ;
lin round_A = regA "round" ;
lin route_N = regN "route" ;
lin routine_A = longA "routine" ;
lin routine_N = regN "routine" ;
lin row_N = regN "row" ;
lin row_V = (regV "row") ;
lin royal_A = regA "royal" ;
lin royalty_N = massN "royalty" ;
lin rub_V = (regV "rub") ;
lin rubber_N = massN "rubber" ;
lin rubbish_N = regN "rubbish" ;
lin rude_A = regA "rude" ;
lin rude_A2to = regA2 "rude" "to" ;
lin rudimentary_A = longA "rudimentary" ;
lin ruin_N = regN "ruin" ;
lin ruin_V2 = prpV2 (regV "ruin") "" ;
lin rule_N = regN "rule" ;
lin rule_V2 = prpV2 (regV "rule") "" ;
lin ruler_N = regN "ruler" ;
lin rump_N = regN "rump" ;
lin run_N = regN "run" ;
lin run_V = useV IrregEng.run_V ;
lin rush_N = regN "rush" ;
lin russian_A = longA "russian" ;
lin russian_N = regN "russian" ;
lin sabbatical_A = longA "sabbatical" ;
lin sad_A = regA "sad" ;
lin safe_N = regN "safe" ;
lin safe_A = regA "safe" ;
lin safe_A2from = regA2 "safe" "from" ;
lin safety_N = massN "safety" ;
lin sail_N = regN "sail" ;
lin saint_N = regN "saint" ;
lin saintly_A = regA "saintly" ;
lin sake_N = regN "sake" ;
lin salad_N = regN "salad" ;
lin sale_N = regN "sale" ;
lin salient_A = longA "salient" ;
lin saline_A = longA "saline" ;
lin salt_N = regN "salt" ;
lin same_A = longA "same" ;
lin sample_N = regN "sample" ;
lin sanction_N = regN "sanction" ;
lin sanction_V2 = prpV2 (regV "sanction") "" ;
lin sand_N = massN "sand" ;
lin sandy_PN = regPN "sandy" ;
lin sane_A = regA "sane" ;
lin sat_V = (regV "sat") ;
lin sat_V2 = prpV2 (regV "sat") "" ;
lin satanic_A = longA "satanic" ;
lin satisfaction_N = regN "satisfaction" ;
lin satisfactory_A = longA "satisfactory" ;
lin satisfy_V2 = prpV2 (regV "satisfy") "" ;
lin saturday_PN = regPN "saturday" ;
lin sauce_N = regN "sauce" ;
lin saucer_N = regN "saucer" ;
lin saucy_A = regA "saucy" ;
lin sausage_N = regN "sausage" ;
lin save_V2 = prpV2 (regV "save") "" ;
lin saw_N = regN "saw" ;
lin saw_V2 = prpV2 (regV "saw") "" ;
lin say_VS = mkVS say_V ;
lin scale_N = regN "scale" ;
lin scan_V2 = prpV2 (regV "scan") "" ;
lin scarce_A = regA "scarce" ;
lin scare_V2 = prpV2 (regV "scare") "" ;
lin scatter_V2 = prpV2 (regV "scatter") "" ;
lin scenario_N = regN "scenario" ;
lin scene_N = regN "scene" ;
lin sceptic_N = regN "sceptic" ;
lin schedule_N = regN "schedule" ;
lin schedule_V2 = prpV2 (regV "schedule") "" ;
lin schema_N = irregN "schema" "schema" ;
lin schematic_A = regA "schematic" ;
lin scheme_N = regN "scheme" ;
lin scholastic_A = longA "scholastic" ;
lin school_N = regN "school" ;
lin science_N = regN "science" ;
lin scientific_A = longA "scientific" ;
lin scientist_N = regN "scientist" ;
lin scold_V = (regV "scold") ;
lin scope_N = regN "scope" ;
lin score_N = regN "score" ;
lin score_V = (regV "score") ;
lin score_N2of = prepN2 "score" "of" ;
lin scramble_V2 = prpV2 (regV "scramble") "" ;
lin scratch_N = regN "scratch" ;
lin scratch_V2 = prpV2 (regV "scratch") "" ;
lin screen_N = regN "screen" ;
lin screw_N = regN "screw" ;
lin screw_V3to =dirprepV3 (regV "screw") "to" ;
lin screw_V = (regV "screw") ;
lin script_N = regN "script" ;
lin scrupulous_A = longA "scrupulous" ;
lin scrutiny_N = massN "scrutiny" ;
lin sea_N = regN "sea" ;
lin search_N = regN "search" ;
lin search_V2 = prpV2 (regV "search") "" ;
lin search_V2for = prpV2 (regV "search") "for" ;
lin season_N = regN "season" ;
lin season_V2 = prpV2 (regV "season") "" ;
lin seat_N = regN "seat" ;
lin second_N = regN "second" ;
lin secrecy_N = regN "secrecy" ;
lin secret_A2from = longA2 "secret" "from" ;
lin secret_N = regN "secret" ;
lin secretary_N = regN "secretary" ;
lin section_N = regN "section" ;
lin secure_V2 = prpV2 (regV "secure") "" ;
lin secure_A = regA "secure" ;
lin secure_A2from = regA2 "secure" "from" ;
lin see_V2 = prpV2 see_V "" ;
lin seed_N = regN "seed" ;
lin seek_V2 = prpV2 seek_V "" ;
lin seem_V2 = prpV2 (regV "seem") "" ;
lin seem_V2 = prpV2 (regV "seem") "" ;
lin seem_V2 = prpV2 (regV "seem") "" ;
lin segment_N = regN "segment" ;
lin segment_V2 = prpV2 (regV "segment") "" ;
lin seize_V2 = prpV2 (regV "seize") "" ;
lin seldom_Adv = mkAdv "seldom" ;
lin select_V2 = prpV2 (regV "select") "" ;
lin self_N = irregN "self" "self" ;
lin sell_V2 = prpV2 sell_V "" ;
lin semantic_A = longA "semantic" ;
lin semantics_N = regN "semantics" ;
lin send_V3 = dirdirV3 send_V ;
lin send_V3to =dirprepV3 send_V "to" ;
lin sensation_N = regN "sensation" ;
lin sense_N = regN "sense" ;
lin sense_V2 = prpV2 (regV "sense") "" ;
lin sense_VS = mkVS (regV "sense") ;
lin sensible_A = longA "sensible" ;
lin sensitive_A = longA "sensitive" ;
lin sensitive_A2to = longA2 "sensitive" "to" ;
lin sensory_A = longA "sensory" ;
lin sentence_N = regN "sentence" ;
lin separate_V2 = prpV2 (regV "separate") "" ;
lin separate_V3from =dirprepV3 (regV "separate") "from" ;
lin separate_A = longA "separate" ;
lin separate_A2from = longA2 "separate" "from" ;
lin september_PN = regPN "september" ;
lin sequel_N2to = prepN2 "sequel" "to" ;
lin sequence_N = regN "sequence" ;
lin serial_A = longA "serial" ;
lin series_N = regN "series" ;
lin serious_A = longA "serious" ;
lin servant_N = regN "servant" ;
lin serve_V2 = prpV2 (regV "serve") "" ;
lin service_N = regN "service" ;
lin session_N = regN "session" ;
lin set_N = regN "set" ;
lin set_V = useV IrregEng.set_V ;
lin setting_N2for = prepN2 "setting" "for" ;
lin settle_V = (regV "settle") ;
lin severe_A = longA "severe" ;
lin sew_V2 = prpV2 IrregEng.sew_V "" ;
lin sew_V = useV IrregEng.sew_V ;
lin sex_N = regN "sex" ;
lin sexual_A = longA "sexual" ;
lin shade_N = regN "shade" ;
lin shade_V2 = prpV2 (regV "shade") "" ;
lin shadow_N = regN "shadow" ;
lin shake_N = regN "shake" ;
lin shake_V2 = prpV2 IrregEng.shake_V "" ;
lin shake_V = useV IrregEng.shake_V ;
lin shallow_A = regA "shallow" ;
lin shame_N = regN "shame" ;
lin shape_V2 = prpV2 (regV "shape") "" ;
lin share_N = regN "share" ;
lin share_V3with =dirprepV3 (regV "share") "with" ;
lin sharp_A = regA "sharp" ;
lin shatter_V2 = prpV2 (regV "shatter") "" ;
lin shave_N = regN "shave" ;
lin shave_V2 = prpV2 (regV "shave") "" ;
lin shave_V = (regV "shave") ;
lin shaven_A = longA "shaven" ;
lin shear_V = (regV "shear") ;
lin shed_N = regN "shed" ;
lin shed_V2 = prpV2 shed_V "" ;
lin sheep_N = irregN "sheep" "sheep" ;
lin sheer_A = regA "sheer" ;
lin sheet_N = regN "sheet" ;
lin shelf_N = regN "shelf" ;
lin shell_N = regN "shell" ;
lin shelve_V2 = prpV2 (regV "shelve") "" ;
lin shift_V = (regV "shift") ;
lin shine_V = (regV "shine") ;
lin ship_N = regN "ship" ;
lin shirt_N = regN "shirt" ;
lin shock_N = regN "shock" ;
lin shock_V2 = prpV2 (regV "shock") "" ;
lin shoe_N = regN "shoe" ;
lin shoot_V2 = prpV2 shoot_V "" ;
lin shop_N = regN "shop" ;
lin shore_N = regN "shore" ;
lin short_A = regA "short" ;
lin shortcoming_N = regN "shortcoming" ;
lin shot_N = regN "shot" ;
lin shoulder_N = regN "shoulder" ;
lin shoulder_V2 = prpV2 (regV "shoulder") "" ;
lin shout_N = regN "shout" ;
lin shout_V = (regV "shout") ;
lin show_N = regN "show" ;
lin show_V3 =dirprepV3 show_V "" ;
lin shrug_V = (regV "shrug") ;
lin shrug_V2 = prpV2 (regV "shrug") "" ;
lin shrug_N = regN "shrug" ;
lin shut_V2 = prpV2 shut_V "" ;
lin sibling_N = regN "sibling" ;
lin sick_A2of = regA2 "sick" "of" ;
lin side_N = regN "side" ;
lin sidestep_V2 = prpV2 (regV "sidestep") "" ;
lin sideways_Adv = mkAdv "sideways" ;
lin sideways_A = longA "sideways" ;
lin sight_N = regN "sight" ;
lin sign_N = regN "sign" ;
lin sign_V2 = prpV2 (regV "sign") "" ;
lin signal_N = regN "signal" ;
lin signal_V2to_that_s = prpV2 (regV "signal") "to_that_s" ;
lin signature_N = regN "signature" ;
lin significance_N = regN "significance" ;
lin significant_A = longA "significant" ;
lin signify_V2 = prpV2 (regV "signify") "" ;
lin silence_N = regN "silence" ;
lin silent_A = longA "silent" ;
lin silk_A = longA "silk" ;
lin silk_N = massN "silk" ;
lin silly_A = regA "silly" ;
lin silver_N = massN "silver" ;
lin similar_A = longA "similar" ;
lin similar_A2to = longA2 "similar" "to" ;
lin simple_A = regA "simple" ;
lin simplicity_N = regN "simplicity" ;
lin simulate_V2 = prpV2 (regV "simulate") "" ;
lin simultaneous_A = longA "simultaneous" ;
lin since_Subj = mkSubj "since" ;
lin since_Prep = mkPrep "since" ;
lin sincere_A = longA "sincere" ;
lin sing_V2 = prpV2 IrregEng.sing_V "" ;
lin sing_V = useV IrregEng.sing_V ;
lin single_A = longA "single" ;
lin singular_A = longA "singular" ;
lin sink_V2 = prpV2 IrregEng.sink_V "" ;
lin sink_V = useV IrregEng.sink_V ;
lin sister_N2of = prepN2 "sister" "of" ;
lin sit_V = (regV "sit") ;
lin sit_V2 = prpV2 (regV "sit") "" ;
lin site_N = regN "site" ;
lin situation_N = regN "situation" ;
lin size_N = regN "size" ;
lin skate_N = regN "skate" ;
lin skate_V = (regV "skate") ;
lin skeletal_A = longA "skeletal" ;
lin skeleton_N = regN "skeleton" ;
lin sketch_N = regN "sketch" ;
lin sketch_V2 = prpV2 (regV "sketch") "" ;
lin skilful_A = longA "skilful" ;
lin skill_N = regN "skill" ;
lin skilled_A = longA "skilled" ;
lin skin_N = regN "skin" ;
lin skip_V2 = prpV2 (regV "skip") "" ;
lin skip_V = (regV "skip") ;
lin skirt_N = regN "skirt" ;
lin sky_N = regN "sky" ;
lin slash_N = regN "slash" ;
lin slave_N = regN "slave" ;
lin sledge_N = regN "sledge" ;
lin sleep_N = regN "sleep" ;
lin sleep_V = useV IrregEng.sleep_V ;
lin slide_V = (regV "slide") ;
lin slight_A = regA "slight" ;
lin slight_N = regN "slight" ;
lin slim_A = regA "slim" ;
lin slim_V = (regV "slim") ;
lin slip_V = (regV "slip") ;
lin slip_N = regN "slip" ;
lin slipper_N = regN "slipper" ;
lin slippery_A = regA "slippery" ;
lin sloe_N = regN "sloe" ;
lin slope_N = regN "slope" ;
lin slot_N = regN "slot" ;
lin slow_A = regA "slow" ;
lin small_A = regA "small" ;
lin smart_A = regA "smart" ;
lin smell_N = regN "smell" ;
lin smell_V2 = prpV2 (regV "smell") "" ;
lin smell_V = (regV "smell") ;
lin smelt_V2 = prpV2 (regV "smelt") "" ;
lin smile_N = regN "smile" ;
lin smile_V = (regV "smile") ;
lin smoke_N = massN "smoke" ;
lin smoke_V = (regV "smoke") ;
lin smooth_A = regA "smooth" ;
lin smooth_V2 = prpV2 (regV "smooth") "" ;
lin snake_N = regN "snake" ;
lin snap_V2 = prpV2 (regV "snap") "" ;
lin snap_V = (regV "snap") ;
lin snapshot_N = regN "snapshot" ;
lin snow_V = (regV "snow") ;
lin snow_N = massN "snow" ;
lin soap_N = massN "soap" ;
lin social_A = longA "social" ;
lin society_N = regN "society" ;
lin sock_N = regN "sock" ;
lin sodium_N = regN "sodium" ;
lin soft_A = regA "soft" ;
lin software_N = massN "software" ;
lin soil_N = regN "soil" ;
lin soldier_N = regN "soldier" ;
lin sole_A = longA "sole" ;
lin sole_N = regN "sole" ;
lin solemn_A = longA "solemn" ;
lin solid_A = regA "solid" ;
lin solid_N = regN "solid" ;
lin soliloquy_N = irregN "soliloquy" "soliloquy" ;
lin solo_A = longA "solo" ;
lin solo_N = regN "solo" ;
lin solution_N = regN "solution" ;
lin solve_V2 = prpV2 (regV "solve") "" ;
lin somehow_Adv = mkAdv "somehow" ;
lin sometimes_Adv = mkAdv "sometimes" ;
lin somewhat_Adv = mkAdv "somewhat" ;
--lin somewhere_Adv = mkAdv "somewhere" ;
lin son_N2of = prepN2 "son" "of" ;
lin song_N = regN "song" ;
lin soon_Adv = mkAdv "soon" ;
lin sophisticated_A = longA "sophisticated" ;
lin sophistication_N = regN "sophistication" ;
lin sore_A = regA "sore" ;
lin sore_N = regN "sore" ;
lin sorrow_N = regN "sorrow" ;
lin sorry_A = regA "sorry" ;
lin sorry_A2for = regA2 "sorry" "for" ;
lin sorry_A2 = regA2 "sorry" "" ;
lin sort_N = regN "sort" ;
lin sort_V2 = prpV2 (regV "sort") "" ;
lin soul_N = regN "soul" ;
lin sound_A = regA "sound" ;
lin sound_N = regN "sound" ;
lin sound_V2 = prpV2 (regV "sound") "" ;
lin soup_N = regN "soup" ;
lin sour_A = regA "sour" ;
lin source_N = regN "source" ;
lin south_N = regN "south" ;
lin south_A = longA "south" ;
lin south_A2of = longA2 "south" "of" ;
lin southern_A = longA "southern" ;
lin space_N = regN "space" ;
lin spade_N = regN "spade" ;
lin spain_PN = regPN "spain" ;
lin span_V2 = prpV2 (regV "span") "" ;
lin spanish_A = regA "spanish" ;
lin spare_A = longA "spare" ;
lin spare_V3 = dirdirV3 (regV "spare") ;
lin sparrow_N = regN "sparrow" ;
lin spate_N = regN "spate" ;
lin spatial_A = longA "spatial" ;
lin speak_V = useV IrregEng.speak_V ;
lin spear_N = regN "spear" ;
lin spear_V2 = prpV2 (regV "spear") "" ;
lin special_A = longA "special" ;
lin specialist_N = regN "specialist" ;
lin specific_A = longA "specific" ;
lin specific_A2to = longA2 "specific" "to" ;
lin specifically_Adv = mkAdv "specifically" ;
lin specify_V2 = prpV2 (regV "specify") "" ;
lin spectacle_N = regN "spectacle" ;
lin spectacular_A = longA "spectacular" ;
lin spectral_A = longA "spectral" ;
lin spectrum_N = irregN "spectrum" "spectrum" ;
lin speculate_V = (regV "speculate") ;
lin speech_N = regN "speech" ;
lin speed_N = regN "speed" ;
lin spell_N = regN "spell" ;
--lin spell_V2 = prpV2 spell_V "" ;
--lin spell_V = useV IrregEng.spell_V ;
lin spend_V2 = prpV2 spend_V "" ;
lin spin_V2 = prpV2 IrregEng.spin_V "" ;
lin spin_V = useV IrregEng.spin_V ;
lin spinster_N = regN "spinster" ;
lin spirit_N = regN "spirit" ;
lin spite_N = regN "spite" ;
lin splendid_A = longA "splendid" ;
lin splendour_N = regN "splendour" ;
lin split_V = useV IrregEng.split_V ;
lin split_N = regN "split" ;
lin spoil_V2 = prpV2 (regV "spoil") "" ;
lin spoke_N = regN "spoke" ;
lin spokesman_N = regN "spokesman" ;
lin spoon_N = regN "spoon" ;
lin sport_N = regN "sport" ;
lin spot_N = regN "spot" ;
lin spot_V2 = prpV2 (regV "spot") "" ;
lin spread_V = useV IrregEng.spread_V ;
lin spring_N = regN "spring" ;
lin spring_V2 = prpV2 spring_V "" ;
lin spur_N = regN "spur" ;
lin spurious_A = longA "spurious" ;
lin square_A = regA "square" ;
lin square_N = regN "square" ;
lin stable_A = regA "stable" ;
lin stable_N = regN "stable" ;
lin stack_N = regN "stack" ;
lin stack_V2 = prpV2 (regV "stack") "" ;
lin staff_N = regN "staff" ;
lin staff_V2 = prpV2 (regV "staff") "" ;
lin stag_N = regN "stag" ;
lin stage_N = regN "stage" ;
lin stage_V2 = prpV2 (regV "stage") "" ;
lin stain_N = regN "stain" ;
lin stain_V2 = prpV2 (regV "stain") "" ;
lin stair_N = regN "stair" ;
lin stake_N = regN "stake" ;
lin stamp_N = regN "stamp" ;
lin stance_N = regN "stance" ;
lin stand_V = (regV "stand") ;
lin standard_A = longA "standard" ;
lin standard_N = regN "standard" ;
lin star_N = regN "star" ;
lin stare_N = regN "stare" ;
lin stare_V2at = prpV2 (regV "stare") "at" ;
lin start_N = regN "start" ;
lin start_V2 = prpV2 (regV "start") "" ;
lin start_V = (regV "start") ;
lin startle_V2 = prpV2 (regV "startle") "" ;
lin state_N = regN "state" ;
lin state_V2 = prpV2 (regV "state") "" ;
lin static_A = longA "static" ;
lin station_N = regN "station" ;
lin stationary_A = longA "stationary" ;
lin stationer_N = regN "stationer" ;
lin stationery_N = massN "stationery" ;
lin statistic_N = regN "statistic" ;
lin statistical_A = longA "statistical" ;
lin statistics_N = irregN "statistics" "statistics" ;
--lin statistics_N = regN "statistics" ;
lin stative_A = longA "stative" ;
lin statue_N = regN "statue" ;
lin stature_N = regN "stature" ;
lin status_N = regN "status" ;
lin stay_N = regN "stay" ;
lin stay_V = (regV "stay") ;
lin steady_A = regA "steady" ;
lin steal_V3from =dirprepV3 steal_V "from" ;
lin steam_N = massN "steam" ;
lin steam_V = (regV "steam") ;
lin steel_N = massN "steel" ;
lin steel_V2 = prpV2 (regV "steel") "" ;
lin steep_A = regA "steep" ;
lin steeple_N = regN "steeple" ;
lin steer_N = regN "steer" ;
lin steer_V2 = prpV2 (regV "steer") "" ;
lin stem_N = regN "stem" ;
lin stem_V2 = prpV2 (regV "stem") "" ;
lin step_N = regN "step" ;
lin step_V2 = prpV2 (regV "step") "" ;
lin sterile_A = longA "sterile" ;
lin stick_N = regN "stick" ;
lin stick_V2to = prpV2 stick_V "to" ;
lin sticky_A = regA "sticky" ;
lin stiff_A = regA "stiff" ;
lin still_Adv = mkAdv "still" ;
lin still_A = regA "still" ;
lin sting_N = regN "sting" ;
lin sting_V2 = prpV2 sting_V "" ;
lin stipulate_VS = mkVS (regV "stipulate") ;
lin stitch_N = regN "stitch" ;
lin stitch_V2 = prpV2 (regV "stitch") "" ;
lin stock_N = regN "stock" ;
lin stock_V2 = prpV2 (regV "stock") "" ;
lin stocking_N = regN "stocking" ;
lin stomach_N = regN "stomach" ;
lin stone_N = regN "stone" ;
lin stool_N = regN "stool" ;
lin stoop_V = (regV "stoop") ;
lin stop_N = regN "stop" ;
lin stop_V2 = prpV2 (regV "stop") "" ;
lin stop_V = (regV "stop") ;
lin storage_N = massN "storage" ;
lin store_N = regN "store" ;
lin store_V2 = prpV2 (regV "store") "" ;
lin storm_N = regN "storm" ;
lin story_N = regN "story" ;
lin straight_A = regA "straight" ;
lin straightforward_A = longA "straightforward" ;
lin strain_N = regN "strain" ;
lin strain_V2 = prpV2 (regV "strain") "" ;
lin strand_V2 = prpV2 (regV "strand") "" ;
lin strange_A = regA "strange" ;
lin stranger_N = regN "stranger" ;
lin strategy_N = regN "strategy" ;
lin stratum_N = irregN "stratum" "stratum" ;
lin straw_N = regN "straw" ;
lin strawberry_N = regN "strawberry" ;
lin stray_A = regA "stray" ;
lin stray_V = (regV "stray") ;
lin stream_N = regN "stream" ;
lin streamlined_A = longA "streamlined" ;
lin street_N = regN "street" ;
lin strength_N = regN "strength" ;
lin strengthen_V2 = prpV2 (regV "strengthen") "" ;
lin stress_N = regN "stress" ;
lin stress_V2 = prpV2 (regV "stress") "" ;
lin stretch_V = (regV "stretch") ;
--lin strew_V2 = prpV2 strew_V "" ;
lin strict_A = regA "strict" ;
lin strident_A = longA "strident" ;
lin strike_V2 = prpV2 (regV "strike") "" ;
lin string_N = regN "string" ;
lin strip_N = regN "strip" ;
lin strip_V2 = prpV2 (regV "strip") "" ;
lin strive_V2for = prpV2 strive_V "for" ;
lin stroke_N = regN "stroke" ;
lin stroke_V2 = prpV2 (regV "stroke") "" ;
lin strong_A = regA "strong" ;
lin structuralism_N = regN "structuralism" ;
lin structuralist_N = regN "structuralist" ;
lin structure_N = regN "structure" ;
lin struggle_N = regN "struggle" ;
lin struggle_V2with = prpV2 (regV "struggle") "with" ;
lin student_N = regN "student" ;
lin study_V = (regV "study") ;
lin study_N2 = prepN2 "study" "" ;
lin stuff_N = regN "stuff" ;
lin stuff_V2 = prpV2 (regV "stuff") "" ;
lin stupid_A = regA "stupid" ;
lin stupor_N = regN "stupor" ;
lin stutter_V = (regV "stutter") ;
lin style_N = regN "style" ;
lin stylistic_A = longA "stylistic" ;
lin suave_A = regA "suave" ;
lin subcategorize_V = (regV "subcategorize") ;
lin subjacency_N = regN "subjacency" ;
lin subjacent_A = longA "subjacent" ;
lin subjacent_A2to = longA2 "subjacent" "to" ;
lin subject_V3to =dirprepV3 (regV "subject") "to" ;
lin subject_N = regN "subject" ;
lin subjective_A = longA "subjective" ;
lin submarine_A = longA "submarine" ;
lin submarine_N = regN "submarine" ;
lin submission_N = regN "submission" ;
lin submit_V2to = prpV2 (regV "submit") "to" ;
lin subordinate_A = longA "subordinate" ;
lin subordinate_V2 = prpV2 (regV "subordinate") "" ;
lin subsequent_A = longA "subsequent" ;
lin subservient_A = longA "subservient" ;
lin substance_N = regN "substance" ;
lin substantial_A = longA "substantial" ;
lin substantive_A = longA "substantive" ;
lin substitute_V3for =dirprepV3 (regV "substitute") "for" ;
lin substitute_N = regN "substitute" ;
lin subsume_V2 = prpV2 (regV "subsume") "" ;
lin subsumption_N = regN "subsumption" ;
lin subtle_A = regA "subtle" ;
lin subtlety_N = regN "subtlety" ;
lin subtract_V3from =dirprepV3 (regV "subtract") "from" ;
lin succeed_V2in = prpV2 (regV "succeed") "in" ;
lin success_N = regN "success" ;
lin succession_N = regN "succession" ;
lin successive_A = longA "successive" ;
lin successor_N = regN "successor" ;
lin succinct_A = longA "succinct" ;
lin succumb_V2to = prpV2 (regV "succumb") "to" ;
lin suck_V2 = prpV2 (regV "suck") "" ;
lin sudden_A = longA "sudden" ;
lin sue_PN = regPN "sue" ;
lin suffer_V2from = prpV2 (regV "suffer") "from" ;
lin suffice_V = (regV "suffice") ;
lin sufficient_A = longA "sufficient" ;
lin suffix_V2 = prpV2 (regV "suffix") "" ;
lin suffix_N = regN "suffix" ;
lin sugar_N = massN "sugar" ;
lin suggest_V2to_that_s = prpV2 (regV "suggest") "to_that_s" ;
lin suit_V2 = prpV2 (regV "suit") "" ;
lin suit_N = regN "suit" ;
lin suitable_A = longA "suitable" ;
lin suite_N = regN "suite" ;
lin sum_N = regN "sum" ;
lin summer_N = regN "summer" ;
lin sun_N = regN "sun" ;
lin sunday_PN = regPN "sunday" ;
lin sunshine_N = regN "sunshine" ;
lin super_A = longA "super" ;
lin superficial_A = longA "superficial" ;
lin superior_A = longA "superior" ;
lin supersede_V2 = prpV2 (regV "supersede") "" ;
lin supervisor_N = regN "supervisor" ;
lin supper_N = regN "supper" ;
lin supplement_V2 = prpV2 (regV "supplement") "" ;
lin supplement_N = regN "supplement" ;
lin supplementary_A = longA "supplementary" ;
lin suppletion_N = regN "suppletion" ;
lin suppletive_A = longA "suppletive" ;
lin supply_V2 = prpV2 (regV "supply") "" ;
lin supply_V3to =dirprepV3 (regV "supply") "to" ;
lin supply_V3with =dirprepV3 (regV "supply") "with" ;
lin supply_N = regN "supply" ;
lin support_V2 = prpV2 (regV "support") "" ;
lin support_N = regN "support" ;
lin suppose_VS = mkVS (regV "suppose") ;
lin supposition_N = regN "supposition" ;
lin suppress_V2 = prpV2 (regV "suppress") "" ;
lin sure_A2 = regA2 "sure" "" ;
lin sure_A = regA "sure" ;
lin sure_A2 = regA2 "sure" "" ;
lin surface_V = (regV "surface") ;
lin surface_N = regN "surface" ;
lin surgeon_N = regN "surgeon" ;
lin surgery_N = regN "surgery" ;
lin surgical_A = longA "surgical" ;
lin surmount_V2 = prpV2 (regV "surmount") "" ;
lin surprise_V2 = prpV2 (regV "surprise") "" ;
lin surprise_N = regN "surprise" ;
lin surround_V2 = prpV2 (regV "surround") "" ;
lin survey_V2 = prpV2 (regV "survey") "" ;
lin survey_N = regN "survey" ;
lin survive_V2 = prpV2 (regV "survive") "" ;
lin susceptible_A = longA "susceptible" ;
lin suspect_V2 = prpV2 (regV "suspect") "" ;
lin suspect_VS = mkVS (regV "suspect") ;
lin suspect_N = regN "suspect" ;
lin suspend_V2 = prpV2 (regV "suspend") "" ;
lin suspense_N = regN "suspense" ;
lin suspicion_N = regN "suspicion" ;
lin suspicious_A = longA "suspicious" ;
lin sustain_V2 = prpV2 (regV "sustain") "" ;
lin sustenance_N = regN "sustenance" ;
lin swallow_V2 = prpV2 (regV "swallow") "" ;
lin swan_N = regN "swan" ;
lin swap_V3for =dirprepV3 (regV "swap") "for" ;
lin swear_VS = mkVS swear_V ;
lin swede_N = regN "swede" ;
lin sweden_PN = regPN "sweden" ;
lin swedish_A = regA "swedish" ;
lin sweep_V2 = prpV2 sweep_V "" ;
lin sweet_N = regN "sweet" ;
lin swell_V = useV IrregEng.swell_V ;
lin swift_A = regA "swift" ;
lin swift_N = regN "swift" ;
lin swim_V = useV IrregEng.swim_V ;
lin swim_N = regN "swim" ;
lin swing_V = useV IrregEng.swing_V ;
lin swiss_A = longA "swiss" ;
lin switch_V2 = prpV2 (regV "switch") "" ;
lin switch_N = regN "switch" ;
lin switzerland_PN = regPN "switzerland" ;
lin sword_N = regN "sword" ;
lin syllabic_A = longA "syllabic" ;
lin syllable_N = regN "syllable" ;
lin syllogism_N = regN "syllogism" ;
lin symbol_N = regN "symbol" ;
lin symmetry_N = regN "symmetry" ;
lin sympathetic_A = longA "sympathetic" ;
lin sympathetic_A2to = longA2 "sympathetic" "to" ;
lin symptom_N = regN "symptom" ;
lin symptomatic_A = longA "symptomatic" ;
lin symptomatic_A2of = longA2 "symptomatic" "of" ;
lin synchronous_A = longA "synchronous" ;
lin synonym_N = regN "synonym" ;
lin synonymous_A = longA "synonymous" ;
lin synonymous_A2with = longA2 "synonymous" "with" ;
lin synonymy_N = regN "synonymy" ;
lin synopsis_N = regN "synopsis" ;
lin synoptic_A = longA "synoptic" ;
lin syntactic_A = longA "syntactic" ;
lin syntax_N = regN "syntax" ;
lin synthesis_N = irregN "synthesis" "synthesis" ;
lin synthesize_V2 = prpV2 (regV "synthesize") "" ;
lin synthetic_A = longA "synthetic" ;
lin system_N = regN "system" ;
lin systematic_A = longA "systematic" ;
lin systematically_A = longA "systematically" ;
lin systematize_V2 = prpV2 (regV "systematize") "" ;
lin table_N = regN "table" ;
lin tabular_A = longA "tabular" ;
lin tabulate_V2 = prpV2 (regV "tabulate") "" ;
lin tacit_A = longA "tacit" ;
lin tack_N = regN "tack" ;
lin tackle_V2 = prpV2 (regV "tackle") "" ;
lin tact_N = regN "tact" ;
lin tactic_N = regN "tactic" ;
lin tag_V2 = prpV2 (regV "tag") "" ;
lin tag_N = regN "tag" ;
lin tail_N = regN "tail" ;
lin tailor_N = regN "tailor" ;
lin take_V2 = prpV2 take_V "" ;
lin tale_N = regN "tale" ;
lin talent_N = regN "talent" ;
lin talented_A = longA "talented" ;
lin talk_V2about = prpV2 (regV "talk") "about" ;
lin talk_N = regN "talk" ;
lin tall_A = regA "tall" ;
lin tame_A = regA "tame" ;
lin tangent_N = regN "tangent" ;
lin tangle_V2 = prpV2 (regV "tangle") "" ;
lin tank_N = regN "tank" ;
lin tap_V2 = prpV2 (regV "tap") "" ;
lin tap_N = regN "tap" ;
lin tape_V2 = prpV2 (regV "tape") "" ;
lin tape_N = regN "tape" ;
lin target_N = regN "target" ;
lin task_N = regN "task" ;
lin taste_V2 = prpV2 (regV "taste") "" ;
lin taste_V2of = prpV2 (regV "taste") "of" ;
lin taste_N = regN "taste" ;
lin tautology_N = regN "tautology" ;
lin tax_V2 = prpV2 (regV "tax") "" ;
lin tax_N = regN "tax" ;
lin taxi_N = regN "taxi" ;
lin taxonomy_N = regN "taxonomy" ;
lin tea_N = massN "tea" ;
lin teach_V2 = prpV2 teach_V "" ;
lin team_N = regN "team" ;
lin tear_V2 = prpV2 tear_V "" ;
lin tear_N = regN "tear" ;
lin tease_V2 = prpV2 (regV "tease") "" ;
lin technical_A = longA "technical" ;
lin technique_N = regN "technique" ;
lin technology_N = regN "technology" ;
lin tedious_A = longA "tedious" ;
lin tedium_N = regN "tedium" ;
lin teem_V2with = prpV2 (regV "teem") "with" ;
lin telegram_N = regN "telegram" ;
lin telegraph_V2 = prpV2 (regV "telegraph") "" ;
lin telegraph_N = regN "telegraph" ;
lin telephone_V2 = prpV2 (regV "telephone") "" ;
lin telephone_N = regN "telephone" ;
lin telescope_N = regN "telescope" ;
lin television_N = regN "television" ;
lin tell_V3 =dirprepV3 tell_V "" ;
lin temper_V3with =dirprepV3 (regV "temper") "with" ;
lin temper_N = regN "temper" ;
lin temperature_N = regN "temperature" ;
lin template_N = regN "template" ;
lin temple_N = regN "temple" ;
lin temporal_A = longA "temporal" ;
lin temporary_A = longA "temporary" ;
lin tempt_V2 = prpV2 (regV "tempt") "" ;
lin tend_V2 = prpV2 (regV "tend") "" ;
lin tendency_N2to = prepN2 "tendency" "to" ;
lin tender_A = regA "tender" ;
lin tenet_N = regN "tenet" ;
lin tennis_N = massN "tennis" ;
lin tenon_N = regN "tenon" ;
lin tenor_N = regN "tenor" ;
lin tense_A = regA "tense" ;
lin tense_N = regN "tense" ;
lin tensed_A = longA "tensed" ;
lin tension_N = regN "tension" ;
lin tent_N = regN "tent" ;
lin tentative_A = longA "tentative" ;
lin term_V3ed =dirprepV3 (regV "term") "ed" ;
lin term_N = regN "term" ;
lin terminal_A = longA "terminal" ;
lin terminal_N = regN "terminal" ;
lin terminate_V = (regV "terminate") ;
lin terminology_N = regN "terminology" ;
lin terrace_N = regN "terrace" ;
lin terrestrial_A = longA "terrestrial" ;
lin terrible_A = longA "terrible" ;
lin terrify_V2 = prpV2 (regV "terrify") "" ;
lin territory_N = regN "territory" ;
lin terror_N = regN "terror" ;
lin terse_A = regA "terse" ;
lin test_V2 = prpV2 (regV "test") "" ;
lin test_N = regN "test" ;
lin testimony_N = regN "testimony" ;
lin text_N = regN "text" ;
lin textbook_N = regN "textbook" ;
lin thank_V2 = prpV2 (regV "thank") "" ;
lin theatre_N = regN "theatre" ;
lin theatrical_A = longA "theatrical" ;
lin thematic_A = longA "thematic" ;
lin thematically_Adv = mkAdv "thematically" ;
lin theme_N = regN "theme" ;
lin then_Adv = mkAdv "then" ;
lin theorem_N = regN "theorem" ;
lin theoretic_A = longA "theoretic" ;
lin theoretical_A = longA "theoretical" ;
lin theoretically_Adv = mkAdv "theoretically" ;
lin theory_N = regN "theory" ;
lin therapeutic_A = longA "therapeutic" ;
lin therapy_N = regN "therapy" ;
lin therefore_Subj = mkSubj "therefore" ;
lin thesis_N = regN "thesis" ;
lin thick_A = regA "thick" ;
lin thief_N = regN "thief" ;
lin thigh_N = regN "thigh" ;
lin thin_A = regA "thin" ;
lin thing_N = regN "thing" ;
lin think_VS = mkVS think_V ;
lin third_N = regN "third" ;
lin thirst_N2for = prepN2 "thirst" "for" ;
lin thorough_A = longA "thorough" ;
lin thought_N2 = prepN2 "thought" "" ;
lin thousand_N2 = prepN2 "thousand" "" ;
lin thread_N = regN "thread" ;
lin threat_N2 = prepN2 "threat" "" ;
lin threaten_V3with =dirprepV3 (regV "threaten") "with" ;
lin threshold_N = regN "threshold" ;
lin throat_N = regN "throat" ;
--lin through_Prep = mkPrep "through" ;
lin throughout_Prep = mkPrep "throughout" ;
lin throw_V3loc =dirprepV3 throw_V "loc" ;
lin throw_N = regN "throw" ;
lin thrown_V3loc =dirprepV3 (regV "thrown") "loc" ;
lin thrust_V3loc =dirprepV3 (regV "thrust") "loc" ;
lin thrust_N = regN "thrust" ;
lin thumb_N = regN "thumb" ;
lin thunder_N = regN "thunder" ;
lin thursday_PN = regPN "thursday" ;
lin thus_Subj = mkSubj "thus" ;
lin ticket_N = regN "ticket" ;
lin tidy_V2 = prpV2 (regV "tidy") "" ;
lin tidy_A = regA "tidy" ;
lin tie_V3to =dirprepV3 (regV "tie") "to" ;
lin tie_N = regN "tie" ;
lin tiger_N = regN "tiger" ;
lin tight_A = regA "tight" ;
lin till_V2 = prpV2 (regV "till") "" ;
lin till_N = regN "till" ;
lin time_V2 = prpV2 (regV "time") "" ;
lin time_N = regN "time" ;
lin timely_A = regA "timely" ;
lin timetable_N = regN "timetable" ;
lin tin_N = regN "tin" ;
lin tinker_V2with = prpV2 (regV "tinker") "with" ;
lin tinker_N = regN "tinker" ;
lin tip_N = regN "tip" ;
lin tire_V2of = prpV2 (regV "tire") "of" ;
lin title_N = regN "title" ;
--lin to_Prep = mkPrep "to" ;
lin toad_N = regN "toad" ;
lin toast_N = massN "toast" ;
lin toast_V2 = prpV2 (regV "toast") "" ;
lin tobacco_N = massN "tobacco" ;
lin today_Adv = mkAdv "today" ;
lin toe_N = regN "toe" ;
lin together_Adv = mkAdv "together" ;
lin token_N = regN "token" ;
lin tolerance_N = regN "tolerance" ;
lin tolerate_V2 = prpV2 (regV "tolerate") "" ;
lin toll_V = (regV "toll") ;
lin toll_N = regN "toll" ;
lin tomato_N = regN "tomato" ;
lin tomb_N = regN "tomb" ;
lin tomorrow_Adv = mkAdv "tomorrow" ;
lin ton_N = regN "ton" ;
lin tone_N = regN "tone" ;
lin tongue_N = regN "tongue" ;
lin tonight_Adv = mkAdv "tonight" ;
lin tonne_N = regN "tonne" ;
lin tool_N = regN "tool" ;
lin tooth_N = irregN "tooth" "tooth" ;
lin top_N = regN "top" ;
lin topic_N = regN "topic" ;
lin topology_N = regN "topology" ;
lin torrent_N = regN "torrent" ;
lin torrential_A = longA "torrential" ;
lin toss_V2 = prpV2 (regV "toss") "" ;
lin total_A = longA "total" ;
lin total_N = regN "total" ;
lin touch_V2 = prpV2 (regV "touch") "" ;
lin touch_N = regN "touch" ;
lin tough_A = regA "tough" ;
lin tough_A2 = regA2 "tough" "" ;
lin tour_V2 = prpV2 (regV "tour") "" ;
lin tour_N = regN "tour" ;
lin tourist_N = regN "tourist" ;
lin tow_V2 = prpV2 (regV "tow") "" ;
lin towards_Prep = mkPrep "towards" ;
lin tower_N = regN "tower" ;
lin town_N = regN "town" ;
lin toxic_A = longA "toxic" ;
lin toy_N = regN "toy" ;
lin trace_V2 = prpV2 (regV "trace") "" ;
lin trace_N = regN "trace" ;
lin track_V2 = prpV2 (regV "track") "" ;
lin track_N = regN "track" ;
lin tract_N = regN "tract" ;
lin tractable_A = longA "tractable" ;
lin trade_N = regN "trade" ;
lin tradition_N = regN "tradition" ;
lin traffic_N = massN "traffic" ;
lin traffic_V2in = prpV2 (regV "traffic") "in" ;
lin tragedy_N = regN "tragedy" ;
lin tragic_A = longA "tragic" ;
lin train_V2 = prpV2 (regV "train") "" ;
lin train_N = regN "train" ;
lin tramp_N = regN "tramp" ;
lin tranquil_A = longA "tranquil" ;
lin transaction_N = regN "transaction" ;
lin transcendental_A = longA "transcendental" ;
lin transcribe_V2 = prpV2 (regV "transcribe") "" ;
lin transcript_N = regN "transcript" ;
lin transcription_N = regN "transcription" ;
lin transfer_V3to =dirprepV3 (regV "transfer") "to" ;
lin transform_V2 = prpV2 (regV "transform") "" ;
lin transience_N = regN "transience" ;
lin transient_A = longA "transient" ;
lin transistor_N = regN "transistor" ;
lin transit_N = regN "transit" ;
lin transitive_A = longA "transitive" ;
lin transitory_A = longA "transitory" ;
lin translate_V3into =dirprepV3 (regV "translate") "into" ;
lin transmit_V2 = prpV2 (regV "transmit") "" ;
lin transparency_N = regN "transparency" ;
lin transparent_A = longA "transparent" ;
lin transport_V2 = prpV2 (regV "transport") "" ;
lin transport_N = regN "transport" ;
lin trap_V2 = prpV2 (regV "trap") "" ;
lin trap_N = regN "trap" ;
lin travel_V2 = prpV2 (regV "travel") "" ;
lin travel_N = regN "travel" ;
lin traverse_V2 = prpV2 (regV "traverse") "" ;
lin tray_N = regN "tray" ;
lin treat_V3_pred =dirprepV3 (regV "treat") "_pred" ;
lin treatment_N = regN "treatment" ;
lin treble_A = longA "treble" ;
lin treble_V2 = prpV2 (regV "treble") "" ;
lin tree_N = regN "tree" ;
lin tremble_V = (regV "tremble") ;
lin triangle_N = regN "triangle" ;
lin triangular_A = longA "triangular" ;
lin tribe_N = regN "tribe" ;
lin trick_V2 = prpV2 (regV "trick") "" ;
lin trick_N = regN "trick" ;
lin trifle_V2with = prpV2 (regV "trifle") "with" ;
lin trifle_N = regN "trifle" ;
lin trigger_V2 = prpV2 (regV "trigger") "" ;
lin trigger_N = regN "trigger" ;
lin trip_V = (regV "trip") ;
lin trip_N = regN "trip" ;
lin triple_A = longA "triple" ;
lin triple_V2 = prpV2 (regV "triple") "" ;
lin triple_N = regN "triple" ;
lin triple_N = regN "triple" ;
lin triumph_V = (regV "triumph") ;
lin triumph_N = regN "triumph" ;
lin trivial_A = longA "trivial" ;
lin tropic_N = regN "tropic" ;
lin trouble_V2 = prpV2 (regV "trouble") "" ;
lin trouble_N = regN "trouble" ;
lin troublesome_A = longA "troublesome" ;
lin truck_N = regN "truck" ;
lin true_A = regA "true" ;
lin truncate_V2 = prpV2 (regV "truncate") "" ;
lin trunk_N = regN "trunk" ;
lin trust_V2 = prpV2 (regV "trust") "" ;
lin trust_N = regN "trust" ;
lin truth_N = regN "truth" ;
lin try_V2 = prpV2 (regV "try") "" ;
lin try_VV = mkVV (regV "try") ;
lin tub_N = regN "tub" ;
lin tube_N = regN "tube" ;
lin tuck_V3 =dirprepV3 (regV "tuck") "" ;
lin tuesday_PN = regPN "tuesday" ;
lin tuition_N = regN "tuition" ;
lin tumble_V = (regV "tumble") ;
lin tune_V2 = prpV2 (regV "tune") "" ;
lin tune_N = regN "tune" ;
lin turn_V3f =dirprepV3 (regV "turn") "f" ;
lin turn_V3 =dirprepV3 (regV "turn") "" ;
lin turn_V = (regV "turn") ;
lin turn_N = regN "turn" ;
lin turtle_N = regN "turtle" ;
lin tutor_N = regN "tutor" ;
lin twice_Adv = mkAdv "twice" ;
lin twiddle_V2 = prpV2 (regV "twiddle") "" ;
lin twin_N = regN "twin" ;
lin twist_V2 = prpV2 (regV "twist") "" ;
lin twist_N = regN "twist" ;
lin type_V2 = prpV2 (regV "type") "" ;
lin type_N = regN "type" ;
lin typical_A = longA "typical" ;
lin typical_A2of = longA2 "typical" "of" ;
lin tyre_N = regN "tyre" ;
lin ugly_A = regA "ugly" ;
lin ulcer_N = regN "ulcer" ;
lin ultimate_A = longA "ultimate" ;
lin ultimatum_N = regN "ultimatum" ;
lin unary_A = longA "unary" ;
lin uncertainty_N = regN "uncertainty" ;
lin uncle_N2of = prepN2 "uncle" "of" ;
--lin under_Prep = mkPrep "under" ;
lin undergraduate_N = regN "undergraduate" ;
lin underline_V2 = prpV2 (regV "underline") "" ;
lin undermine_V2 = prpV2 (regV "undermine") "" ;
lin underneath_Adv = mkAdv "underneath" ;
lin underneath_Prep = mkPrep "underneath" ;
lin underneath_N = regN "underneath" ;
lin underscore_N = regN "underscore" ;
lin understand_V2 = prpV2 understand_V "" ;
--lin undo_V2 = prpV2 undo_V "" ;
lin undoubtedly_Adv = mkAdv "undoubtedly" ;
lin ungainly_A = longA "ungainly" ;
lin uniform_A = longA "uniform" ;
lin uniform_N = regN "uniform" ;
lin unify_V2 = prpV2 (regV "unify") "" ;
lin union_N = regN "union" ;
lin unique_A = longA "unique" ;
lin unit_N = regN "unit" ;
lin unitary_A = longA "unitary" ;
lin unite_V2 = prpV2 (regV "unite") "" ;
lin unity_N = regN "unity" ;
lin universe_N = regN "universe" ;
lin university_N = regN "university" ;
lin unleash_V2 = prpV2 (regV "unleash") "" ;
lin unplug_V2 = prpV2 (regV "unplug") "" ;
lin unprecedented_A = longA "unprecedented" ;
lin until_Subj = mkSubj "until" ;
lin unusual_A = longA "unusual" ;
lin unwieldy_A = regA "unwieldy" ;
lin unwitting_A = longA "unwitting" ;
lin up_Prep = mkPrep "up" ;
lin update_V2 = prpV2 (regV "update") "" ;
lin upon_Prep = mkPrep "upon" ;
lin upper_A = longA "upper" ;
lin upright_A = longA "upright" ;
lin upset_V2 = prpV2 upset_V "" ;
lin upside_down_A = longA "upside_down" ;
lin upstairs_Adv = mkAdv "upstairs" ;
lin urge_V2 = prpV2 (regV "urge") "" ;
lin urge_N2 = prepN2 "urge" "" ;
lin urgency_N = regN "urgency" ;
lin urgent_A = regA "urgent" ;
lin usage_N = regN "usage" ;
lin use_V2 = prpV2 (regV "use") "" ;
lin use_N = regN "use" ;
lin used_A2to = longA2 "used" "to" ;
lin usual_A = longA "usual" ;
lin utility_N = regN "utility" ;
lin utilize_V2 = prpV2 (regV "utilize") "" ;
lin utter_A = longA "utter" ;
lin utter_V2 = prpV2 (regV "utter") "" ;
lin utterance_N = regN "utterance" ;
lin vacuous_A = longA "vacuous" ;
lin vacuum_N = regN "vacuum" ;
lin vague_A = regA "vague" ;
lin valence_N = regN "valence" ;
lin valency_N = regN "valency" ;
lin valid_A = longA "valid" ;
lin validate_V2 = prpV2 (regV "validate") "" ;
lin valley_N = regN "valley" ;
lin valuable_A = longA "valuable" ;
lin value_V2 = prpV2 (regV "value") "" ;
lin value_N = regN "value" ;
lin van_N = regN "van" ;
lin vanilla_N = regN "vanilla" ;
lin vanish_V = (regV "vanish") ;
lin variable_A = longA "variable" ;
lin variable_N = regN "variable" ;
lin variant_N = regN "variant" ;
lin variation_N = regN "variation" ;
lin variety_N = regN "variety" ;
lin various_A = longA "various" ;
lin varnish_V2 = prpV2 (regV "varnish") "" ;
lin varnish_N = regN "varnish" ;
lin vary_V = (regV "vary") ;
lin vase_N = regN "vase" ;
lin vast_A = regA "vast" ;
lin vector_N = regN "vector" ;
lin vegetable_N = regN "vegetable" ;
lin vegetation_N = regN "vegetation" ;
lin vehicle_N = regN "vehicle" ;
lin velocity_N = regN "velocity" ;
lin verb_N = regN "verb" ;
lin verbose_A = regA "verbose" ;
lin verdict_N = regN "verdict" ;
lin verify_V2 = prpV2 (regV "verify") "" ;
lin versatile_A = longA "versatile" ;
lin verse_N = regN "verse" ;
lin version_N = regN "version" ;
lin vertex_N = irregN "vertex" "vertex" ;
lin vertical_A = longA "vertical" ;
lin vessel_N = regN "vessel" ;
lin vet_N = regN "vet" ;
lin viable_A = longA "viable" ;
lin vice_N = regN "vice" ;
lin victim_N = regN "victim" ;
lin victor_N = regN "victor" ;
lin victory_N = regN "victory" ;
lin vie_V2with = prpV2 (regV "vie") "with" ;
lin view_V3_pred =dirprepV3 (regV "view") "_pred" ;
lin view_N = regN "view" ;
lin vigorous_A = longA "vigorous" ;
lin village_N = regN "village" ;
lin vindicate_V2 = prpV2 (regV "vindicate") "" ;
lin vine_N = regN "vine" ;
lin vineyard_N = regN "vineyard" ;
lin violate_V2 = prpV2 (regV "violate") "" ;
lin violence_N = massN "violence" ;
lin violent_A = longA "violent" ;
lin viral_A = longA "viral" ;
lin virtual_A = longA "virtual" ;
lin virtue_N = regN "virtue" ;
lin virus_N = regN "virus" ;
lin visible_A = longA "visible" ;
lin visible_A2to = longA2 "visible" "to" ;
lin vision_N = regN "vision" ;
lin visit_V2 = prpV2 (regV "visit") "" ;
lin visit_N = regN "visit" ;
lin visual_A = longA "visual" ;
lin vital_A = longA "vital" ;
lin vitiate_V2 = prpV2 (regV "vitiate") "" ;
lin vocabulary_N = regN "vocabulary" ;
lin voice_N = regN "voice" ;
lin volatile_A = longA "volatile" ;
lin vole_N = regN "vole" ;
lin volt_N = regN "volt" ;
lin volume_N = regN "volume" ;
lin voluntary_A = longA "voluntary" ;
lin volunteer_V = (regV "volunteer") ;
lin volunteer_V2for = prpV2 (regV "volunteer") "for" ;
lin volunteer_N = regN "volunteer" ;
lin vote_V2for = prpV2 (regV "vote") "for" ;
lin vote_N = regN "vote" ;
lin vow_VV = mkVV (regV "vow") ;
lin vow_VS = mkVS (regV "vow") ;
lin vow_N = regN "vow" ;
lin vowel_N = regN "vowel" ;
lin voyage_N = regN "voyage" ;
lin vulgar_A = longA "vulgar" ;
lin wag_V2 = prpV2 (regV "wag") "" ;
lin waist_N = regN "waist" ;
lin waistcoat_N = regN "waistcoat" ;
lin wait_V2for = prpV2 (regV "wait") "for" ;
lin wait_N = regN "wait" ;
lin wake_V2 = prpV2 wake_V "" ;
lin walk_V = (regV "walk") ;
lin walk_N = regN "walk" ;
lin wall_N = regN "wall" ;
lin wan_A = regA "wan" ;
lin wander_V2 = prpV2 (regV "wander") "" ;
lin want_V2 = prpV2 (regV "want") "" ;
--lin want_VV = mkVV (regV "want") ;
lin war_N = regN "war" ;
lin ward_N = regN "ward" ;
lin warm_V2 = prpV2 (regV "warm") "" ;
lin warm_A = regA "warm" ;
lin warn_V2 = prpV2 (regV "warn") "" ;
lin warning_N = regN "warning" ;
lin wash_V = (regV "wash") ;
lin waste_A = longA "waste" ;
lin waste_V2 = prpV2 (regV "waste") "" ;
lin waste_N = regN "waste" ;
lin watch_V2 = prpV2 (regV "watch") "" ;
lin watch_N = regN "watch" ;
lin water_N = regN "water" ;
lin wave_V2to = prpV2 (regV "wave") "to" ;
lin wave_N = regN "wave" ;
lin wax_N = regN "wax" ;
lin way_N = regN "way" ;
lin weak_A = regA "weak" ;
lin wealth_N = massN "wealth" ;
lin weapon_N = regN "weapon" ;
lin wear_V2 = prpV2 wear_V "" ;
lin weather_N = massN "weather" ;
lin weave_V2 = prpV2 weave_V "" ;
lin wedding_N = regN "wedding" ;
lin wedge_N = regN "wedge" ;
lin wednesday_PN = regPN "wednesday" ;
lin weed_N = regN "weed" ;
lin week_N = regN "week" ;
lin weep_V = useV IrregEng.weep_V ;
lin weigh_V2 = prpV2 (regV "weigh") "" ;
lin weigh_V2 = prpV2 (regV "weigh") "" ;
lin weight_N = regN "weight" ;
lin welcome_A = longA "welcome" ;
lin welcome_V3to =dirprepV3 (regV "welcome") "to" ;
lin welcome_N2to = prepN2 "welcome" "to" ;
lin welfare_N = regN "welfare" ;
lin well_Adv = mkAdv "well" ;
lin well_A = longA "well" ;
lin well_N = regN "well" ;
lin well_formed_A = longA "well_formed" ;
lin west_N = massN "west" ;
lin west_A = longA "west" ;
lin west_A2of = longA2 "west" "of" ;
lin western_A = longA "western" ;
lin wet_A = regA "wet" ;
lin wheat_N = massN "wheat" ;
lin wheel_N = regN "wheel" ;
lin wheeled_A = longA "wheeled" ;
lin whelk_N = regN "whelk" ;
lin when_Adv = mkAdv "when" ;
-- lin when_Adv = mkAdv "when" ;
lin whenever_Adv = mkAdv "whenever" ;
-- lin where_Adv = mkAdv "where" ;
-- lin where_Adv = mkAdv "where" ;
lin whereas_Subj = mkSubj "whereas" ;
lin wherever_Adv = mkAdv "wherever" ;
lin while_Subj = mkSubj "while" ;
lin whim_N = regN "whim" ;
lin whine_V = (regV "whine") ;
lin whine_N = regN "whine" ;
lin whiskey_N = regN "whiskey" ;
lin whisky_N = regN "whisky" ;
lin whisper_N = regN "whisper" ;
lin whisper_V = (regV "whisper") ;
lin whisper_VS = mkVS (regV "whisper") ;
lin whistle_V = (regV "whistle") ;
lin white_A = regA "white" ;
lin whole_A = longA "whole" ;
--lin whole_A = regA "whole" ;
lin wholly_Adv = mkAdv "wholly" ;
-- lin why_Adv = mkAdv "why" ;
-- lin why_Adv = mkAdv "why" ;
-- lin whyever_Adv = mkAdv "whyever" ;
lin wicked_A = longA "wicked" ;
lin wide_A = regA "wide" ;
lin widow_N = regN "widow" ;
lin width_N = regN "width" ;
lin wife_N2of = irregN2 "wife" "wife" "of" ;
lin wild_A = regA "wild" ;
lin will_N = regN "will" ;
lin willing_A2 = longA2 "willing" "" ;
lin willing_A = longA "willing" ;
lin win_V2 = prpV2 (IrregEng.win_V) "" ;
lin wind_V2 = prpV2 IrregEng.wind_V "" ;
lin wind_V = useV IrregEng.wind_V ;
lin wind_N = regN "wind" ;
lin window_N = regN "window" ;
lin wine_N = massN "wine" ;
lin wing_N = regN "wing" ;
lin winter_N = regN "winter" ;
lin wire_N = regN "wire" ;
lin wisdom_N = regN "wisdom" ;
lin wise_A = regA "wise" ;
lin wish_V2for = prpV2 (regV "wish") "for" ;
lin wish_VS = mkVS (regV "wish") ;
lin wish_N = regN "wish" ;
lin witch_N = regN "witch" ;
--lin with_Prep = mkPrep "with" ;
lin within_Adv = mkAdv "within" ;
lin within_Prep = mkPrep "within" ;
--lin withold_V2 = prpV2 withold_V "" ;
--lin without_Prep = mkPrep "without" ;
lin withstand_V2 = prpV2 (regV "withstand") "" ;
lin witness_V2 = prpV2 (regV "witness") "" ;
lin witness_N2to = prepN2 "witness" "to" ;
lin woman_N = irregN "woman" "women" ;
lin wonder_V2 = prpV2 (regV "wonder") "" ;
lin wonder_N = regN "wonder" ;
lin wood_N = regN "wood" ;
lin wooden_A = longA "wooden" ;
lin wool_N = massN "wool" ;
lin word_N = regN "word" ;
lin work_N = massN "work" ;
lin work_V = (regV "work") ;
lin world_N = regN "world" ;
lin worm_N = regN "worm" ;
lin worry_V2 = prpV2 (regV "worry") "" ;
lin worry_V2about = prpV2 (regV "worry") "about" ;
lin worry_N = regN "worry" ;
lin worship_V2 = prpV2 (regV "worship") "" ;
lin worth_Prep = mkPrep "worth" ;
lin worthless_A = longA "worthless" ;
lin worthwhile_A = longA "worthwhile" ;
lin worthy_A = regA "worthy" ;
lin worthy_A2of = regA2 "worthy" "of" ;
lin wound_V2 = prpV2 (regV "wound") "" ;
lin wound_N = regN "wound" ;
lin wrap_V2 = prpV2 (regV "wrap") "" ;
lin wreck_V2 = prpV2 (regV "wreck") "" ;
lin wreck_N = regN "wreck" ;
lin wrinkle_N = regN "wrinkle" ;
lin wrist_N = regN "wrist" ;
lin write_V2 = prpV2 write_V "" ;
lin wrong_A = longA "wrong" ;
lin wry_A = regA "wry" ;
lin yard_N = regN "yard" ;
lin year_N = regN "year" ;
lin yellow_N = massN "yellow" ;
lin yellow_A = regA "yellow" ;
lin yesterday_Adv = mkAdv "yesterday" ;
lin yet_Adv = mkAdv "yet" ;
lin yield_V2 = prpV2 (regV "yield") "" ;
lin yield_N = regN "yield" ;
lin young_A = regA "young" ;
lin youth_N = regN "youth" ;
lin zinc_N = massN "zinc" ;
oper useV : V -> V = \v -> v ;
oper massN : Str -> N = \s -> regN s ;
longA : Str -> A = \s -> compoundADeg (regA s) ;
irregN : Str -> Str -> N = \x,y -> mk2N x y ; --
irregN2 : Str -> Str -> Str -> N2 = \x,y,p -> mkN2 (irregN x y) (mkPrep p) ; --
longA2 : Str -> Str -> A2 = \s,p -> mkA2 (compoundADeg (regA s)) (mkPrep p) ; --
regA2 : Str -> Str -> A2 = \s,p -> mkA2 (regA s) (mkPrep p) ; --
prpV2 : V -> Str -> V2 = \s,p -> mkV2 s (mkPrep p) ; --
prepN2 : Str -> Str -> N2 = \s,p -> mkN2 (regN s) (mkPrep p) ; --
dirprepV3 : V -> Str -> V3 = \s,p -> dirV3 s (mkPrep p) ; --
mkSubj : Str -> Subj = \s -> {s = s ; lock_Subj = <>} ;
}
